# Common values, used all over the application

select.choose=- choose -
common.form.valid=Form is valid.

common.Description=Description
common.Choose=Choose
common.button=button
common.Button=Button
button.add=Add
button.change=Change
button.back=Back
button.cancel=Cancel
button.retry=Retry
button.search=Search
button.clear=Clear
button.save=Save
button.ready=OK
button.print=Print

list.address=Address

common.Showing=Showing
common.Total=Total
common.firstName=Name
common.lastName=Surname
common.email=e-mail
common.no=no
common.yes=yes
common.description=Description
common.code=Code
common.date=Date
common.datetime=Datetime
common.time=Time
common.module=Module
common.name=Name
common.department=Department
common.subdepartment=Subdepartment
common.insurer=Insurer
common.float=Float
common.textbox=textbox
common.Textbox=Textbox
common.country=country
common.Country=Country
common.Submit=Submit
common.Delete=Delete
common.Remove=Remove
common.Edit=Edit
common.View=View

image.alt.edit=Change
image.alt.delete=Delete
image.alt.info=Info
image.alt.history=Change history

Checkbox=Checkbox

#date
# TODO move to domain?
date_month_0=January
date_month_1=February
date_month_2=March
date_month_3=April
date_month_4=May
date_month_5=June
date_month_6=July
date_month_7=August
date_month_8=September
date_month_9=October
date_month_10=November
date_month_11=December

date_day_1=M
date_day_2=Tu
date_day_3=We
date_day_4=Th
date_day_5=F
date_day_6=Sa
date_day_7=Su

searchform.notenoughdata=Not enough data

#demo
demo_filteredinput=Filtered Input Field
demo.filteredinput.filterchars=Filter chars
demo.filteredinput.input=Filtered input
demo_automaticForm_title=Automatic Formelement
demo.onchangelistenertest.http=OnChange Listeners Test (HTTP)
demo.onchangelistenertest.ajaxanywhere=OnChange Listeners Test (AjaxAnyWhere)
demo.onchangelistenertest.autocomplete=OnChange Listeners Test (Widget action, AjaxAnyWhere submit)
demo.suggestive.textinput=Suggestive input field

demo.showAll=Show all.
demo.showPartial=Show paged.

#examples menu
Management=Management
Persons=Persons
Companies=Companies
Contracts=Contracts
Samples=Samples
Demos=Demos
Lists=Lists
View=View
View_Edit=View/Edit
View_Add=View/Add
Add=Add
Edit=Edit
Error=Error
Editable_List_Memory=Editable List (Memory)
Editable_List_Backend=Editable List (Backend)
Simple_Form=Simple Form
Simple_List=Simple List
Search_Form=Search Form
Display_Form=Display Form
Editable_List=Editable List
In_memory_editable_list=In memory editable list
Editable_checkbox_list=Editable checkbox list
Displayable_editable_list=Displayable editable list
Pinnaveehaare_Oracle=Pinnaveehaare (Oracle)
Contacts_SubBeanList=Contacts (SubBeanList)
Complex_Form=Ajaxian form
Complex_Form_HTTP=HTTP form
Rich_Text_Editor=Rich editor
Multi_List=Multiple Lists
File_Upload=File upload
Error_on_init=Error on Init
Error_on_event=Error on Event
Error_on_render=Error on Render
Simple=Simple
Advanced=Advanced
Invisible_Element_Form=Invisible element form
Popup_Example=Popup example
MultiSelect=MultiSelect
AutoComplete=Input suggest
Form_Lists=Form lists
Embedded_Form_List=Embedded form list
Misc=Misc
Redirecting=Redirecting
RadioSelect=RadioSelect
Error_on_ajax_request=Error on AJAX request
OnChangeListeners=OnChange Listeners
Form_with_Actions=Form with Actions
Trees=Trees
Simple_Tree=Simple Tree
Complex_Tree=A more complex tree
Tree_with_Unsynchronized_Actions=Unsynchronized actions
Advanced_Popup=Advanced popups
Context_Menus=Context Menus
Tabs=Tabs
Tabs_Demo=Tabs
Modal_Dialog=Modal dialog
Easy_AJAX_Update_Regions=Easy AJAX w/ 'update regions'
TreeComponent=Tree Component
List=List w/ sorting & paging
ComboTextInput=Combined selection+text input fields
Seamless_Validation=Seamless server side validation
Serverside_Polling=Periodical data polling
Cooperative_Form=Cooperative Form

#'complex' ajaxian form
natures.beasts=Nature's Beasts

#easy ajax
easyajax.intro=Code of the two components on this page is identical. They behave a little differently though&mdash;upper component communicates with server by HTTP requests and the bottom one by XMLHttpRequests. This was just achieved by adding about two lines of code to template that renders bottom component. Using so called 'update regions' it is easy to make application behave in AJAXian manner. Those requests asynchronously update only part of your page allows end-user to continue with his business process without the delay that would otherwise occur while waiting for response.

#friendly update
ufriendly.component.title=Cooperative form
ufriendly.component.intro=Cooperative forms only require user to enter minimum amount of data. Everything that can be deduced from the given information is. In this form this works as follows: when business registration number is filled in, other data can be fetched from central registry by pressing the corresponding button. At the same time, user can continue filling of the invoice data.
ufriendly.component.getdata=Fetch data from central registry
ufriendly.component.centralfirmid=Business registration number
ufriendly.component.registryaddress=Registered location
ufriendly.component.postaladdress=Postal address
ufriendly.component.bankaccount=Bank account
ufriendly.component.vatidentifier=VAT number
ufriendly.component.firmtype=Company type
ufriendly.component.invoice.id=Invoice identification number
ufriendly.component.invoice.date=Date of invoice
ufriendly.component.invoice.sum=Sum of invoice
ufriendly.public.limited=Public Ltd
ufriendly.npo=NPO
ufriendly.private.limited=Private Ltd
ufriendly.cform.reset=Reset form

#context menu
context.menu.compheader=Widget with context menu
context.menu.intro=It is possible to customize the right-click contextmenu of your application. You can attach the customized contextmenu to page, list, form input field&mdash;to any component that might need it.
context.menu.howto=Right-click anywhere inside this component to open a customized context-menu with one sublevel.
context.menu.ChangeSex=Change sex

#simple list sorting and paging
simple.list.sort.page=Simple list w/ paging&sorting support
simple.list.rolistintro=Creating read-only list from a bunch of model objects is really easy. Developer just declares the class of the model objects and the fields that should be shown and <a href="http://www.araneaframework.org/docs/1.1/javadoc/org/araneaframework/uilib/list/BeanListWidget.html">BeanListWidget</a> takes care of the rest&mdash;paging and sorting are provided without any additional code.
simple.list.howtonavigate=You can try out the sorting by clicking on the list header names and paging by using the navigation bar at the list bottom.

#seamless validation form
seamless.bg.form=Form w/ seamless background validation
seamless.withoutbg.form=Form with with traditional on-submit validation 
seamless.appointmentdate=Appointment date
seamless.appointmenttime=Appointment time
seamless.room=Room
seamless.attendees=Attendees
seamless.intro=Often instant feedback is desired in applications&mdash;user should not be allowed to proceed too far with his business process when his initial assumptions were incorrect and at the end he would be presented with some validation error screen. Aranea forms can be configured to perform validation as user fills it (opposed to the traditional approach when validation is performed when submitting the form). This prevents the delays and misunderstandings. Because this is implemented asynchronously there are no interrupts during input procedure and when form is finally submitted it will contain only acceptable data.
seamless.howto=Of two forms on this page, upper form is validated only on submit, lower one is validated seamlessly. Try it out by entering some invalid values. Keep in mind that not all rooms are available and not everyone is always able to attend meetings.
seamless.rooms.atrium=Atrium
seamless.rooms.olympic=Casino Olympic
seamless.rooms.colosseum=Colosseum
seamless.rooms.rld=Red Light District
seamless.rooms.warroom=War Room
seamless.room.not.available=Room ''{0}'' is already reserved
seamless.attendees.not.available=''{0}'' cannot attend the meeting (they are preoccupied or dead)

#autocomplete release demo
release.ac.onchangetext=Changed, value is
release.ac.submitvalid=Submitted value is:  
ac.demo.title=Autocomplete (suggestion) demo
ac.demo.intro=It is well known fact that users do not know what they really want. With input suggestions, you can help them to overcome their initial cluelessness and maybe learn correct spelling of long words :)
ac.demo.howto=When you type at least one character in input field below, browser will ask the server for suggested completions (which in this case are country names). User is by no means tied to suggested inputs though, 'M\u00e4gi-Karabahh' is as feasible input to below text-field as any other.

#combotextselectinput
combo.demo.fieldinput=Consultant name
combo.intro=Combines input and select elements, making it a lot easier to use long classified values in the page. An example could be a dropdown with several hundred records.
combo.submitmessage=Entered value was:

#poll
poll.taskmsg=You have a new task, task number is ''{0}''. Task was created at ''{1}''.

#modal dialgo demo
modal.demo.startnext=Start next
modal.demo.startnextoverlay=Start next in overlay
modal.demo.previous=Return to previous
modal.demo.title=Modal dialog demo
modal.demo.intro=There are times when one needs to prevent users from wandering around in parallel usecases, shooting themselves in the foot at the go. Aranea provides a way to present all fully-functional Aranea components in modal dialogs (aka <i>overlay</i>), allowing user to complete a parallel usecase or just respond to an alert. This avoids the need to open additional browser windows that are often blocked by modern browsers or might just go unnoticed by user.
modal.demo.howto=Start another identical widget by clicking on a "Start next" or "Start next in overlay" buttons. Once the modal dialog (overlay mode) is activated, both buttons will act identically. When overlay completes (this will happen when "Return to previous" button is used in activated overlay where there are no more flows that are running inside overlay), user is returned to main usecase.

#tree
servletcontext.tree.title=Powerful tree component
servletcontext.tree.intro=Aranea tree component allows for easy navigation of complex hierarchical structures. Backing datastore resides on server and only parts that are currently shown to user are fetched to client. Demos below demonstrate two approaches of communication&mdash;first makes use of usual Aranea event API (produces HTTP requests here because no update regions are used), the other one uses Aranea Action API. Switching between the two models is as easy as calling <code>Treewidget.setUseActions(true)</code>.
servletcontext.tree.more=Although current example does not demonstrate this, it is also easy to customize rendering for each tree node. One can have each node rendered differently, if he so desires.
servletcontext.treew.events=Tree with events:
servletcontext.treew.actions=Tree with actions:

#tabs
tabs.intro=When user has lots of power, it is sometimes nice to lay this power out in a logically separated way. The tab widget that enjoys wide popularity in all sorts of UI interfaces provides clean approach to do just that. Navigation between your business processes in tabs can be done without the worries of state being lost.

#simple editable list
SimpleEditableList=Simple editable list
sed.title=Editable list w/ filtering, modification, deletion and addition support
sed.Forename=Name
sed.Surname=Surname
sed.Sex=Sex
sed.sexcon.ermsg=Field ''{0}'' must contain valid sex ('M' or 'F').
sed.intro=Read-only lists provide great overview of records, but do not directly allow modification. For easy modification, one can choose to use editable lists.
sed.howtonavigate=You can try out filtering by filling some filter fields and pressing 'Return' key or clicking 'Filter' button. Addition of new record is done by filling data fields at the bottom of the list and clicking on 'Add' button. List field can be modified by activating edit mode (separate button for this is in each row).

#examples varia
person.add.form.label=Adding person
person.edit.form.label=Editing person
company.add.form.label=Adding company
company.edit.form.label=Editing company

#Aranea 1.1
Aranea_1_1=Aranea 1.1

#ARANEA 1.1 intro texts
aranea.welcome=Welcome to Aranea-MVC 1.1!
aranea.About.title=About
aranea.about=Aranea is an Open-Source Web platform written in Java. This application consists of several examples built with Aranea Uilib and Aranea JSP tag library. Visit <a href="http://www.araneaframework.org/?pid=about">Aranea home page</a> for detailed information about goals of Aranea project.

aranea.what.title=What pre-built components and ready-to-use features does Aranea 1.1 offer me?
aranea.what.how=Just look around in this sample application to find out. Commented demos of Aranea 1.1 \
features and components are just a mouseclick away.
aranea.whatsnew=What's new in Aranea 1.1?
aranea.wecomment=Here we shortly comment on high-level modifications/features that we believe make Aranea 1.1 &gt; 1.0
aranea.ComponentModel=Component Model
aranea.component.scope=All components now have access to their <a href="http://www.araneaframework.org/docs/1.1/javadoc/org/araneaframework/Scope.html">scope</a>&mdash;component's unique \
identifier in the component hierarchy. Previously it was hidden from developers, only accessible under certain conditions. \
Having access to component scopes simplifies both framework integration and component rendering.

aranea.component.lifecycle=<a href="http://www.araneaframework.org/docs/1.1/javadoc/org/araneaframework/Widget.html">Widget</a> \
lifecycle has been simplified by removing the <i>process()</i> method. As an intermediate call between \
component update and component rendering it was prone to misuse that made impossible to be sure \
that certain component methods had exactly same effect when called on a component in the middle of its lifecycle \
or on some inactive component. To disallow building components that break the POJO contract, it was \
decided to remove this method completely.

aranea.component.realasync=Default component assembly has been seamlessly changed to allow for parallel processing of asynchronous requests. \
In Aranea 1.0, incoming requests were always processed sequentially. 1.1 allows asynchronous processing only when developer \
explicitly opts to use it&mdash;and Widget's lifecycle methods are not invoked in that case, just <a href="http://www.araneaframework.org/docs/1.1/javadoc/org/araneaframework/core/BaseApplicationWidget.html#addActionListener(java.lang.Object,%20org.araneaframework.core.ActionListener)">action listeners</a> registered by the Widget. Initial motivation for allowing optional asynchronous communication with widgets came from \
police patrol monitoring application that needed very fast responses.

arenea.component.RenderingModel.title=Rendering Model
aranea.component.renderingmodeupdate=In Aranea 1.0, rendering phase of the lifecycle always rendered whole widget hierarchy. \
In Aranea 1.1 those requests that specify only certain regions of page to be in need of an update, are rendered in a more \
fine-grained way&mdash;the rendering unit will be one render-capable widget that includes all regions that were specified for update. See \
<a href="http://www.araneaframework.org/docs/kvell-aranea-ajax.pdf">Alar Kvell's bachelor work</a> for description of \
how partial rendering works.

aranea.whattomigrate.title=What needs to be done to migrate from Aranea 1.0 -&gt; 1.1?
aranea.migration.help=Take a look at the <a href="http://www.araneaframework.org/docs/1.1/aranea-1.0-to-1.1-quickmigration.txt">quick migration guide</a>. If it should leave you with some unanswered questions, turn to our \
<a href="http://forum.araneaframework.org">forums</a> for support.

#END OF ARANEA 1.1 INTRO TEXTS

#labels
label.logout=Logout
label.mainpage=Main page

EnglishLang=English
EstonianLang=Estonian
