# Common values, used all over the application

select.choose=- choose -
common.form.valid=Form is valid.

common.Description=Description
common.Choose=Choose
common.button=button
common.Button=Button
button.add=Add
button.change=Change
button.back=Back
button.cancel=Cancel
button.retry=Retry
button.search=Search
button.clear=Clear
button.save=Save
button.ready=OK
button.print=Print

list.address=Address

common.Showing=Showing
common.Total=Total
common.firstName=Name
common.lastName=Surname
common.email=e-mail
common.no=no
common.yes=yes
common.description=Description
common.code=Code
common.date=Date
common.datetime=Datetime
common.time=Time
common.module=Module
common.name=Name
common.department=Department
common.subdepartment=Subdepartment
common.insurer=Insurer
common.float=Float
common.textbox=textbox
common.Textbox=Textbox
common.country=country
common.Country=Country
common.Submit=Submit

image.alt.edit=Change
image.alt.delete=Delete
image.alt.info=Info
image.alt.history=Change history

Checkbox=Checkbox

#date
# TODO move to domain?
date_month_0=January
date_month_1=February
date_month_2=March
date_month_3=April
date_month_4=May
date_month_5=June
date_month_6=July
date_month_7=August
date_month_8=September
date_month_9=October
date_month_10=November
date_month_11=December

date_day_1=M
date_day_2=Tu
date_day_3=We
date_day_4=Th
date_day_5=F
date_day_6=Sa
date_day_7=Su

searchform.notenoughdata=Not enough data

#demo
demo_filteredinput=Filtered Input Field
demo.filteredinput.filterchars=Filter chars
demo.filteredinput.input=Filtered input
demo_automaticForm_title=Automatic Formelement
demo.onchangelistenertest.http=OnChange Listeners Test (HTTP)
demo.onchangelistenertest.ajaxanywhere=OnChange Listeners Test (AjaxAnyWhere)
demo.onchangelistenertest.autocomplete=OnChange Listeners Test (Widget action, AjaxAnyWhere submit)
demo.suggestive.textinput=Suggestive input field

demo.showAll=Show all.
demo.showPartial=Show paged.

#examples menu
Management=Management
Persons=Persons
Companies=Companies
Contracts=Contracts
Samples=Samples
Demos=Demos
Lists=Lists
View=View
View_Edit=View/Edit
View_Add=View/Add
Add=Add
Edit=Edit
Error=Error
Editable_List_Memory=Editable List (Memory)
Editable_List_Backend=Editable List (Backend)
Simple_Form=Simple Form
Simple_List=Simple List
Search_Form=Search Form
Display_Form=Display Form
Editable_List=Editable List
In_memory_editable_list=In memory editable list
Editable_checkbox_list=Editable checkbox list
Displayable_editable_list=Displayable editable list
Pinnaveehaare_Oracle=Pinnaveehaare (Oracle)
Contacts_SubBeanList=Contacts (SubBeanList)
Complex_Form=Ajaxian form
Rich_Text_Editor=Rich editor
Multi_List=Multiple Lists
File_Upload=File upload
Error_on_init=Error on Init
Error_on_event=Error on Event
Error_on_render=Error on Render
Simple=Simple
Advanced=Advanced
Invisible_Element_Form=Invisible element form
Popup_Example=Popup example
MultiSelect=MultiSelect
AutoComplete=Input suggest
Form_Lists=Form lists
Embedded_Form_List=Embedded form list
Misc=Misc
Redirecting=Redirecting
RadioSelect=RadioSelect
Error_on_ajax_request=Error on AJAX request
OnChangeListeners=OnChange Listeners
Form_with_Actions=Form with Actions
Trees=Trees
Simple_Tree=Simple Tree
Complex_Tree=A more complex tree
Tree_with_Unsynchronized_Actions=Unsynchronized actions
Advanced_Popup=Advanced popups
Context_Menus=Context Menus
Tabs=Tabs
Tabs_Demo=Tabs
Modal_Dialog=Modal dialog
Easy_AJAX_Update_Regions=Easy AJAX w/ 'update regions'
TreeComponent=Tree Component
List=List w/ sorting & paging
ComboTextInput=Combined selection+text input fields 
Seamless_Validation=Seamless server side validation

#'complex' ajaxian form
natures.beasts=Nature's Beasts

#easy ajax
easyajax.intro=Code of the two components on this page is identical. They behave a little differently though&mdash;upper component communicates with server by HTTP requests and the bottom one by XMLHttpRequests. This was just achieved by adding about two lines of code to template that renders bottom component. Using so called 'update regions' it is easy to make application behave in AJAXian manner. Those requests asynchronously update only part of your page allows end-user to continue with his business process without the delay that would otherwise occur while waiting for response.

#context menu
context.menu.compheader=Widget with context menu
context.menu.intro=It is possible to customize the right-click contextmenu of your application. You can attach the customized contextmenu to page, list, form input field&mdash;to any component that might need it.
context.menu.howto=Right-click anywhere inside this component to open a customized context-menu with one sublevel.
context.menu.submitfromsub=Submit from submenu

#simple list sorting and paging
simple.list.sort.page=Simple list w/ paging&sorting support
simple.list.rolistintro=Creating read-only list from a bunch of model objects is really easy. Developer just declares the class of the model objects and the fields that should be shown and <a href="http://www.araneaframework.org/docs/1.1/javadoc/org/araneaframework/uilib/list/BeanListWidget.html">BeanListWidget</a> takes care of the rest&mdash;paging and sorting are provided without any additional code.
simple.list.howtonavigate=You can try out the sorting by clicking on the list header names and paging by using the navigation bar at the list bottom.

#seamless validation form
seamless.bg.form=Form w/ seamless background validation
seamless.withoutbg.form=Form with with traditional on-submit validation 
seamless.appointmentdate=Appointment date
seamless.appointmenttime=Appointment time

#autocomplete release demo
release.ac.onchangetext=Changed, value is
release.ac.submitvalid=Submitted value is:  
ac.demo.title=Autocomplete (suggestion) demo
ac.demo.intro=It is well known fact that users do not know what they really want. With input suggestions, you can help them to overcome their initial cluelessness and maybe learn correct spelling of long words :)
ac.demo.howto=When you type at least one character in input field below, browser will ask the server for suggested completions (which in this case are country names). User is by no means tied to suggested inputs though, 'M\u00e4gi-Karabahh' is as feasible input to below text-field as any other.

#combotextselectinput
combo.demo.fieldinput=Consultant name
combo.intro=Combines input and select elements, making it a lot easier to use long classified values in the page. An example could be a dropdown with several hundred records.
combo.submitmessage=Entered value was:

#modal dialgo demo
modal.demo.startnext=Start next
modal.demo.startnextoverlay=Start next in overlay
modal.demo.previous=Return to previous
modal.demo.title=Modal dialog demo
modal.demo.intro=There are times when one needs to prevent users from wandering around in parallel usecases, shooting themselves in the foot at the go. Aranea provides a way to present all fully-functional Aranea components in modal dialogs (aka <i>overlay</i>), allowing user to complete a parallel usecase or just respond to an alert. This avoids the need to open additional browser windows that are often blocked by modern browsers or might just go unnoticed by user.
modal.demo.howto=Start another identical widget by clicking on a "Start next" or "Start next in overlay" buttons. Once the modal dialog (overlay mode) is activated, both buttons will act identically. When overlay completes (this will happen when "Return to previous" button is used in activated overlay where there are no more flows that are running inside overlay), user is returned to main usecase.

#tree
servletcontext.tree.title=Powerful tree component
servletcontext.tree.intro=Aranea tree component allows for easy navigation of complex hierarchical structures. Backing datastore resides on server and only parts that are currently shown to user are fetched to client. Demos below demonstrate two approaches of communication&mdash;first makes use of usual Aranea event API (produces HTTP requests here because no update regions are used), the other one uses Aranea Action API. Switching between the two models is as easy as calling <code>Treewidget.setUseActions(true)</code>.
servletcontext.tree.more=Although current example does not demonstrate this, it is also easy to customize rendering for each tree node. One can have each node rendered differently, if he so desires.
servletcontext.treew.events=Tree with events:
servletcontext.treew.actions=Tree with actions:

#tabs
tabs.intro=When user has lots of power, it is sometimes nice to lay this power out in a logically separated way. The tab widget that enjoys wide popularity in all sorts of UI interfaces provides clean approach to do just that. Navigation between your business processes in tabs can be done without the worries of state being lost.

#examples varia
person.add.form.label=Adding person
person.edit.form.label=Editing person
company.add.form.label=Adding company
company.edit.form.label=Editing company

#Aranea 1.1
Aranea_1_1=Aranea 1.1

#labels
label.logout=Logout
label.mainpage=Main page

EnglishLang=English
EstonianLang=Estonian
