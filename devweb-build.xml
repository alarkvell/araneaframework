<project name="Arendusweb" default="edit_change" basedir=".">

<!--





********************************************************************************



PLEASE DO NOT MODIFY THIS FILE.

ALL YOUR CHANGES WILL BE LOST ON NEXT AUTOMATIC UPDATE.



********************************************************************************






-->

<!-- Load project-specific properties -->
<property file="devweb-personal.properties"/> <!-- must be first: personal properties may override project properties -->
<property file="devweb-project.properties"/>

<!-- Build script version -->
<property name="devweb.script.version" value="58"/>

<!-- URL for web service -->
<property name="devweb.url" value="${devweb.rooturl}/service.php?user=${devweb.user}&amp;auth=${devweb.auth-token}&amp;script_version=${devweb.script.version}"/>

<!-- default values for version component property names: -->
<property name="devweb.version.properties.names.stage" value="stage"/>
<property name="devweb.version.properties.names.milestone" value="milestone"/>
<property name="devweb.version.properties.names.submilestone" value="submilestone"/>
<property name="devweb.version.properties.names.version" value="version"/>

<!-- default values for build parameters: -->
<property name="devweb.integration.buildfile" value="build.xml"/>
<property name="devweb.integration.target" value="build_all"/>

<!-- default value for commit message prefix -->
<property name="devweb.commit.message.prefix" value=""/>

<target name="test_setup">
	<!-- test required features and presence of properties -->
	<fail unless="devweb.user" message="Cannot determine DevWeb user name, please check your devweb-personal.properties file"/>
	<fail unless="devweb.auth-token" message="Cannot determine DevWeb authentication code, please check your devweb-personal.properties file"/>
	<fail unless="devweb.project.cvsroot" message="Cannot determine project CVS root directory"/>
	<fail unless="devweb.tmpdir" message="Cannot determine DevWeb temporary directory"/>
	<available classname="com.changelogic.ant.taskdefs.PropertyFileEdit" property="changelogic.jar.uptodate"/>
	<fail unless="changelogic.jar.uptodate" message="Changelogic tasks library changelogic-ant.jar is not installed or too old; you can download latest changelogic-ant.jar from web interface under supporting files and put it in your ANT_HOME/lib"/>
	<condition property="devweb.bsf.available">
		<or>
			<available  classname="com.ibm.bsf.BSFEngine"/> <!-- for ant 1.5 -->
			<available classname="org.apache.bsf.BSFEngine"/> <!-- for ant 1.6 -->
		</or>
	</condition>
	<fail unless="devweb.bsf.available" message="Bean Scripting Framework is not installed"/>
	<available classname="org.mozilla.javascript.Parser" property="devweb.js.available"/>
	<condition property="devweb.both-bsf.available">
		<and>
			<available  classname="com.ibm.bsf.BSFEngine"/> <!-- for ant 1.5 -->
			<available classname="org.apache.bsf.BSFEngine"/> <!-- for ant 1.6 -->
		</and>
	</condition>
	<fail if="devweb.both-bsf.available" message="Both IBM and Apache Bean Scripting Frameworks are installed, please remove one (see Supporting Files in DevWeb for more information)"/>
	<fail unless="devweb.js.available" message="JavaScript is not installed"/>
	<available file="${devweb.tmpdir}" type="dir" property="devweb.tmpdir.available"/>
	<fail unless="devweb.tmpdir.available" message="Temporary directory for DevWeb downloads is not accessible: ${devweb.tmpdir}"/>
	<script language="javascript">
		<![CDATA[
			project.setUserProperty("devweb.setup.test.javascript.present","1");
		]]>
	</script>
	<fail unless="devweb.setup.test.javascript.present" message="Javascript support does not work in ant build script"/>
	<get src="${devweb.url}&amp;event=Ping" dest="${devweb.tmpdir}/ping.properties"/>
	<property file="${devweb.tmpdir}/ping.properties" prefix="devweb.setup.test.server"/>
	<delete file="${devweb.tmpdir}/ping.properties"/>
	<echo message="${devweb.setup.test.server.devweb.notice}"/>
	<echo message="${devweb.setup.test.server.devweb.warning}"/>
	<fail if="devweb.setup.test.server.devweb.error" message="${devweb.setup.test.server.devweb.error}"/>
	<fail unless="devweb.setup.test.server.ping" message="Cannot connect DevWeb server at ${devweb.rooturl}"/>
	<fail unless="devweb.setup.test.server.repository" message="Cannot determine repository name for current project"/>
	<property name="devweb.setup.test.dir.repository" location="../${devweb.setup.test.server.repository}"/>
	<property name="devweb.setup.test.dir.current" location="."/>
	<condition property="devweb.setup.test.dir.matches">
		<equals arg1="${devweb.setup.test.dir.current}" arg2="${devweb.setup.test.dir.repository}"/>
	</condition>
	<fail unless="devweb.setup.test.dir.matches" message="Project repository name does not match current directory name - expected &quot;${devweb.setup.test.dir.repository}&quot; instead of &quot;${devweb.setup.test.dir.current}&quot;. Please check that you are not using an authentication code of another project."/>
</target>

<target name="init">
	<fail unless="devweb.tmpdir" message="Cannot determine DevWeb temporary directory"/>
	<mkdir dir="${devweb.tmpdir}"/>
	<script language="javascript">
		<![CDATA[
			// detect if using Java 1.4 or better
			var javaVersion = project.getProperty("java.version");
			var javaVersionComponents = (javaVersion+"").split(".");
			if ((javaVersionComponents[0]==1 && javaVersionComponents[1]*1>3) || (javaVersionComponents[0]*1>1)) {
				project.setUserProperty("devweb.java_1_4.compatible","true");
			}
		]]>
	</script>
	<condition property="devweb.logging.enabled" value="true">
		<and>
			<isset property="devweb.java_1_4.compatible"/>
			<istrue value="${devweb.java_1_4.compatible}"/>
			<available classname="com.changelogic.ant.log.BuildLoggerSingleton"/>
			<not>
				<and>
					<isset property="devweb.logging.disabled"/>
					<istrue value="${devweb.logging.disabled}"/>
				</and>
			</not>
		</and>
	</condition>
	<script language="javascript">
		<![CDATA[
			if (project.getProperty("devweb.logging.enabled")) {
				build_logger_class = project.getClass().getClassLoader().loadClass("com.changelogic.ant.log.BuildLoggerSingleton");
				build_logger_check_method = build_logger_class.getMethod("isInitialized",new Array());
				build_logger_check_result = build_logger_check_method.invoke(null,new Array());
				if (!build_logger_check_result.booleanValue()) { // do not install build logger twice
					logFileName = project.getProperty("devweb.tmpdir")+"/devweb-build.log";
					logHistoryLength = project.getProperty("devweb.build.history.length")? project.getProperty("devweb.build.history.length") : 10;

					// delete oldest log file
					oldLogFile = new java.io.File(logFileName+"."+logHistoryLength-1);
					if (oldLogFile.exists()) {
						// cannot call "delete" directly since it is a reserved word in Javascript
						oldLogFile.getClass().getMethod("delete",new Array()).invoke(oldLogFile,new Array());
					}

					// rotate old log files
					for (i=logHistoryLength-2; i>=-1; i--) {
						rotatedLogFile = new java.io.File(logFileName+(i>=0? "."+i : ""));
						if (rotatedLogFile.exists()) {
							rotatedLogFile.renameTo(oldLogFile);
						}
						oldLogFile = rotatedLogFile;
					}

					// start new logger
					build_logger_instance_method = build_logger_class.getMethod("getInstance",new Array(project.getClass().getClassLoader().loadClass("java.lang.String")));
					build_logger = build_logger_instance_method.invoke(null,new Array(logFileName));
					build_logger.setMessageOutputLevel(project.MSG_DEBUG);
					//build_logger.setOutputPrintSream(new java.io.PrintStream(new java.io.FileOutputStream(logFileName,false)));
					project.addBuildListener(build_logger);
				}
			}
		]]>
	</script>
	<antcall target="init_cvsroot"/>
	<property file="${devweb.tmpdir}/cvsroot.properties"/>
	<delete file="${devweb.tmpdir}/cvsroot.properties"/>
	<antcall target="test_setup"/>
	<taskdef name="propertyfileedit" classname="com.changelogic.ant.taskdefs.PropertyFileEdit"/>
</target>

<target name="init_cvsroot" unless="devweb.project.cvsroot">
	<delete file="${devweb.tmpdir}/cvsroot.properties"/>
	<available file="CVS/Root" type="file" property="cvs.root.file.exists"/>
	<antcall target="init_cvsroot_file"/>
	<property file="${devweb.tmpdir}/cvsroot.properties"/>
	<property environment="env"/>
	<antcall target="init_cvsroot_env"/>
</target>

<target name="init_cvsroot_env" if="env.CVSROOT" unless="devweb.project.cvsroot">
	<propertyfile file="${devweb.tmpdir}/cvsroot.properties">
		<entry key="devweb.project.cvsroot" value="${env.CVSROOT}"/>
	</propertyfile>
</target>

<target name="init_cvsroot_file" if="cvs.root.file.exists" unless="devweb.project.cvsroot">
	<loadfile srcFile="CVS/Root" property="loaded.cvsroot" encoding="ISO-8859-1">
		<filterchain>
			<striplinebreaks/>
		</filterchain>
	</loadfile>
	<propertyfile file="${devweb.tmpdir}/cvsroot.properties">
		<entry key="devweb.project.cvsroot" value="${loaded.cvsroot}"/>
	</propertyfile>
</target>

<target name="edit_change" description="Start development of a change. You will be asked the change number." depends="init">
	<get src="${devweb.url}&amp;event=Get_editable_changes" dest="${devweb.tmpdir}/editable_changes.properties"/>
	<property file="${devweb.tmpdir}/editable_changes.properties" prefix="editable_changes"/>
	<delete file="${devweb.tmpdir}/editable_changes.properties"/>
	<echo message="${editable_changes.devweb.notice}"/>
	<echo message="${editable_changes.devweb.warning}"/>
	<fail if="editable_changes.devweb.error" message="${editable_changes.devweb.error}" />
	<script language="javascript">
		<![CDATA[
			var subtarget = project.getClass().getClassLoader().loadClass("org.apache.tools.ant.Target").newInstance();
			subtarget.setName("edit_change_show_list");
			project.addOrReplaceTarget(subtarget);
			echoer = project.createTask("echo");
			echoer.setMessage(project.getProperty("editable_changes.change0.id")? "Available choices: " : "No editable changes were found.");
			subtarget.addTask(echoer);
			for (i=0;change_id=project.getProperty("editable_changes.change"+i+".id");i++) {
				echoer = project.createTask("echo");
				echoer.setMessage(change_id+" - "+project.getProperty("editable_changes.change"+i+".description"));
				subtarget.addTask(echoer);
			}
			subtarget.execute();
		]]>
	</script>
	<input message="Change ID: " addproperty="change.id"/>
	<fail unless="change.id" message="You must provide change ID to proceed"/>
	<script language="javascript">
		<![CDATA[
			var numRegExp = /^\d\d*$/;
			if (!numRegExp.test(project.getProperty("change.id"))) {
				invalid_change_id.execute();
			}
		]]>
	</script>
	<get src="${devweb.url}&amp;event=Start_development&amp;change_id=${change.id}" dest="${devweb.tmpdir}/edit_change.properties" />
	<property file="${devweb.tmpdir}/edit_change.properties" prefix="edit_change"/>
	<delete file="${devweb.tmpdir}/edit_change.properties"/>
	<echo message="${edit_change.devweb.notice}"/>
	<echo message="${edit_change.devweb.warning}"/>
	<fail if="edit_change.devweb.error" message="${edit_change.devweb.error}" />
	<script language="javascript">
		<![CDATA[
			if (project.getProperty("edit_change.base.tag")) {
				if (project.getProperty("edit_change.checkpoint.tag")) {
					runner = project.createTask("antcall");
					runner.setTarget("mark_checkpoint");
					prop = runner.createParam();
					prop.setName("checkpoint.tag");
					prop.setValue(project.getProperty("edit_change.checkpoint.tag"));
					prop = runner.createParam();
					prop.setName("checkpoint.base.tag");
					prop.setValue(project.getProperty("edit_change.checkpoint.base.tag"));
					prop = runner.createParam();
					prop.setName("checkpoint.repository");
					prop.setValue(project.getProperty("edit_change.repository"));
					for (i = 0; server_path = project.getProperty("edit_change.checkpoint.module"+i+".server_path"); i++) {
						prop = runner.createParam();
						prop.setName("checkpoint.module"+i+".server_path");
						prop.setValue(server_path);
					}
					edit_change_sub1.addTask(runner);
				}
				var server_paths = new Array(project.getProperty("edit_change.repository"));
				var base_tags = new Array(project.getProperty("edit_change.base.tag"));
				for (i=0; server_path = project.getProperty("edit_change.module"+i+".server_path"); i++) {
					server_paths[server_paths.length] = server_path;
					base_tags[base_tags.length] = project.getProperty("edit_change.module"+i+".base.tag");
				}
				server_paths_count = server_paths.length;
				for (i=0; i<server_paths_count; i++) {
					server_path = server_paths[i];
					base_tag = base_tags[i];
					brancher = project.createTask("cvs");
					brancher.setCvsRoot(project.getProperty("devweb.project.cvsroot"));
					brancher.setCommand("rtag");
					brancher.addCommandArgument("-F");
					brancher.addCommandArgument("-B");
					brancher.addCommandArgument("-b");
					brancher.addCommandArgument("-r");
					brancher.addCommandArgument(base_tag);
					brancher.addCommandArgument("change_"+project.getProperty("change.id"));
					brancher.addCommandArgument(server_path);
					brancher.setFailOnError(true);
					edit_change_sub1.addTask(brancher);
				}
				edit_change_sub1.execute();
				adder = project.createTask("cvs");
				adder.setCvsRoot(project.getProperty("devweb.project.cvsroot"));
				adder.setCommand("add");
				adder.addCommandArgument("change.properties");
				adder.setFailOnError(false); // bug 6684
				edit_change_sub2.addTask(adder);
				commiter = project.createTask("cvs");
				commiter.setCvsRoot(project.getProperty("devweb.project.cvsroot"));
				commiter.setCommand("commit");
				commiter.addCommandArgument("-m");
				commiter.addCommandArgument(project.getProperty("devweb.commit.message.prefix")+"Change "+project.getProperty("change.id"));
				commiter.addCommandArgument("change.properties");
				commiter.setFailOnError(true);
				edit_change_sub2.addTask(commiter);
			}
		]]>
	</script>
	<antcall target="checkout_dir">
		<param name="checkout_dir.dir" value=".."/>
		<param name="checkout_dir.repository" value="${edit_change.repository}"/>
		<param name="checkout_dir.tag" value="${edit_change.tag}"/>
		<param name="checkout_dir.modules.prefix0" value="edit_change.module"/>
		<param name="checkout_dir.modules.prefix1" value="edit_change.newmodule"/>
	</antcall>
	<property file="change.properties" prefix="old_change"/>
	<condition property="change.properties.correct">
		<and>
			<isset property="old_change.change.id"/>
			<equals arg1="${old_change.change.id}" arg2="${change.id}"/>
		</and>
	</condition>
	<script language="javascript">
		<![CDATA[
			edit_change_sub3.execute();
		]]>
	</script>
	<script language="javascript">
		<![CDATA[
			edit_change_sub2.execute();
		]]>
	</script>
	<get src="${devweb.url}&amp;event=Start_development&amp;change_id=${change.id}&amp;commit=1" dest="${devweb.tmpdir}/edit_change_commit.properties" />
	<property file="${devweb.tmpdir}/edit_change_commit.properties" prefix="edit_change_commit"/>
	<delete file="${devweb.tmpdir}/edit_change_commit.properties"/>
	<echo message="${edit_change_commit.devweb.notice}"/>
	<echo message="${edit_change_commit.devweb.warning}"/>
	<fail if="edit_change_commit.devweb.error" message="${edit_change_commit.devweb.error}"/>
	<antcall target="process_environment_adjustments">
		<param name="process_environment_adjustments.prefix" value="edit_change"/>
	</antcall>
	<!-- This script might have been updated from CVS to an older version without the "update_maven_version" target; we use "antcallnofail" to suppress these errors -->
	<taskdef name="antcallnofail" classname="com.changelogic.ant.taskdefs.AntCallNoFail"/>
	<antcallnofail target="update_maven_version" failProperty="update_maven_version.failed">
		<param name="update_maven_version.dir" value="." />
		<param name="update_maven_version.commit" value="commit" />
		<param name="update_maven_version.commit.message" value="change ${change.id}" />
	</antcallnofail>
</target>

<target name="edit_change_sub1">
	<!-- for internal use -->
</target>

<target name="edit_change_sub2">
	<!-- for internal use -->
</target>

<target name="edit_change_sub3" unless="change.properties.correct">
	<!-- for internal use -->
	<!-- deletes old change.properties and initializes a new one -->
	<delete file="change.properties"/>
	<propertyfileedit file="change.properties">
		<entry key="change.id" value="${change.id}"/>
	</propertyfileedit>
</target>

<target name="invalid_change_id">
	<!-- for internal use -->
	<fail message="Change ID should contain only numbers"/>
</target>

<target name="invalid_submilestone">
	<!-- for internal use -->
	<fail message="Invalid submilestone number, submilestone number should consist of three numeric parts separated by dots"/>
</target>

<target name="invalid_version">
	<!-- for internal use -->
	<fail message="Invalid version number, version number should consist of four numeric parts separated by dots"/>
</target>

<target name="edit_module" description="Start development of a module. You will be asked the module code." depends="init,edit_module_ask">
	<property file="change.properties"/>
	<fail unless="change.id" message="Cannot determine current change ID"/>
	<fail unless="edit_module.code" message="You must provide module code to proceed"/>
	<get src="${devweb.url}&amp;event=Start_module_development&amp;change_id=${change.id}&amp;code=${edit_module.code}" dest="${devweb.tmpdir}/edit_module_start.properties"/>
	<property file="${devweb.tmpdir}/edit_module_start.properties" prefix="edit_module_start"/>
	<delete file="${devweb.tmpdir}/edit_module_start.properties"/>
	<echo message="${edit_module_start.devweb.notice}"/>
	<echo message="${edit_module_start.devweb.warning}"/>
	<fail if="edit_module_start.devweb.error" message="${edit_module_start.devweb.error}"/>
	<cvs
		quiet="true"
		failonerror="true"
		cvsRoot="${devweb.project.cvsroot}"
	>
		<commandline>
			<argument value="rtag"/>
			<argument value="-F"/>
			<argument value="-B"/>
			<argument value="-b"/>
			<argument value="-r"/>
			<argument value="${edit_module_start.base.tag}"/>
			<argument value="${edit_module_start.change.tag}"/>
			<argument value="${edit_module_start.module0.server_path}"/>
		</commandline>
	</cvs>
	<antcall target="checkout_dir">
		<param name="checkout_dir.modules.dir" value="."/>
		<param name="checkout_dir.tag" value="${edit_module_start.change.tag}"/>
		<param name="checkout_dir.modules.prefix0" value="edit_module_start.module"/>
	</antcall>
	<get src="${devweb.url}&amp;event=Start_module_development&amp;change_id=${change.id}&amp;code=${edit_module.code}&amp;commit=1" dest="${devweb.tmpdir}/edit_module_commit.properties"/>
	<property file="${devweb.tmpdir}/edit_module_commit.properties" prefix="edit_module_commit"/>
	<delete file="${devweb.tmpdir}/edit_module_commit.properties"/>
	<echo message="${edit_module_commit.devweb.notice}"/>
	<echo message="${edit_module_commit.devweb.warning}"/>
	<fail if="edit_module_commit.devweb.error" message="${edit_module_commit.devweb.error}"/>
</target>

<target name="edit_module_ask" unless="edit_module.code">
	<!-- for internal use -->
	<!-- asks user which module to edit -->
	<property file="change.properties"/>
	<get src="${devweb.url}&amp;event=Get_editable_modules&amp;change_id=${change.id}" dest="${devweb.tmpdir}/editable_modules.properties"/>
	<property file="${devweb.tmpdir}/editable_modules.properties" prefix="editable_modules"/>
	<delete file="${devweb.tmpdir}/editable_modules.properties"/>
	<echo message="${editable_modules.devweb.notice}"/>
	<echo message="${editable_modules.devweb.warning}"/>
	<fail if="editable_modules.devweb.error" message="${editable_modules.devweb.error}" />
	<script language="javascript">
		<![CDATA[
			var subtarget = project.getClass().getClassLoader().loadClass("org.apache.tools.ant.Target").newInstance();
			subtarget.setName("edit_module_show_list");
			project.addOrReplaceTarget(subtarget);
			echoer = project.createTask("echo");
			echoer.setMessage(project.getProperty("editable_modules.module0.code")? "\nAvailable choices: " : "\nNo unedited modules were found.");
			subtarget.addTask(echoer);
			for (i=0;module_code=project.getProperty("editable_modules.module"+i+".code");i++) {
				echoer = project.createTask("echo");
				echoer.setMessage(module_code+" - "+project.getProperty("editable_modules.module"+i+".name"));
				subtarget.addTask(echoer);
			}
			subtarget.execute();
		]]>
	</script>
	<input message="Module code: " addproperty="edit_module.code"/>
	<fail unless="edit_module.code" message="You must provide module code to proceed"/>
	
</target>

<target name="update" description="Start base version update of current change." depends="init">
	<fail unless="devweb.integration.dir" message="Integration directory cannot be determined, please check your devweb-personal.properties"/>
	<property file="change.properties"/>
	<fail unless="change.id" message="Cannot determine current change ID"/>
	<property file="${devweb.tmpdir}/update.properties" prefix="check_update"/>
	<get src="${devweb.url}&amp;event=Start_base_update&amp;change_id=${change.id}" dest="${devweb.tmpdir}/start_update.properties"/>
	<property file="${devweb.tmpdir}/start_update.properties" prefix="start_update"/>
	<delete file="${devweb.tmpdir}/start_update.properties"/>
	<echo message="${start_update.devweb.notice}"/>
	<echo message="${start_update.devweb.warning}"/>
	<fail if="start_update.devweb.error" message="${start_update.devweb.error}"/>
	<fail if="start_update.unnecessary.message" message="${start_update.unnecessary.message}"/>
	<fail unless="start_update.update.tag" message="Server did not specify update tag"/>
	<property name="update.dir" location="${devweb.integration.dir}/${start_update.update.tag}"/>
	<mkdir dir="${devweb.integration.dir}"/>
	<mkdir dir="${update.dir}"/>
	<condition property="update.properties.correct">
		<and>
			<isset property="check_update.update.tag"/>
			<isset property="start_update.update.tag"/>
			<equals arg1="${check_update.update.tag}" arg2="${start_update.update.tag}"/>
		</and>
	</condition>
	<antcall target="update_remove_old_properties"/>
	<propertyfileedit file="${devweb.tmpdir}/update.properties">
		<entry key="update.tag" value="${start_update.update.tag}"/>
	</propertyfileedit>
	<property file="${devweb.tmpdir}/update.properties" prefix="update"/>
	<antcall target="update_commit_current"/>
	<antcall target="update_mark_checkpoints"/>
	<antcall target="update_create_branch"/>
	<antcall target="update_process"/>
	<antcall target="update_encorporate"/>
	<get src="${devweb.url}&amp;event=End_base_update&amp;change_id=${change.id}" dest="${devweb.tmpdir}/end_update.properties"/>
	<property file="${devweb.tmpdir}/end_update.properties" prefix="end_update"/>
	<delete file="${devweb.tmpdir}/end_update.properties"/>
	<echo message="${end_update.devweb.notice}"/>
	<echo message="${end_update.devweb.warning}"/>
	<fail if="end_update.devweb.error" message="${end_update.devweb.error}"/>
	<delete file="${devweb.tmpdir}/update.properties"/>
	<delete dir="${update.dir}" failonerror="false"/>
	<antcall target="update_download"/>
	<antcall target="process_environment_adjustments">
		<param name="process_environment_adjustments.prefix" value="end_update"/>
	</antcall>
</target>

<target name="update_mark_checkpoints">
	<script language="javascript">
		<![CDATA[
			if (project.getProperty("start_update.checkpoint.base.tag")) {
				runner = project.createTask("antcall");
				runner.setTarget("mark_checkpoint");
				prop = runner.createParam();
				prop.setName("checkpoint.tag");
				prop.setValue(project.getProperty("start_update.checkpoint.tag"));
				prop = runner.createParam();
				prop.setName("checkpoint.base.tag");
				prop.setValue(project.getProperty("start_update.checkpoint.base.tag"));
				prop = runner.createParam();
				prop.setName("checkpoint.repository");
				prop.setValue(project.getProperty("start_update.repository"));
				for (j=0;server_path=project.getProperty("start_update.change.module"+j+".server_path");j++) {
					prop = runner.createParam();
					prop.setName("checkpoint.module"+j+".server_path");
					prop.setValue(server_path);
				}
				update_mark_checkpoints_sub1.addTask(runner);
			}
			if (project.getProperty("start_update.newbase.checkpoint.base.tag")) {
				runner = project.createTask("antcall");
				runner.setTarget("mark_checkpoint");
				prop = runner.createParam();
				prop.setName("checkpoint.tag");
				prop.setValue(project.getProperty("start_update.newbase.tag"));
				prop = runner.createParam();
				prop.setName("checkpoint.base.tag");
				prop.setValue(project.getProperty("start_update.newbase.checkpoint.base.tag"));
				prop = runner.createParam();
				prop.setName("checkpoint.repository");
				prop.setValue(project.getProperty("start_update.repository"));
				for (j = 0; server_path = project.getProperty("start_update.newbase.module"+j+".server_path"); j++) {
					prop = runner.createParam();
					prop.setName("checkpoint.module"+j+".server_path");
					prop.setValue(server_path);
				}
				update_mark_checkpoints_sub1.addTask(runner);
			}
			update_mark_checkpoints_sub1.execute();
		]]>
	</script>
</target>

<target name="update_mark_checkpoints_sub1">
	<!-- for internal use -->
	<!-- calls marking of required checkpoints -->
</target>

<target name="update_remove_old_properties" unless="update.properties.correct">
	<!-- for internal use -->
	<delete file="${devweb.tmpdir}/update.properties"/>
</target>

<target name="update_commit_current" unless="update.commited" depends="test_checkout">
	<!-- for internal use -->
	<antcall target="commit_dir">
		<param name="commit_dir.dir" value=".."/>
		<param name="commit_dir.repository" value="${start_update.repository}"/>
		<param name="commit_dir.message" value="${devweb.commit.message.prefix}Change ${change.id} before ${start_update.update.tag}"/>
		<param name="commit_dir.modules.prefix0" value="start_update.module"/>	
	</antcall>
	<propertyfileedit file="${devweb.tmpdir}/update.properties">
		<entry key="commited" value="true"/>
	</propertyfileedit>
</target>

<target name="update_create_branch" unless="update.branched">
	<!-- for internal use -->
	<script language="javascript">
		<![CDATA[
			server_paths = new Array(project.getProperty("start_update.repository"));
			for (i=0;server_path=project.getProperty("start_update.module"+i+".server_path");i++) {
				server_paths[server_paths.length] = server_path;
			}
			for (i=0;i<server_paths.length;i++) {
				server_path = server_paths[i];
				tagger = project.createTask("cvs");
				tagger.setFailOnError(true);
				tagger.setCvsRoot(project.getProperty("devweb.project.cvsroot"));
				tagger.setCommand("rtag");
				tagger.addCommandArgument("-r");
				tagger.addCommandArgument(project.getProperty("start_update.checkpoint.tag"));
				tagger.addCommandArgument("-b");
				tagger.addCommandArgument(project.getProperty("start_update.update.tag"));
				tagger.addCommandArgument(server_path);
				update_create_branch_sub1.addTask(tagger);
			}
			update_create_branch_sub1.execute();
		]]>
	</script>
	<propertyfileedit file="${devweb.tmpdir}/update.properties">
		<entry key="branched" value="true"/>
	</propertyfileedit>
</target>

<target name="update_create_branch_sub1">
	<!-- for internal use -->
	<!-- executes the cvs command to tag update branch -->
</target>

<target name="update_process" unless="update.processed">
	<!-- for internal use -->
	<echo message="Performing update in directory ${update.dir}" level="info"/>
	<antcall target="update_process_checkout"/>
	<antcall target="update_copy_devweb-personal_properties"/>
	<antcall target="update_change_properties_backup"/>
	<antcall target="update_merge"/>
	<antcall target="update_commit_new"/>
	<antcall target="update_change_properties_restore"/>
	<antcall target="update_maven_version">
		<param name="update_maven_version.dir" value="${update.dir}/${start_update.repository}" />
		<param name="update_maven_version.commit" value="commit" />
		<param name="update_maven_version.message" value="${start_update.update.tag}" />
	</antcall>	
	<propertyfileedit file="${devweb.tmpdir}/update.properties">
		<entry key="processed" value="true"/>
	</propertyfileedit>
</target>

<!-- for internal use -->
<target name="update_copy_devweb-personal_properties" unless="update.process.devweb-personal_properties_copied">
	<copy file="devweb-personal.properties" toFile="${update.dir}/devweb-personal.properties" />
	<propertyfileedit file="${devweb.tmpdir}/update.properties">
		<entry key="process.process.devweb-personal_properties_copied" value="true"/>
	</propertyfileedit>
</target>

<target name="update_process_checkout" unless="update.process.checked-out">
	<antcall target="checkout_dir">
		<param name="checkout_dir.dir" value="${update.dir}"/>
		<param name="checkout_dir.repository" value="${start_update.repository}"/>
		<param name="checkout_dir.tag" value="${start_update.update.tag}"/>
		<param name="checkout_dir.modules.prefix0" value="start_update.module"/>
	</antcall>
	<propertyfileedit file="${devweb.tmpdir}/update.properties">
		<entry key="process.checked-out" value="true"/>
	</propertyfileedit>
</target>

<target name="update_process_checkout_sub1">
	<!-- for internal use -->
	<!-- executes the cvs command for switching to update branch -->
</target>

<target name="update_change_properties_backup" unless="update.change_properties.backed-up">
	<copy file="${update.dir}/${start_update.repository}/change.properties" tofile="${update.dir}/change.update-backup.devweb.properties" failonerror="true"/>
	<propertyfileedit file="${devweb.tmpdir}/update.properties">
		<entry key="change_properties.backed-up" value="true"/>
	</propertyfileedit>
</target>

<target name="update_merge" unless="update.merged">
	<!-- for internal use -->
	<propertyfileedit file="${devweb.tmpdir}/update.properties">
		<entry key="merge.started" value="true"/>
	</propertyfileedit>
	<antcall target="update_merge_ask"/>
	<condition property="update.merge.do">
		<or>
			<and>
				<istrue value="${update.merge.started}"/>
				<isfalse value="${update.merged}"/>
				<istrue value="${update.remerge.answer}"/>
			</and>
			<isfalse value="${update.merge.started}"/>
		</or>
	</condition>
	<antcall target="update_merge_do"/>
	<propertyfileedit file="${devweb.tmpdir}/update.properties">
		<entry key="merged" value="true"/>
	</propertyfileedit>
</target>

<target name="update_merge_do" if="update.merge.do">
	<!-- for internal use -->
	<script language="javascript">
		<![CDATA[
			for (i=0; project.getProperty("start_update.module"+i+".oldbase.tag"); i++){
				project.setProperty("start_update.module"+i+".start.tag", project.getProperty("start_update.module"+i+".oldbase.tag"));
				project.setProperty("start_update.module"+i+".end.tag", project.getProperty("start_update.module"+i+".newbase.tag"));
			}
		]]>
	</script>
	<antcall target="merge_dir">
		<param name="merge_dir.dir" value="${update.dir}"/>
		<param name="merge_dir.repository" value="${start_update.repository}"/>
		<param name="merge_dir.start.tag" value="${start_update.oldbase.tag}"/>
		<param name="merge_dir.end.tag" value="${start_update.newbase.tag}"/>
		<param name="merge_dir.modules.prefix0" value="start_update.module"/>
	</antcall>
</target>

<target name="update_merge_ask" if="update.merge.started" unless="update.merged">
	<!-- for internal use -->
	<input message="Rerun CVS merge (all previous successful merges will generate a conflict)? [yes,no]" validargs="yes,no" addproperty="update.remerge.answer"/>
	<fail unless="update.remerge.answer" message="You have to answer the question."/>
</target>

<target name="update_change_properties_restore" unless="update.change_properties.restored">
	<!-- for internal use -->
	<copy file="${update.dir}/change.update-backup.devweb.properties" tofile="${update.dir}/${start_update.repository}/change.properties" failonerror="true"/>
	<cvs cvsRoot="${devweb.project.cvsroot}" command="add change.properties" dest="${update.dir}/${start_update.repository}" failonerror="false"/>
	<cvs cvsRoot="${devweb.project.cvsroot}" dest="${update.dir}/${start_update.repository}" failonerror="true">
		<commandline>
			<argument value="commit"/>
			<argument value="-m"/>
			<argument value="${devweb.commit.message.prefix}Restored after merge"/>
			<argument value="change.properties"/>
		</commandline>
	</cvs>
	<propertyfileedit file="${devweb.tmpdir}/update.properties">
		<entry key="change_properties.restored" value="true"/>
	</propertyfileedit>
</target>

<target name="update_commit_new" unless="update.new.commited">
	<!-- for internal use -->
	<echo message="Commiting updated change in directory ${update.dir}" level="info"/>
	<antcall target="commit_dir">
		<param name="commit_dir.dir" value="${update.dir}"/>
		<param name="commit_dir.repository" value="${start_update.repository}"/>
		<param name="commit_dir.message" value="${devweb.commit.message.prefix}Update ${start_update.update.tag} after merge"/>
		<param name="commit_dir.modules.prefix0" value="start_update.module"/>
	</antcall>
	<propertyfileedit file="${devweb.tmpdir}/update.properties">
		<entry key="new.commited" value="true"/>
	</propertyfileedit>
</target>

<target name="update_encorporate" unless="update.encorporated">
	<!-- for internal use -->
	<antcall target="checkout_dir">
		<param name="checkout_dir.dir" value="${update.dir}"/>
		<param name="checkout_dir.repository" value="${start_update.repository}"/>
		<param name="checkout_dir.tag" value="change_${change.id}"/>
		<param name="checkout_dir.modules.prefix0" value="start_update.module"/>
	</antcall>
	<antcall target="update_encorporate_merge"/>
	<antcall target="update_checkout_old_modules"/>
	<antcall target="update_remove_old_modules"/>
	<antcall target="update_commit_old_modules"/>
	<antcall target="update_encorporate_commit"/>
	<propertyfileedit file="${devweb.tmpdir}/update.properties">
		<entry key="encorporated" value="true"/>
	</propertyfileedit>
</target>


<target name="update_checkout_old_modules" unless="update.old_modules.checked_out">
	<antcall target="checkout_dir">
		<param name="checkout_dir.modules.dir" value="."/>
		<param name="checkout_dir.tag" value="change_${change.id}"/>
		<param name="checkout_dir.modules.prefix0" value="start_update.oldmodule"/>
	</antcall>
	<propertyfileedit file="${devweb.tmpdir}/update.properties">
		<entry key="old_modules.checked_out" value="true"/>
	</propertyfileedit>
</target>

<target name="update_remove_old_modules" unless="update.old_modules.removed">
	<!-- for internal use -->
	<script language="javascript">
		<![CDATA[
			work_paths = new Array();
			for (i=0;work_path=project.getProperty("start_update.oldmodule"+i+".work_path");i++) {
				work_paths[work_paths.length] = work_path;
			}
			for (i=0;i<work_paths.length;i++) {
				work_path = work_paths[i];
				remover = project.createTask("cvs");
				work_path_file=(new java.io.File(work_path));
				remover.setDest(work_path_file.getParent());
				remover.setFailOnError(true);
				remover.setCvsRoot(project.getProperty("devweb.project.cvsroot"));
				remover.setCommand("remove");
				remover.addCommandArgument("-R");
				remover.addCommandArgument("-f");
				remover.addCommandArgument(work_path_file.getName());
				update_remove_old_modules_sub1.addTask(remover);
			}
			update_remove_old_modules_sub1.execute();
		]]>
	</script>
	
	<propertyfileedit file="${devweb.tmpdir}/update.properties">
		<entry key="old_modules.removed" value="true"/>
	</propertyfileedit>
</target>

<target name="update_remove_old_modules_sub1" unless="update.old_modules.removed">
	<!-- for internal use -->
	<!-- executes cvs command that removes files from old external modules -->
</target>


<target name="update_commit_old_modules" unless="update.old_modules.commited">
	<!-- for internal use -->
	<antcall target="commit_dir">
		<param name="commit_dir.modules.dir" value="."/>
		<param name="commit_dir.message" value="${devweb.commit.message.prefix}Update ${start_update.update.tag} after merge"/>
		<param name="commit_dir.modules.prefix0" value="start_update.oldmodule"/>
	</antcall>
	<propertyfileedit file="${devweb.tmpdir}/update.properties">
		<entry key="old_modules.commited" value="true"/>
	</propertyfileedit>
</target>

<target name="update_encorporate_merge" unless="update.encorporate.merged">
	<!-- for internal use -->
	<propertyfileedit file="${devweb.tmpdir}/update.properties">
		<entry key="encorporate.merge.started" value="true"/>
	</propertyfileedit>
	<antcall target="update_encorporate_merge_ask"/>
	<condition property="update.encorporate.merge.do">
		<or>
			<and>
				<istrue value="${update.encorporate.merge.started}"/>
				<isfalse value="${update.encorporate.merged}"/>
				<istrue value="${update.encorporate.remerge.answer}"/>
			</and>
			<isfalse value="${update.encorporate.merge.started}"/>
		</or>
	</condition>
	<antcall target="update_encorporate_merge_do"/>
</target>

<target name="update_encorporate_merge_do" if="update.encorporate.merge.do">
	<!-- for internal use -->
	<antcall target="merge_dir">
		<param name="merge_dir.dir" value="${update.dir}"/>
		<param name="merge_dir.repository" value="${start_update.repository}"/>
		<param name="merge_dir.start.tag" value="${start_update.checkpoint.tag}"/>
		<param name="merge_dir.end.tag" value="${start_update.update.tag}"/>
		<param name="merge_dir.modules.prefix0" value="start_update.module"/>
	</antcall>
	<propertyfileedit file="${devweb.tmpdir}/update.properties">
		<entry key="encorporate.merged" value="true"/>
	</propertyfileedit>
</target>

<target name="update_encorporate_merge_ask" if="update.encorporate.merge.started" unless="update.encorporate.merged">
	<!-- for internal use -->
	<input message="Rerun CVS merge (all previous successful merges will generate a conflict)? [yes,no]" validargs="yes,no" addproperty="update.encorporate.remerge.answer"/>
	<fail unless="update.encorporate.remerge.answer" message="You have to answer the question."/>
</target>

<target name="update_encorporate_commit" unless="update.encorporate.commited">
<!-- for internal use -->
	<antcall target="commit_dir">
		<param name="commit_dir.dir" value="${update.dir}"/>
		<param name="commit_dir.repository" value="${start_update.repository}"/>
		<param name="commit_dir.message" value="${devweb.commit.message.prefix}Update ${start_update.update.tag} merged with current version of change ${change.id}"/>
		<param name="commit_dir.modules.prefix0" value="start_update.module"/>
	</antcall>
	<propertyfileedit file="${devweb.tmpdir}/update.properties">
		<entry key="encorporate.commited" value="true"/>
	</propertyfileedit>
</target>

<target name="update_download">
<!-- for internal use -->
	<antcall target="checkout_dir">
		<param name="checkout_dir.dir" value=".."/>
		<param name="checkout_dir.repository" value="${start_update.repository}"/>
		<param name="checkout_dir.tag" value="change_${change.id}"/>
		<param name="checkout_dir.modules.prefix0" value="start_update.module"/>
	</antcall>
</target>

<target name="update_continue" description="Continue base version update where it left off." depends="init">
	<antcall target="update"/>
</target>

<target name="update_cancel" description="Cancel base version update of current change." depends="init">
	<property file="change.properties"/>
	<fail unless="change.id" message="Cannot determine current change ID"/>
	<get src="${devweb.url}&amp;event=Cancel_base_update&amp;change_id=${change.id}" dest="${devweb.tmpdir}/cancel_update.properties"/>
	<property file="${devweb.tmpdir}/cancel_update.properties" prefix="cancel_update"/>
	<delete file="${devweb.tmpdir}/cancel_update.properties"/>
	<echo message="${cancel_update.devweb.notice}"/>
	<echo message="${cancel_update.devweb.warning}"/>
	<fail if="cancel_update.devweb.error" message="${cancel_update.devweb.error}"/>
	<delete dir="${devweb.integration.dir}/${cancel_update.update.tag}"/>
	<delete file="${devweb.tmpdir}/update.properties"/>
</target>

<!-- End of base update targets-->

<target name="add_checkpoint" description="Adds a checkpoint to commited state of current change." depends="init">
	<property file="change.properties"/>
	<fail unless="change.id" message="Change ID cannot be determined, please check change.properties"/>
	<get src="${devweb.url}&amp;event=Create_checkpoint&amp;change_id=${change.id}" dest="${devweb.tmpdir}/add_checkpoint.properties"/>
	<property file="${devweb.tmpdir}/add_checkpoint.properties" prefix="add_checkpoint"/>
	<delete file="${devweb.tmpdir}/add_checkpoint.properties"/>
	<echo message="${add_checkpoint.devweb.notice}"/>
	<echo message="${add_checkpoint.devweb.warning}"/>
	<fail if="add_checkpoint.devweb.error" message="${add_checkpoint.devweb.error}"/>
	<antcall target="test_checkout"/>
	<script language="javascript">
		<![CDATA[
			runner = project.createTask("antcall");
			runner.setTarget("mark_checkpoint");
			prop = runner.createParam();
			prop.setName("checkpoint.tag");
			prop.setValue(project.getProperty("add_checkpoint.checkpoint.tag"));
			prop = runner.createParam();
			prop.setName("checkpoint.base.tag");
			prop.setValue(project.getProperty("add_checkpoint.checkpoint.base.tag"));
			prop = runner.createParam();
			prop.setName("checkpoint.repository");
			prop.setValue(project.getProperty("add_checkpoint.repository"));
			for (i=0; server_path=project.getProperty("add_checkpoint.module"+i+".server_path"); i++) {
				prop = runner.createParam();
				prop.setName("checkpoint.module"+i+".server_path");
				prop.setValue(server_path);
			}
			add_checkpoint_sub1.addTask(runner);
			add_checkpoint_sub1.execute();
		]]>
	</script>
</target>

<target name="add_checkpoint_sub1">
	<!-- for internal use -->
	<!-- calls marking the newly added checkpoint -->
</target>

<target name="mark_checkpoint">
	<!-- for internal use -->
	<fail unless="checkpoint.base.tag" message="Cannot determine checkpoint base branch"/>
	<fail unless="checkpoint.tag" message="Checkpoint tag not specified"/>
	<fail unless="checkpoint.repository" message="Project repository not specified"/>
	<script language="javascript">
		<![CDATA[
			// reset target since there might be several checkpoints marked in one session
			subtarget = project.getClass().getClassLoader().loadClass("org.apache.tools.ant.Target").newInstance();
			subtarget.setName("mark_checkpoint_sub1");
			project.addOrReplaceTarget(subtarget);
			server_paths = new Array(project.getProperty("checkpoint.repository"));
			for (i=0;server_path=project.getProperty("checkpoint.module"+i+".server_path");i++) {
				server_paths[server_paths.length] = server_path;
			}
			server_paths_count = server_paths.length;
			for (i=0;i<server_paths_count;i++) {
				server_path = server_paths[i];
				tagger = project.createTask("cvs");
				tagger.setCvsRoot(project.getProperty("devweb.project.cvsroot"));
				tagger.setCommand("rtag");
				tagger.addCommandArgument("-r");
				tagger.addCommandArgument(project.getProperty("checkpoint.base.tag"));
				tagger.addCommandArgument(project.getProperty("checkpoint.tag"));
				tagger.addCommandArgument(server_path);
				tagger.setFailOnError(true);
				subtarget.addTask(tagger);
			}
			subtarget.execute();
		]]>
	</script>
	<get src="${devweb.url}&amp;event=Mark_checkpoint&amp;tag=${checkpoint.tag}" dest="${devweb.tmpdir}/mark_checkpoint.properties"/>
	<property file="${devweb.tmpdir}/mark_checkpoint.properties" prefix="mark_checkpoint"/>
	<delete file="${devweb.tmpdir}/mark_checkpoint.properties"/>
	<echo message="${mark_checkpoint.devweb.notice}"/>
	<echo message="${mark_checkpoint.devweb.warning}"/>
	<fail if="mark_checkpoint.devweb.error" message="${mark_checkpoint.devweb.error}"/>
</target>

<target name="mark_checkpoint_sub1">
	<!-- for internal use -->
	<!-- this target is dynamically replaced with a new instance -->
</target>

<target name="refresh" description="Refresh working directory files from CVS, retaining uncommited changes." depends="init,test_checkout"> <!-- performs regular "cvs update" on project repository and external modules -->
	<property file="change.properties"/>
	<fail unless="change.id" message="Change ID cannot be determined, please check change.properties"/>
	<get src="${devweb.url}&amp;event=Check_refresh&amp;change_id=${change.id}" dest="${devweb.tmpdir}/check_refresh.properties"/>
	<property file="${devweb.tmpdir}/check_refresh.properties" prefix="check_refresh"/>
	<delete file="${devweb.tmpdir}/check_refresh.properties"/>
	<echo message="${check_refresh.devweb.notice}"/>
	<echo message="${check_refresh.devweb.warning}"/>
	<fail if="check_refresh.devweb.error" message="${check_refresh.devweb.error}"/>
	<fail unless="check_refresh.refreshable" message="Checking refresh permissions failed"/>
	<antcall target="checkout_dir">
		<param name="checkout_dir.dir" value=".."/>
		<param name="checkout_dir.repository" value="${check_refresh.repository}"/>
		<param name="checkout_dir.tag" value="${check_refresh.tag}"/>
		<param name="checkout_dir.modules.prefix0" value="check_refresh.module"/>
	</antcall>
	<antcall target="process_environment_adjustments">
		<param name="process_environment_adjustments.prefix" value="check_refresh"/>
	</antcall>
</target>

<target name="refresh_all" description="Refresh working directory files (including non-editable modules) from CVS, retaining uncommited changes." depends="init">
	<property file="change.properties"/>
	<fail unless="change.id" message="Change ID cannot be determined, please check change.properties"/>
	<antcall target="checkout_change">
		<param name="checkout_change.change_id" value="${change.id}"/>
	</antcall>
</target>

<target name="commit" description="Commit files to CVS." depends="init,test_checkout">
	<property file="change.properties"/>
	<property name="commit.message_file" location="${devweb.tmpdir}/commit.message"/>
	<fail unless="change.id" message="Change ID cannot be determined, please check change.properties"/>
	<get src="${devweb.url}&amp;event=Check_commit&amp;change_id=${change.id}" dest="${devweb.tmpdir}/check_commit.properties"/>
	<property file="${devweb.tmpdir}/check_commit.properties" prefix="check_commit"/>
	<delete file="${devweb.tmpdir}/check_commit.properties"/>
	<echo message="${check_commit.devweb.notice}"/>
	<echo message="${check_commit.devweb.warning}"/>
	<fail if="check_commit.devweb.error" message="${check_commit.devweb.error}"/>
	<fail unless="check_commit.commitable" message="Checking commit permissions failed"/>
	<echo message="${devweb.commit.message.prefix}Change ${change.id}" file="${commit.message_file}"/>
	<taskdef name="antcallnofail" classname="com.changelogic.ant.taskdefs.AntCallNoFail"/>
	<antcallnofail target="commit_dir" failProperty="commit_dir.failed">
		<param name="commit_dir.dir" value=".."/>
		<param name="commit_dir.repository" value="${check_commit.repository}"/>
		<param name="commit_dir.message_file" value="${commit.message_file}"/>
		<param name="commit_dir.modules.prefix0" value="check_commit.module"/>
	</antcallnofail>
	<delete file="${commit.message_file}"/>
	<fail if="commit_dir.failed" message="${commit_dir.failed}"/>
</target>

<target name="commit_dir">
	<!-- for internal use -->
	<!-- commits repository and given modules checked out in given directory -->
	<script language="javascript">
		<![CDATA[
			work_paths = new Array();
			repository = project.getProperty("commit_dir.repository");
			if (repository!=null) {
				work_paths[0] = "../"+repository;
			}
			for (prefix_index=0; module_prefix = project.getProperty("commit_dir.modules.prefix"+prefix_index); prefix_index++) {
				for (i=0;work_path=project.getProperty(module_prefix+i+".work_path");i++) {
					work_paths[work_paths.length] = work_path;
				}
			}
			var commit_dir = null;
			var commit_base_dir = null;
			if (repository!=null) {
				commit_dir = new java.io.File(project.getProperty("commit_dir.dir"));
				commit_base_dir = new java.io.File(commit_dir,project.getProperty("commit_dir.repository"));
			} else {
				commit_base_dir = new java.io.File(project.getProperty("commit_dir.modules.dir"));
				commit_dir = commit_base_dir.getCanonicalFile().getParentFile();
			}
			var work_paths_by_dir = new Object(); // must use Object for associative array
			for (i=0; i < work_paths.length; i++) {
				work_path_file = new java.io.File(commit_base_dir,work_paths[i]);
				if (work_path_file.exists()) {
					work_path_dir = work_path_file.getCanonicalFile().getParent();
					if (!work_paths_by_dir[work_path_dir]) {
						work_paths_by_dir[work_path_dir] = new Array();
					}
					work_paths_by_dir[work_path_dir][work_paths_by_dir[work_path_dir].length] = work_path_file.getName();
				}
			}

			var announcer = project.createTask("echo");
			var commit_command = "-q commit";
			if (java.lang.Boolean.valueOf(project.getProperty("commit_dir.fake")).booleanValue()) {
				commit_command = "-n "+commit_command;
				announcer.setMessage("Checking commitability in directory: "+commit_dir.getCanonicalPath());
			} else {
				announcer.setMessage("Commiting in directory: "+commit_dir.getCanonicalPath());
			}
			commit_dir_sub1.addTask(announcer);
			var work_path_count = 0;
			for (var work_path_dir in work_paths_by_dir) {
				commiter = project.createTask("cvs");
				commiter.setCvsRoot(project.getProperty("devweb.project.cvsroot"));
				commiter.setCommand(commit_command);
				if (messageFile = project.getProperty("commit_dir.message_file")) {
					commiter.addCommandArgument("-F");
					commiter.addCommandArgument(messageFile);
				} else if (message = project.getProperty("commit_dir.message")) {
					commiter.addCommandArgument("-m");
					commiter.addCommandArgument(message);
				}

				for (i=0;i<work_paths_by_dir[work_path_dir].length;i++) {
					work_path_name=work_paths_by_dir[work_path_dir][i];
					commiter.addCommandArgument(work_path_name);
				}
				commiter.setDest(new java.io.File(work_path_dir));
				commiter.setFailOnError(true);
				commit_dir_sub1.addTask(commiter);
				work_path_count++;
			}
			if (work_path_count == 0) {
				announcer = project.createTask("echo");
				announcer.setMessage("Nothing to commit");
				commit_dir_sub1.addTask(announcer);
			}

			commit_dir_sub1.execute();
		]]>
	</script>
</target>

<target name="commit_dir_sub1">
	<!-- for internal use -->
	<!-- executes the cvs commit command -->
</target>

<target name="checkout_dir">
	<!-- for internal use -->
	<!-- checks out a repository and modules into given location with given tag -->
	<taskdef name="rmentry" classname="com.changelogic.ant.taskdefs.CvsEntryRemove"/>
	<script language="javascript">
		<![CDATA[
			repository = project.getProperty("checkout_dir.repository");
			repository_tag = project.getProperty("checkout_dir.tag");
			repository_dest_dir = project.getProperty("checkout_dir.dir");
			modules_dest_dir = project.getProperty("checkout_dir.modules.dir"); // this must be specified if repository is not specified
			pruning_disabled = project.getProperty("checkout_dir.pruning_disabled");

			var subtarget = project.getClass().getClassLoader().loadClass("org.apache.tools.ant.Target").newInstance();
			subtarget.setName("checkout_dir_perform_checkouts");
			project.addOrReplaceTarget(subtarget);

			server_paths = new Array();
			work_paths = new Array();
			tags = new Array();

			if (repository) {
				server_paths[0] = repository;
				work_paths[0] = repository;
				tags[0] = repository_tag;
			}

			for (prefix_index=0; modules_prefix=project.getProperty("checkout_dir.modules.prefix"+prefix_index); prefix_index++) {
				for (i=0; server_path=project.getProperty(modules_prefix+i+".server_path"); i++) {
					server_paths[server_paths.length] = server_path;
					work_paths[work_paths.length] = project.getProperty(modules_prefix+i+".work_path");
					module_tag=project.getProperty(modules_prefix+i+".tag");
					tags[tags.length] = module_tag? module_tag : repository_tag;
				}
			}
			repository_dest_dir_file = repository_dest_dir? new java.io.File(repository_dest_dir) : null;
			modules_dest_dir_file = modules_dest_dir? new java.io.File(modules_dest_dir) : new java.io.File(repository_dest_dir_file,repository);
			for (i=0; i<server_paths.length; i++) {
				if (!repository || i>0) {
					dest_dir_file = modules_dest_dir_file;
				} else {
					dest_dir_file = repository_dest_dir_file;
				}

				work_path_file = (new java.io.File(dest_dir_file,work_paths[i])).getCanonicalFile();
				
				announcer = project.createTask("echo");
				announcer.setMessage("Checking out "+work_path_file.getName()+" to "+work_path_file.getParent());
				subtarget.addTask(announcer);

				checkouter = project.createTask("cvs");
				checkouter.setCvsRoot(project.getProperty("devweb.project.cvsroot"));
				checkouter.setDest(work_path_file.getParentFile());
				checkouter.setCommand("-f -q checkout");
				if (!pruning_disabled) {
					checkouter.addCommandArgument("-P");
				}
				if (tags[i] != '') {
					checkouter.addCommandArgument("-r");
					checkouter.addCommandArgument(tags[i]);
				} else {
					checkouter.addCommandArgument("-A");
				}
				if (!repository || (i > 0)) { // specify work directory only for modules
					checkouter.addCommandArgument("-d");
					checkouter.addCommandArgument(work_path_file.getName());
				}
				checkouter.addCommandArgument(server_paths[i]);
				checkouter.setFailOnError(true);
				subtarget.addTask(checkouter);

				entry_remover = project.createTask("rmentry");
				entry_remover.setFile(new java.io.File(dest_dir_file,work_paths[i]));
				subtarget.addTask(entry_remover);
			}
			subtarget.execute();
		]]>
	</script>
</target>

<target name="merge_dir">
	<taskdef name="antcallnofail" classname="com.changelogic.ant.taskdefs.AntCallNoFail"/>
	<script language="javascript">
		<![CDATA[
			merge_dir_file = new java.io.File(project.getProperty("merge_dir.dir"));
			merge_repository_dir_file = new java.io.File(merge_dir_file,project.getProperty("merge_dir.repository"));
			work_paths = new Array(".");
			start_tags = new Array(project.getProperty("merge_dir.start.tag"));
			end_tags = new Array(project.getProperty("merge_dir.end.tag"));
			for (prefix_index=0; modules_prefix=project.getProperty("merge_dir.modules.prefix"+prefix_index); prefix_index++) {
				for (i=0; work_path=project.getProperty(modules_prefix+i+".work_path"); i++) {
					work_paths[work_paths.length] = project.getProperty(modules_prefix+i+".work_path");
					start_tags[start_tags.length] =
						project.getProperty(modules_prefix+i+".start.tag")?
							project.getProperty(modules_prefix+i+".start.tag")
							: project.getProperty("merge_dir.start.tag");
					end_tags[end_tags.length] =
						project.getProperty(modules_prefix+i+".end.tag")?
							project.getProperty(modules_prefix+i+".end.tag")
							: project.getProperty("merge_dir.end.tag");
				}
			}

			runner_target = project.getClass().getClassLoader().loadClass("org.apache.tools.ant.Target").newInstance();
			runner_target.setName("merge_dir_run_merges");
			project.addOrReplaceTarget(runner_target);

			for (i=0;i<work_paths.length;i++) {
				work_path = work_paths[i];
				work_path_file = (new java.io.File(merge_repository_dir_file,work_path)).getCanonicalFile();

				runner = project.createTask("antcallnofail");
				runner.setFailProperty("merge_dir.merge.failed");
				runner.setTarget("merge_dir_perform_merge");

				runnerParam = runner.createParam();
				runnerParam.setName("merge_dir_perform_merge.dest");
				runnerParam.setValue(work_path_file.getParent());

				runnerParam = runner.createParam();
				runnerParam.setName("merge_dir_perform_merge.dir.name");
				runnerParam.setValue(work_path_file.getName());

				runnerParam = runner.createParam();
				runnerParam.setName("merge_dir_perform_merge.start.tag");
				runnerParam.setValue(start_tags[i]);

				runnerParam = runner.createParam();
				runnerParam.setName("merge_dir_perform_merge.end.tag");
				runnerParam.setValue(end_tags[i]);

				runner_target.addTask(runner);
			}

			failer = project.createTask("fail");
			failer.setIf("merge_dir.merge.failed");
			failer.setMessage("Merging failed, please check for possible conflicts");
			runner_target.addTask(failer);

			runner_target.execute();
		]]>
	</script>
</target>

<target name="merge_dir_perform_merge">
	<!-- for internal use -->
	<!-- performs merge of one module or repository -->
	<echo message="Merging differences between ${merge_dir_perform_merge.start.tag} and ${merge_dir_perform_merge.end.tag} into ${merge_dir_perform_merge.dest}${file.separator}${merge_dir_perform_merge.dir.name}"/>
	<cvs cvsroot="${devweb.project.cvsroot}" dest="${merge_dir_perform_merge.dest}" quiet="true" failonerror="true">
		<commandline>
			<argument value="update"/>
			<argument value="-d"/>
			<argument value="-P"/>
			<argument value="-j"/>
			<argument value="${merge_dir_perform_merge.start.tag}"/>
			<argument value="-j"/>
			<argument value="${merge_dir_perform_merge.end.tag}"/>
			<argument value="${merge_dir_perform_merge.dir.name}"/>
		</commandline>
	</cvs>
</target>

<target name="commit_change" description="Finish development of a change, hand it over for reviewing." depends="init">
	<property file="change.properties"/>
	<script language="javascript">
		<![CDATA[
			if (path=project.getProperty("devweb.test.report.file")) {
				file = new java.io.File(path);
				if (file.exists() && file.isFile() && file.canRead() && file.length()>0) {
					project.setUserProperty("devweb.test.report.exists","true");
				}
			}
		]]>
	</script>
	<antcall target="commit"/>
	<antcall target="upload_diff">
		<param name="change.commited" value="true"/> <!-- avoid running "commit" again -->
	</antcall>
	<antcall target="upload_test_report"/>
	<get src="${devweb.url}&amp;event=End_development&amp;change_id=${change.id}" dest="${devweb.tmpdir}/commit_change.properties"/>
	<property file="${devweb.tmpdir}/commit_change.properties" prefix="commit_change"/>
	<delete file="${devweb.tmpdir}/commit_change.properties"/>
	<echo message="${commit_change.devweb.notice}"/>
	<echo message="${commit_change.devweb.warning}"/>
	<fail if="commit_change.devweb.error" message="${commit_change.devweb.error}"/>
</target>

<target name="upload_diff" description="Upload diff without ending change to review the changes." depends="init">
	<property file="change.properties"/>

	<!-- Make sure CVS/Entries for module checkouts are cleaned up -->
	<get src="${devweb.url}&amp;event=Get_modules&amp;change_id=${change.id}" dest="${devweb.tmpdir}/modules.properties"/>
	<property file="${devweb.tmpdir}/modules.properties" prefix="modules"/>
	<delete file="${devweb.tmpdir}/modules.properties"/>
	<echo message="${modules.devweb.notice}"/>
	<echo message="${modules.devweb.warning}"/>
	<fail if="modules.devweb.error" message="${modules.devweb.error}"/>
	<taskdef name="rmentry" classname="com.changelogic.ant.taskdefs.CvsEntryRemove"/>
	<script language="javascript">
		<![CDATA[
			entryRemover = project.createTask("rmentry");
			entryRemover.setFile(new java.io.File("."));
			upload_diff_prepare.addTask(entryRemover);
			for (i=0; work_path=project.getProperty('modules.module'+i+'.work_path'); i++) {
				entryRemover = project.createTask("rmentry");
				entryRemover.setFile(new java.io.File(work_path));
				upload_diff_preclean.addTask(entryRemover);
			}
			upload_diff_preclean.execute();
		]]>
	</script>

	<antcall target="upload_diff_commit"/> <!-- commit local change -->
	<fail unless="change.id" message="Cannot determine change ID"/>
	<get src="${devweb.url}&amp;event=Get_review_data&amp;change_id=${change.id}" dest="${devweb.tmpdir}/diff.properties"/>
	<property file="${devweb.tmpdir}/diff.properties" prefix="diff"/>
	<delete file="${devweb.tmpdir}/diff.properties"/>
	<echo message="${diff.devweb.notice}"/>
	<echo message="${diff.devweb.warning}"/>
	<fail if="diff.devweb.error" message="${diff.devweb.error}"/>
	<antcall target="test_checkout"/>
	<antcall target="checkout_dir"> <!-- re-create directory structure of removed modules -->
		<param name="checkout_dir.modules.dir" value="."/>
		<param name="checkout_dir.tag" value="${diff.base.tag}"/>
		<param name="checkout_dir.modules.prefix0" value="diff.ended_module"/>
		<param name="checkout_dir.pruning_disabled" value="1"/>
	</antcall>
	<script language="javascript">
		<![CDATA[
			var upDir = new java.io.File("..");
			var curDir = new java.io.File(".");

			var work_paths = new Array(".");
			for (i=0;work_path=project.getProperty("diff.module"+i+".work_path");i++) {
				work_paths[work_paths.length] = work_path;
			}
			for (i=0;work_path=project.getProperty("diff.ended_module"+i+".work_path");i++) {
				work_paths[work_paths.length] = work_path;
			}

			// re-create removed directories in existing modules
			for (i=0;i<work_paths.length;i++) {
				work_path = work_paths[i];
				work_path_file = (new java.io.File(curDir,work_path)).getCanonicalFile();
				updater = project.createTask("cvs");
				updater.setCvsRoot(project.getProperty("devweb.project.cvsroot"));
				updater.setCommand("-f -q update");
				updater.addCommandArgument("-d");
				updater.addCommandArgument("-r");
				updater.addCommandArgument("change_"+project.getProperty("change.id"));
				updater.addCommandArgument(work_path_file.getName());
				updater.setDest(work_path_file.getParentFile());
				updater.setFailOnError(true);
				upload_diff_prepare.addTask(updater);
			}

			upload_diff_prepare.execute();
		]]>
	</script>
	<script language="javascript">
		<![CDATA[
			work_paths = new Array("../"+project.getProperty("diff.repository"));
			server_paths = new Array(project.getProperty("diff.repository"));
			base_tags = new Array(project.getProperty("diff.base.tag"));
			for (i=0;work_path=project.getProperty("diff.module"+i+".work_path");i++) {
				work_paths[work_paths.length] = work_path;
				server_paths[server_paths.length] = project.getProperty("diff.module"+i+".server_path");
				base_tags[base_tags.length] = project.getProperty("diff.module"+i+".base.tag");
			}
			for (i=0;work_path=project.getProperty("diff.ended_module"+i+".work_path");i++) {
				work_paths[work_paths.length] = work_path;
				server_paths[server_paths.length] = project.getProperty("diff.ended_module"+i+".server_path");
				base_tags[base_tags.length] = project.getProperty("diff.ended_module"+i+".base.tag");
			}

			for (i in work_paths) {
				work_path = work_paths[i];
				server_path = server_paths[i];
				base_tag = base_tags[i];

				echoer = project.createTask("echo");
				echoer.setMessage("Diffing server path: "+server_path);
				upload_diff_generate.addTask(echoer);

				differ = project.createTask("cvs");
				differ.setCvsRoot(project.getProperty("devweb.project.cvsroot"));
				differ.setCommand("-f -q diff");
				differ.addCommandArgument("--brief");
				differ.addCommandArgument("--ignore-all-space");
				differ.addCommandArgument("--ignore-space-change");
				differ.addCommandArgument("--ignore-blank-lines");
				differ.addCommandArgument("-r");
				differ.addCommandArgument(base_tag);
				differ.addCommandArgument("-r");
				differ.addCommandArgument("change_"+project.getProperty("change.id"));
				differ.setDest(new java.io.File(work_path));
				differ.setFailOnError(false); // "true" would stop the script if any differences are found
				upload_diff_generate.addTask(differ);
			}

			// new FileLogger(project.getProperty(devweb.tmpdir)+"/task-output.txt");
			flogger_constructors = project.getClass().getClassLoader().loadClass("com.changelogic.ant.log.FileLogger").getConstructors(); 
			flogger_params = new Array(project.getProperty("devweb.tmpdir")+"/change_"+project.getProperty("change.id")+".cvsdiff");
			flogger = flogger_constructors[0].newInstance(flogger_params);
			flogger.setMessageOutputLevel(project.MSG_INFO);

			project.addBuildListener(flogger);
			upload_diff_generate.execute();
			project.removeBuildListener(flogger);
			flogger.close();
		]]>
	</script>
	<taskdef name="upload" classname="com.changelogic.ant.taskdefs.Upload"/>
	<upload file="${devweb.tmpdir}/change_${change.id}.cvsdiff" controlName="diff" address="${devweb.url}&amp;event=Receive_diff&amp;change_id=${change.id}" logfile="${devweb.tmpdir}/receive-diff.properties"/>
	<delete file="${devweb.tmpdir}/change_${change.id}.cvsdiff"/>
	<property file="${devweb.tmpdir}/receive-diff.properties" prefix="receive_diff"/>
	<delete file="${devweb.tmpdir}/receive-diff.properties"/>
	<echo message="${receive_diff.devweb.notice}"/>
	<echo message="${receive_diff.devweb.warning}"/>
	<fail if="receive_diff.devweb.error" message="${receive_diff.devweb.error}"/>
</target>

<target name="upload_diff_commit" unless="change.commited">
	<!-- for internal use -->
	<!-- commits change in order to get correct revision numbers for diff -->
	<antcall target="commit"/>
</target>

<target name="upload_diff_preclean">
	<!-- for internal use -->
	<!-- removes module checkouts from CVS/Entries files -->
</target>

<target name="upload_diff_prepare">
	<!-- for internal use -->
	<!-- re-creates removed directories -->
</target>

<target name="upload_diff_generate">
	<!-- for internal use -->
	<!-- generates the diff sent to server -->
</target>

<target name="upload_test_report" if="devweb.test.report.exists">
	<taskdef name="upload" classname="com.changelogic.ant.taskdefs.Upload"/>
	<upload file="${devweb.test.report.file}" controlName="testreport" address="${devweb.url}&amp;event=Receive_testreport&amp;change_id=${change.id}" logfile="${devweb.tmpdir}/receive-testreport.properties"/>
	<property file="${devweb.tmpdir}/receive-testreport.properties" prefix="receive_testreport"/>
	<delete file="${devweb.tmpdir}/receive-testreport.properties"/>
	<echo message="${receive_testreport.devweb.notice}"/>
	<echo message="${receive_testreport.devweb.warning}"/>
	<fail if="receive_testreport.devweb.error" message="${receive_testreport.devweb.error}"/>
</target>

<target name="checkout_submilestone_last_version" description="Check out latest version of given submilestone." depends="init,checkout_submilestone_last_version_ask">
	<property name="checkout.dir" location=".."/> <!-- default value for target directory -->
	<get src="${devweb.url}&amp;event=Get_last_version&amp;submilestone=${checkout.submilestone}" dest="${devweb.tmpdir}/last_version.properties"/>
	<property file="${devweb.tmpdir}/last_version.properties" prefix="last_version"/>
	<delete file="${devweb.tmpdir}/last_version.properties"/>
	<echo message="${last_version.devweb.notice}"/>
	<echo message="${last_version.devweb.warning}"/>
	<fail if="last_version.devweb.error" message="${last_version.devweb.error}" />
	<antcall target="checkout_dir">
		<param name="checkout_dir.dir" value="${checkout.dir}"/>
		<param name="checkout_dir.repository" value="${last_version.repository}"/>
		<param name="checkout_dir.tag" value="${last_version.tag}"/>
		<param name="checkout_dir.modules.prefix0" value="last_version.module"/>
	</antcall>
	<antcall target="process_environment_adjustments">
		<param name="process_environment_adjustments.prefix" value="last_version"/>
	</antcall>
</target>

<target name="checkout_submilestone_last_version_ask" unless="checkout.submilestone">
	<input message="Submilestone: " addproperty="checkout.submilestone"/>
	<fail unless="checkout.submilestone" message="You must provide submilestone number proceed"/>
	<script language="javascript">
		<![CDATA[
			var smRegExp = /^\d\d*\.\d\d*\.\d\d*$/;
			if (!smRegExp.test(project.getProperty("checkout.submilestone"))) {
				invalid_submilestone.execute();
			}
		]]>
	</script>
</target>

<target name="checkout_change_last_checkpoint" description="Check out latest checkpoint of given change." depends="init,checkout_change_last_checkpoint_ask">
	<property name="checkout.dir" location=".."/> <!-- default value for target directory -->
	<get src="${devweb.url}&amp;event=Get_last_checkpoint&amp;change_id=${checkout.change.id}" dest="${devweb.tmpdir}/last_checkpoint.properties"/>
	<property file="${devweb.tmpdir}/last_checkpoint.properties" prefix="last_checkpoint"/>
	<delete file="${devweb.tmpdir}/last_checkpoint.properties"/>
	<echo message="${last_checkpoint.devweb.notice}"/>
	<echo message="${last_checkpoint.devweb.warning}"/>
	<fail if="last_checkpoint.devweb.error" message="${last_checkpoint.devweb.error}" />
	<antcall target="checkout_dir">
		<param name="checkout_dir.dir" value="${checkout.dir}"/>
		<param name="checkout_dir.repository" value="${last_checkpoint.repository}"/>
		<param name="checkout_dir.tag" value="${last_checkpoint.tag}"/>
		<param name="checkout_dir.modules.prefix0" value="last_checkpoint.module"/>
	</antcall>
	<antcall target="process_environment_adjustments">
		<param name="process_environment_adjustments.prefix" value="last_checkpoint"/>
	</antcall>
</target>

<target name="checkout_change_last_checkpoint_ask" unless="checkout.change.id">
	<input message="Change ID: " addproperty="checkout.change.id"/>
	<fail unless="checkout.change.id" message="You must provide change number proceed"/>
	<script language="javascript">
		<![CDATA[
			var smRegExp = /^\d\d*$/;
			if (!smRegExp.test(project.getProperty("checkout.change.id"))) {
				invalid_change_id.execute();
			}
		]]>
	</script>
</target>

<target name="query_submilestone_last_version" description="Query latest version of given submilestone." depends="init,query_submilestone_last_version_ask">
	<get src="${devweb.url}&amp;event=Get_last_version&amp;submilestone=${query.submilestone}" dest="${devweb.tmpdir}/last_version.properties"/>
	<property file="${devweb.tmpdir}/last_version.properties" prefix="last_version"/>
	<loadfile srcFile="${devweb.tmpdir}/last_version.properties" property="last_version.properties"/>
	<delete file="${devweb.tmpdir}/last_version.properties"/>
	<echo message="${last_version.devweb.notice}"/>
	<echo message="${last_version.devweb.warning}"/>
	<fail if="last_version.devweb.error" message="${last_version.devweb.error}" />
	<antcall target="query_submilestone_last_version_store_result"/>
	<echo message="Last version in submilestone ${query.submilestone} is ${last_version.version}" level="info"/>
</target>

<target name="query_submilestone_last_version_ask" unless="query.submilestone">
	<!-- for internal use -->
	<!-- asks for submilestone to query about -->
	<input message="Submilestone: " addproperty="query.submilestone"/>
	<fail unless="query.submilestone" message="You must provide submilestone number proceed"/>
	<script language="javascript">
		<![CDATA[
			var smRegExp = /^\d\d*\.\d\d*\.\d\d*$/;
			if (!smRegExp.test(project.getProperty("query.submilestone"))) {
				invalid_submilestone.execute();
			}
		]]>
	</script>
</target>

<target name="query_submilestone_last_version_store_result" if="query.result.file">
	<!-- for internal use -->
	<!-- stores query result in a permanent file -->
	<echo file="${query.result.file}" message="${last_version.properties}"/>
</target>

<target name="query_change_last_checkpoint" description="Query latest checkpoint of given change." depends="init,query_change_last_checkpoint_ask">
	<get src="${devweb.url}&amp;event=Get_last_checkpoint&amp;change_id=${query.change.id}" dest="${devweb.tmpdir}/last_checkpoint.properties"/>
	<property file="${devweb.tmpdir}/last_checkpoint.properties" prefix="last_checkpoint"/>
	<loadfile srcFile="${devweb.tmpdir}/last_checkpoint.properties" property="last_checkpoint.properties"/>
	<delete file="${devweb.tmpdir}/last_checkpoint.properties"/>
	<echo message="${last_checkpoint.devweb.notice}"/>
	<echo message="${last_checkpoint.devweb.warning}"/>
	<fail if="last_checkpoint.devweb.error" message="${last_checkpoint.devweb.error}" />
	<antcall target="query_change_last_checkpoint_store_result"/>
	<echo message="Last checkpoint in change ${query.change.id} is ${last_checkpoint.checkpoint}" level="info"/>
</target>

<target name="query_change_last_checkpoint_ask" unless="query.change.id">
	<!-- for internal use -->
	<!-- asks for change ID to query about -->
	<input message="Change ID: " addproperty="query.change.id"/>
	<fail unless="query.change.id" message="You must provide change number proceed"/>
	<script language="javascript">
		<![CDATA[
			var smRegExp = /^\d\d*$/;
			if (!smRegExp.test(project.getProperty("query.change.id"))) {
				invalid_change_id.execute();
			}
		]]>
	</script>
</target>

<target name="query_change_last_checkpoint_store_result" if="query.result.file">
	<!-- for internal use -->
	<!-- stores query result in a permanent file -->
	<echo file="${query.result.file}" message="${last_checkpoint.properties}"/>
</target>

<target name="checkout_version" description="Check out a version from repository." depends="init,checkout_version_ask">
	<property name="checkout_version.dir" location=".."/> <!-- default value for target directory -->
	<get src="${devweb.url}&amp;event=Get_version_checkout_data&amp;version=${checkout_version.version}" dest="${devweb.tmpdir}/version_checkout.properties"/>
	<property file="${devweb.tmpdir}/version_checkout.properties" prefix="version_checkout"/>
	<delete file="${devweb.tmpdir}/version_checkout.properties"/>
	<echo message="${version_checkout.devweb.notice}"/>
	<echo message="${version_checkout.devweb.warning}"/>
	<fail if="version_checkout.devweb.error" message="${version_checkout.devweb.error}"/>
	<antcall target="checkout_dir">
		<param name="checkout_dir.dir" value="${checkout_version.dir}"/>
		<param name="checkout_dir.repository" value="${version_checkout.repository}"/>
		<param name="checkout_dir.tag" value="${version_checkout.tag}"/>
		<param name="checkout_dir.modules.prefix0" value="version_checkout.module"/>
	</antcall>
	<antcall target="process_environment_adjustments">
		<param name="process_environment_adjustments.prefix" value="version_checkout"/>
	</antcall>
</target>

<target name="checkout_version_ask" unless="checkout_version.version">
	<!-- for internal use -->
	<!-- asks for number of version to check out -->
	<input message="Version number: " addproperty="checkout_version.version"/>
	<fail unless="checkout_version.version" message="You must provide version number proceed"/>
	<script language="javascript">
		<![CDATA[
			var smRegExp = /^\d\d*\.\d\d*\.\d\d*\.\d\d*$/;
			if (!smRegExp.test(project.getProperty("checkout_version.version"))) {
				invalid_version.execute();
			}
		]]>
	</script>
</target>

<target name="checkout_change" description="Check out a change from repository." depends="init,checkout_change_ask">
	<property name="checkout_change.dir" location=".."/> <!-- default value for target directory -->
	<get src="${devweb.url}&amp;event=Get_checkout_data&amp;change_id=${checkout_change.change_id}" dest="${devweb.tmpdir}/checkout_data.properties"/>
	<property file="${devweb.tmpdir}/checkout_data.properties" prefix="checkout_data"/>
	<delete file="${devweb.tmpdir}/checkout_data.properties"/>
	<echo message="${checkout_data.devweb.notice}"/>
	<echo message="${checkout_data.devweb.warning}"/>
	<fail if="checkout_data.devweb.error" message="${checkout_data.devweb.error}"/>
	<antcall target="checkout_dir">
		<param name="checkout_dir.dir" value="${checkout_change.dir}"/>
		<param name="checkout_dir.repository" value="${checkout_data.repository}"/>
		<param name="checkout_dir.tag" value="${checkout_data.change.tag}"/>
		<param name="checkout_dir.modules.prefix0" value="checkout_data.modules.module"/>
	</antcall>
	<antcall target="process_environment_adjustments">
		<param name="process_environment_adjustments.prefix" value="checkout_data"/>
	</antcall>
</target>

<target name="checkout_change_ask" unless="checkout_change.change_id">
	<!-- for internal use -->
	<!-- asks for change ID to check out -->
	<input message="Change ID: " addproperty="checkout_change.change_id"/>
	<fail unless="checkout_change.change_id" message="You must provide change number proceed"/>
	<script language="javascript">
		<![CDATA[
			var smRegExp = /^\d\d*$/;
			if (!smRegExp.test(project.getProperty("checkout_change.change_id"))) {
				invalid_change_id.execute();
			}
		]]>
	</script>
</target>

<target name="integrate" description="Start integration of a change." depends="init">
	<get src="${devweb.url}&amp;event=Get_integratable_changes" dest="${devweb.tmpdir}/integratable_changes.properties"/>
	<property file="${devweb.tmpdir}/integratable_changes.properties" prefix="integratable_changes"/>
	<delete file="${devweb.tmpdir}/integratable_changes.properties"/>
	<echo message="${integratable_changes.devweb.notice}"/>
	<echo message="${integratable_changes.devweb.warning}"/>
	<fail if="integratable_changes.devweb.error" message="${integratable_changes.devweb.error}" />
	<script language="javascript">
		<![CDATA[
			var subtarget = project.getClass().getClassLoader().loadClass("org.apache.tools.ant.Target").newInstance();
			subtarget.setName("integrate_show_change_list");
			project.addOrReplaceTarget(subtarget);
			echoer = project.createTask("echo");
			echoer.setMessage(project.getProperty("integratable_changes.change0.id")? "Available choices: " : "No changes suitable for integration were found.");
			subtarget.addTask(echoer);
			for (i=0;change_id=project.getProperty("integratable_changes.change"+i+".id");i++) {
				echoer = project.createTask("echo");
				echoer.setMessage(change_id+" - "+project.getProperty("integratable_changes.change"+i+".description"));
				subtarget.addTask(echoer);
			}
			subtarget.execute();
		]]>
	</script>
	<input message="Change ID: " addproperty="integration.change.id"/>
	<fail unless="integration.change.id" message="You must provide change ID to proceed"/>
	<script language="javascript">
		<![CDATA[
			var numRegExp = /^\d\d*$/;
			if (!numRegExp.test(project.getProperty("integration.change.id"))) {
				invalid_change_id.execute();
			}
		]]>
	</script>
	<delete file="${devweb.tmpdir}/integration.properties"/>
	<propertyfileedit file="${devweb.tmpdir}/integration.properties">
		<entry key="change.id" value="${integration.change.id}"/>
	</propertyfileedit>
	<mkdir dir="${devweb.integration.dir}"/>
	<delete includeEmptyDirs="true">
		<fileset dir="${devweb.integration.dir}" includes="integration${integration.change.id}-*">
			<type type="dir"/>
		</fileset>
	</delete>
	<antcall target="integrate_continue"/>
</target>

<target name="integrate_continue" description="Continue integration where it left off." depends="init">
	<property file="${devweb.tmpdir}/integration.properties" prefix="integration"/>
	<fail unless="integration.change.id" message="Integration has not been started"/>
	<property name="integration.completed.branch.id" value=""/> <!-- default value if not set -->
	<get src="${devweb.url}&amp;event=Start_integration&amp;change_id=${integration.change.id}&amp;completed_branch_id=${integration.completed.branch.id}" dest="${devweb.tmpdir}/integration-start.properties" />
	<property file="${devweb.tmpdir}/integration-start.properties" prefix="integration.start"/>
	<delete file="${devweb.tmpdir}/integration-start.properties"/>
	<echo message="${integration.start.devweb.notice}"/>
	<echo message="${integration.start.devweb.warning}"/>
	<fail if="integration.start.devweb.error" message="${integration.start.devweb.error}" />

	<!-- determine next activity -->
	<condition property="integration.wait_for_lock" value="true">
		<istrue value="${integration.start.branch.locked}"/>
	</condition>
	<condition property="integration.target" value="integrate_continue_wait">
		<istrue value="${integration.wait_for_lock}"/>
	</condition>
	<!-- else: -->
	<condition property="integration.target" value="integrate_pass">
		<istrue value="${integration.start.complete}"/>
	</condition>
	<!-- else: -->
	<property name="integration.target" value="integrate_build"/>

	<!-- run chosen activity -->
	<antcall target="${integration.target}"/>

	<!-- reiterate if needed -->
	<condition property="integrate_iterate.do" value="true">
		<not>
			<or>
				<istrue value="${integration.wait_for_lock}"/>
				<istrue value="${integration.start.complete}"/>
			</or>
		</not>
	</condition>
	<antcall target="integrate_iterate"/>
</target>

<target name="integrate_continue_wait">
	<!-- for internal use -->
	<!-- waits until branch lock is released or fails due to time out -->

	<!-- output lock status -->
	<echo message="${integration.start.branch.lock.message}"/>

	<!-- wait -->
	<echo message="Waiting for lock on branch &quot;${integration.start.branch.tag}&quot;, retrying every 5 seconds"/>
	<waitfor maxwait="1" maxwaitunit="hour" checkevery="5" checkeveryunit="second" timeoutproperty="integration.branch.lock.timeout">
		<http url="${devweb.url}&amp;event=Check_branch_lock&amp;branch_id=${integration.start.branch.id}&amp;branch_type=${integration.start.branch.type}&amp;change_id=${integration.change.id}"/>
	</waitfor>
	<fail if="integration.branch.lock.timeout" message="Timed out; lock could not be acquired"/>

	<!-- resume integration -->
	<antcall target="integrate_continue" inheritAll="false"/>
</target>

<target name="integrate_iterate" if="integrate_iterate.do">
	<!-- for internal use -->
	<antcall target="integrate_continue" inheritAll="false"/>
</target>

<target name="integrate_step" description="Continue integration from a step specified by user." depends="init">
	<property file="${devweb.tmpdir}/integration.properties" prefix="integration"/>
	<fail unless="integration.change.id" message="Integration has not been started"/>
	<property name="integration.completed.branch.id" value=""/> <!-- default value if not set -->
	<property name="integration.prepared.branch.id" value=""/> <!-- default value if not set -->
	<get src="${devweb.url}&amp;event=Start_integration&amp;change_id=${integration.change.id}&amp;completed_branch_id=${integration.completed.branch.id}" dest="${devweb.tmpdir}/integration-start.properties" />
	<property file="${devweb.tmpdir}/integration-start.properties" prefix="integration.start"/>
	<delete file="${devweb.tmpdir}/integration-start.properties"/>
	<echo message="${integration.start.devweb.notice}"/>
	<echo message="${integration.start.devweb.warning}"/>
	<fail if="integration.start.devweb.error" message="${integration.start.devweb.error}" />
	<property name="integration.start.dir" value="${devweb.integration.dir}/integration${integration.change.id}-${integration.start.branch.id}"/>
	<property name="integration.start.basedir" value="${integration.start.dir}/${integration.start.repository}"/>
	<antcall target="integrate_build_ensure_prepared"/>
	<property file="${integration.start.basedir}/devweb-project.properties" prefix="integration.settings"/>
	<!-- build menu -->
	<script language="javascript">
		<![CDATA[
			i = 0;
			for (i = 0; project.getProperty("integration.settings.devweb.integration.target"+i); i++) {
				echoer = project.createTask("echo");
				echoer.setMessage(""+i+" - "+project.getProperty("integration.settings.devweb.integration.target"+i));
				integrate_step_sub0.addTask(echoer);
			}
			project.setProperty("integration.settings.targetcount",""+i);
			echoer = project.createTask("echo");
			echoer.setMessage(""+i+" - (end integration to this branch)");
			integrate_step_sub0.addTask(echoer);
			defaultStep = 0;
			if ((i = project.getProperty("integration.completed.step.id")) && (recentTarget = project.getProperty("integration.settings.devweb.integration.target"+i))) {
				defaultStep = i*1+1;
			}
			project.setProperty("integration.step.default",""+defaultStep);
			echoer = project.createTask("echo");
			echoer.setMessage("Default: "+defaultStep);
			integrate_step_sub0.addTask(echoer);
			asker = project.createTask("input");
			asker.setMessage("Your choice:");
			asker.setAddproperty("integration.step.id");
			integrate_step_sub0.addTask(asker);
			integrate_step_sub0.execute();
		]]>
	</script>
	<fail unless="integration.step.id" message="You must choose a step to proceed"/>
	<condition property="integration.step.isvalid">
		<or>
			<equals arg1="${integration.step.id}" arg2="${integration.settings.targetcount}"/>
			<and>
				<isset property="integration.step.default"/>
				<equals arg1="${integration.step.id}" arg2=""/>
			</and>
			<isset property="integration.settings.devweb.integration.target${integration.step.id}"/>
		</or>
	</condition>
	<fail unless="integration.step.isvalid" message="No such step: ${integration.step.id}"/>
	<script language="javascript">
		<![CDATA[
			stepId = project.getProperty("integration.step.id");
			completedStepValue = (stepId!=""? stepId : project.getProperty("integration.step.default"))-1;
			project.setProperty("integration.step.completed.step.id",completedStepValue);
		]]>
	</script>
	<propertyfileedit file="${devweb.tmpdir}/integration.properties">
		<entry key="completed.step.id" value="${integration.step.completed.step.id}"/>
	</propertyfileedit>
	<antcall target="integrate_continue" inheritAll="false"/>
</target>

<target name="integrate_step_sub0">
	<!-- for internal use -->
	<!-- displays the menu when selecting step -->
	<echo message="Select integration step: "/>
</target>

<target name="integrate_build" depends="init">

	<!-- initialize build directory -->
	<antcall target="integrate_build_ensure_prepared"/>
	<property name="integration.start.dir" value="${devweb.integration.dir}/integration${integration.change.id}-${integration.start.branch.id}"/>
	<property name="integration.start.basedir" value="${integration.start.dir}/${integration.start.repository}"/>

	<!-- read integration settings -->
	<property file="${integration.start.basedir}/devweb-personal.properties" prefix="integration.settings"/> <!-- some properties might be overruled in personal settings -->
	<property file="${integration.start.basedir}/devweb-project.properties" prefix="integration.settings"/> <!-- normally integration targets should be described here -->
	<available property="devweb.modulelist.exists" file="${integration.start.basedir}/devweb-modules.properties"/>
	<antcall target="integrate_check_modulelist"/>

	<!-- determine build target -->
	<script language="javascript">
		<![CDATA[
			i=-1;
			if (project.getProperty("integration.completed.step.id")) {
				i = project.getProperty("integration.completed.step.id");
			}
			i++;
			project.setProperty("integration.step.id",i);
			if (project.getProperty("integration.settings.devweb.integration.target"+i)) {
				project.setProperty("integration.build.target.remote",project.getProperty("integration.settings.devweb.integration.target"+i));
				project.setProperty("integration.build.target","integrate_run_build");
			} else if (i>0) {
				project.setProperty("integration.build.target","integrate_store_branch");
			}
		]]>
	</script>
	<fail unless="integration.build.target" message="No build targets defined"/>
	<antcall target="${integration.build.target}"/>
</target>

<target name="integrate_run_build" depends="init">
	<!-- run build -->
	<echo message="Current integration directory: ${integration.start.dir}" level="info"/>
	<echo message="Running target &quot;${integration.build.target.remote}&quot; in ${integration.start.repository}/${integration.settings.devweb.integration.buildfile}" level="info"/>
	<ant antfile="${integration.settings.devweb.integration.buildfile}" target="${integration.build.target.remote}" dir="${integration.start.basedir}" inheritAll="false">
		<property name="devweb.integration.version" value="${devweb.integration.start.branch.version}"/>
		<property name="devweb.integration.step" value="${integration.step.id}"/>
	</ant>
	<propertyfileedit file="${devweb.tmpdir}/integration.properties">
		<entry key="completed.step.id" value="${integration.step.id}"/>
	</propertyfileedit>
</target>

<target name="integrate_store_branch" depends="init">
	<!-- store build result -->
	<script language="javascript">
		<![CDATA[
			i = 0;
			branch_saved = 0;
			while (project.getProperty("integration.iteration"+i+".branch.id") && !branch_saved) {
				if (project.getProperty("integration.iteration"+i+".branch.id")==project.getProperty("integration.start.branch.id")) {
					branch_saved = 1;
				}
				i++;
			}
			if (!branch_saved) {
				updater = project.createTask("propertyfileedit");
				updater.setFile(new java.io.File(project.getProperty("devweb.tmpdir")+"/integration.properties"));
				branchId = updater.createEntry();
				branchId.setKey("iteration"+i+".branch.id");
				branchId.setValue(project.getProperty("integration.start.branch.id"));
				branchTag = updater.createEntry();
				branchTag.setKey("iteration"+i+".branch.tag");
				branchTag.setValue(project.getProperty("integration.start.branch.tag"));
				if (project.getProperty("integration.start.branch.type")!='macrochange') {
					versionTag = updater.createEntry();
					versionTag.setKey("iteration"+i+".version-tag");
					versionTag.setValue(project.getProperty("integration.start.branch.version-tag"));
				}
				k = 0;
				for (j=0; server_path=project.getProperty("integration.start.base.module"+j+".server_path"); j++) {
					updaterEntry = updater.createEntry();
					updaterEntry.setKey("iteration"+i+".module"+j+".server_path");
					updaterEntry.setValue(server_path);
					updaterEntry = updater.createEntry();
					updaterEntry.setKey("iteration"+i+".module"+j+".work_path");
					updaterEntry.setValue(project.getProperty("integration.start.base.module"+j+".work_path"));
					updaterEntry = updater.createEntry();
					updaterEntry.setKey("iteration"+i+".module"+j+".change.editable");
					updaterEntry.setValue(project.getProperty("integration.start.base.module"+j+".change.editable"));
					updaterEntry = updater.createEntry();
					updaterEntry.setKey("iteration"+i+".module"+j+".base.editable");
					updaterEntry.setValue(project.getProperty("integration.start.base.module"+j+".base.editable"));
					k = j+1;
				}
				for (j=0; server_path=project.getProperty("integration.start.base.newmodule"+j+".server_path"); j++) {
					updaterEntry = updater.createEntry();
					updaterEntry.setKey("iteration"+i+".module"+k+".server_path");
					updaterEntry.setValue(server_path);
					updaterEntry.setKey("iteration"+i+".module"+k+".work_path");
					updaterEntry.setValue(project.getProperty("integration.start.base.newmodule"+j+".work_path"));
					updaterEntry = updater.createEntry();
					updaterEntry.setKey("iteration"+i+".module"+k+".change.editable");
					updaterEntry.setValue("0");
					updaterEntry = updater.createEntry();
					updaterEntry.setKey("iteration"+i+".module"+k+".base.editable");
					updaterEntry.setValue(project.getProperty("integration.start.base.newmodule"+j+".editable"));
					k++;
				}
				for (j=0; server_path=project.getProperty("integration.start.change.newmodule"+j+".server_path"); j++) {
					work_path = project.getProperty("integration.start.change.newmodule"+j+".work_path");
					updaterEntry = updater.createEntry();
					updaterEntry.setKey("iteration"+i+".module"+(j+k)+".server_path");
					updaterEntry.setValue(server_path);
					updaterEntry = updater.createEntry();
					updaterEntry.setKey("iteration"+i+".module"+(j+k)+".work_path");
					updaterEntry.setValue(work_path);
					updaterEntry = updater.createEntry();
					updaterEntry.setKey("iteration"+i+".module"+(j+k)+".change.editable");
					updaterEntry.setValue("1");
					updaterEntry = updater.createEntry();
					updaterEntry.setKey("iteration"+i+".newmodule"+j+".server_path");
					updaterEntry.setValue(server_path);
					updaterEntry = updater.createEntry();
					updaterEntry.setKey("iteration"+i+".newmodule"+j+".work_path");
					updaterEntry.setValue(work_path);
				}
				integrate_build_sub1.addTask(updater);
				integrate_build_sub1.execute();
			}
		]]>
	</script>
	<antcall target="integrate_copy_modulelist"/>
	<propertyfileedit file="${devweb.tmpdir}/integration.properties">
		<entry key="completed.branch.id" value="${integration.start.branch.id}" />
		<entry key="completed.step.id" value="-1" /> <!-- reset integration step for other branches -->
		<entry key="completed.prepare.checkout.step.id" value="-1"/> <!-- reset branch checkout step for other branches -->
	</propertyfileedit>
</target>

<target name="integrate_build_ensure_prepared">
	<!-- checkout and merge -->
	<property name="integration.start.dir" value="${devweb.integration.dir}/integration${integration.change.id}-${integration.start.branch.id}"/>
	<property name="integration.start.basedir" value="${integration.start.dir}/${integration.start.repository}"/>
	<condition property="integration.start.prepared">
		<equals arg1="${integration.start.branch.id}" arg2="${integration.prepared.branch.id}"/>
	</condition>
	<antcall target="integrate_build_prepare"/>
</target>

<target name="integrate_build_prepare" unless="integration.start.prepared" depends="init,integrate_build_checkout">
	<delete file="${integration.start.basedir}/change.properties"/>
	<antcall target="integrate_build_prepare_remove_change_properties"/>
	<antcall target="integrate_build_prepare_restore_change_properties"/>
	<property file="${integration.start.basedir}/devweb-project.properties" prefix="integration.settings"/>
	<antcall target="integrate_update_version"/>
	<antcall target="update_maven_version">
		<param name="update_maven_version.dir" value="${integration.start.basedir}" />
	</antcall>
	<antcall target="integrate_build_prepare_callback"/>
	<script language="javascript">
		<![CDATA[
			saver = project.createTask("propertyfileedit");
			saver.setFile(new java.io.File(project.getProperty("devweb.tmpdir")+"/integration.properties"));

			entry = saver.createEntry();
			entry.setKey("prepared.branch.id");
			entry.setValue(project.getProperty("integration.start.branch.id"));

			entry = saver.createEntry();
			entry.setKey("completed.step.id");
			entry.setValue("-1");

			integrate_build_prepare_store.addTask(saver);
			integrate_build_prepare_store.execute();
		]]>
	</script>
	<echo message="Merging code finished in directory ${integration.start.dir}" level="info"/>
	<fail if="integration.settings.devweb.integration.prepare.stop.message" message="${integration.settings.devweb.integration.prepare.stop.message}"/>
</target>

<target name="integrate_build_prepare_remove_change_properties" if="integration.start.branch.version">
	<cvs cvsRoot="${devweb.project.cvsroot}" command="rm -f change.properties" dest="${integration.start.basedir}" failonerror="true"/>
</target>

<target name="integrate_build_prepare_restore_change_properties" unless="integration.start.branch.version">
	<cvs cvsRoot="${devweb.project.cvsroot}" command="update change.properties" dest="${integration.start.basedir}" failonerror="true" quiet="true"/>
</target>

<target name="integrate_build_prepare_store">
	<!-- for internal use -->
	<!-- stores success of integration directry preparation -->
</target>

<target name="integrate_update_version" if="integration.start.branch.version"> <!-- update version file (except when integrating a microchange) -->
	<!-- default names for version component property names: -->
	<property name="integration.settings.devweb.version.properties.names.stage" value="stage"/>
	<property name="integration.settings.devweb.version.properties.names.milestone" value="milestone"/>
	<property name="integration.settings.devweb.version.properties.names.submilestone" value="submilestone"/>
	<property name="integration.settings.devweb.version.properties.names.version" value="version"/>

	<propertyfileedit file="${integration.start.basedir}/${integration.settings.devweb.version.properties.file}">
		<entry key="${integration.settings.devweb.version.properties.prefix}.${integration.settings.devweb.version.properties.names.stage}" value="${integration.start.branch.version.stage}"/>
		<entry key="${integration.settings.devweb.version.properties.prefix}.${integration.settings.devweb.version.properties.names.milestone}" value="${integration.start.branch.version.milestone}"/>
		<entry key="${integration.settings.devweb.version.properties.prefix}.${integration.settings.devweb.version.properties.names.submilestone}" value="${integration.start.branch.version.submilestone}"/>
		<entry key="${integration.settings.devweb.version.properties.prefix}.${integration.settings.devweb.version.properties.names.version}" value="${integration.start.branch.version.version}"/>
	</propertyfileedit>
	<cvs cvsRoot="${devweb.project.cvsroot}" command="add ${integration.settings.devweb.version.properties.file}" dest="${integration.start.basedir}" failonerror="false"/>
</target>

<target name="integrate_build_checkout">
	<!-- for internal use -->
	<!-- performs checking out integration base version and merging with change -->
	<echo message="Starting integration in directory ${integration.start.dir}" level="info"/>
	<mkdir dir="${devweb.integration.dir}"/>
	<mkdir dir="${integration.start.dir}"/>
	<script language="javascript">
		<![CDATA[
			var completedStep = project.getProperty("integration.completed.prepare.checkout.step.id")*1;
			var currentStep = 0;

			if (++currentStep>completedStep) { // create macrochange branch for modules editable in microchange, but not yet editable in macrochange
				for (i=0;server_path=project.getProperty("integration.start.base.module"+i+".server_path");i++) {
					if (branch_base_tag=project.getProperty("integration.start.base.module"+i+".branch.base-tag")) {
						brancher = project.createTask("cvs");
						brancher.setCvsRoot(project.getProperty("devweb.project.cvsroot"));
						brancher.setCommand("-q rtag");
						brancher.addCommandArgument("-F");
						brancher.addCommandArgument("-B");
						brancher.addCommandArgument("-b");
						brancher.addCommandArgument("-r");
						brancher.addCommandArgument(branch_base_tag);
						brancher.addCommandArgument(project.getProperty("integration.start.branch.tag"));
						brancher.addCommandArgument(server_path);
						integrate_build_checkout_sub1.addTask(brancher);
					}
				}

				saver = project.createTask("propertyfileedit");
				saver.setFile(new java.io.File(project.getProperty("devweb.tmpdir")+"/integration.properties"));

				entry = saver.createEntry();
				entry.setKey("completed.prepare.checkout.step.id");
				entry.setValue(currentStep);

				integrate_build_checkout_sub1.addTask(saver);
			}

			if (++currentStep>completedStep) {
				checkouter = project.createTask("antcall");
				checkouter.setTarget("checkout_dir");

				checkoutParam = checkouter.createParam();
				checkoutParam.setName("checkout_dir.dir");
				checkoutParam.setValue(project.getProperty("integration.start.dir"));

				checkoutParam = checkouter.createParam();
				checkoutParam.setName("checkout_dir.repository");
				checkoutParam.setValue(project.getProperty("integration.start.repository"));

				checkoutParam = checkouter.createParam();
				checkoutParam.setName("checkout_dir.tag");
				checkoutParam.setValue(project.getProperty("integration.start.branch.tag"));

				checkoutParam = checkouter.createParam();
				checkoutParam.setName("checkout_dir.modules.prefix0");
				checkoutParam.setValue("integration.start.base.module");

				checkoutParam = checkouter.createParam();
				checkoutParam.setName("checkout_dir.modules.prefix1");
				checkoutParam.setValue("integration.start.base.newmodule");

				integrate_build_checkout_sub1.addTask(checkouter);

				saver = project.createTask("propertyfileedit");
				saver.setFile(new java.io.File(project.getProperty("devweb.tmpdir")+"/integration.properties"));

				entry = saver.createEntry();
				entry.setKey("completed.prepare.checkout.step.id");
				entry.setValue(currentStep);

				integrate_build_checkout_sub1.addTask(saver);
			}

			if (++currentStep>completedStep) {
				mergeable_module_count = 0;
				for (i=0;work_path=project.getProperty("integration.start.base.module"+i+".work_path");i++) {
					if (project.getProperty("integration.start.base.module"+i+".change.editable")=="1") {
						project.setUserProperty("integration.start.merge.module"+mergeable_module_count+".work_path",work_path);
						project.setUserProperty("integration.start.merge.module"+mergeable_module_count+".start.tag",project.getProperty("integration.start.base.module"+i+".change.base-tag"));
						mergeable_module_count++;
					}
				}

				saver = project.createTask("propertyfileedit");
				saver.setFile(new java.io.File(project.getProperty("devweb.tmpdir")+"/integration.properties"));

				entry = saver.createEntry();
				entry.setKey("completed.prepare.checkout.step.id");
				entry.setValue(currentStep);

				integrate_build_checkout_sub1.addTask(saver); // save before trying to merge because merge may not be repeated, even if fails - see task 11789 for more details

				merger = project.createTask("antcall");
				merger.setTarget("merge_dir");

				mergeParam = merger.createParam();
				mergeParam.setName("merge_dir.dir");
				mergeParam.setValue(project.getProperty("integration.start.dir"));

				mergeParam = merger.createParam();
				mergeParam.setName("merge_dir.repository");
				mergeParam.setValue(project.getProperty("integration.start.repository"));

				mergeParam = merger.createParam();
				mergeParam.setName("merge_dir.start.tag");
				mergeParam.setValue(project.getProperty("integration.start.change.base-tag"));

				mergeParam = merger.createParam();
				mergeParam.setName("merge_dir.end.tag");
				mergeParam.setValue("change_"+project.getProperty("integration.change.id"));

				mergeParam = merger.createParam();
				mergeParam.setName("merge_dir.modules.prefix0");
				mergeParam.setValue("integration.start.merge.module");

				integrate_build_checkout_sub1.addTask(merger);
			}

			if (++currentStep>completedStep) {
				if (project.getProperty("integration.start.change.newmodule0.server_path")) {
					checkouter = project.createTask("antcall");
					checkouter.setTarget("checkout_dir");

					checkoutParam = checkouter.createParam();
					checkoutParam.setName("checkout_dir.modules.dir");
					checkoutParam.setValue(project.getProperty("integration.start.basedir"));

					checkoutParam = checkouter.createParam();
					checkoutParam.setName("checkout_dir.tag");
					checkoutParam.setValue("change_"+project.getProperty("integration.change.id"));

					checkoutParam = checkouter.createParam();
					checkoutParam.setName("checkout_dir.modules.prefix0");
					checkoutParam.setValue("integration.start.change.newmodule");

					integrate_build_checkout_sub1.addTask(checkouter);
				}

				saver = project.createTask("propertyfileedit");
				saver.setFile(new java.io.File(project.getProperty("devweb.tmpdir")+"/integration.properties"));

				entry = saver.createEntry();
				entry.setKey("completed.prepare.checkout.step.id");
				entry.setValue(currentStep);

				integrate_build_checkout_sub1.addTask(saver);
			}


			integrate_build_checkout_sub1.execute();
		]]>
	</script>
</target>

<target name="integrate_build_checkout_sub1">
	<!-- for internal use -->
</target>

<target name="integrate_build_prepare_callback" if="devweb.integration.prepare.target">
	<ant antfile="${devweb.integration.buildfile}" target="${devweb.integration.prepare.target}" inheritAll="false">
		<property name="devweb.integration.dir" value="${integration.start.basedir}"/>
	</ant>
</target>

<target name="integrate_build_sub1">
	<!-- for internal use -->
</target>

<target name="integrate_check_modulelist" if="devweb.modulelist.exists" depends="init">
	<taskdef name="upload" classname="com.changelogic.ant.taskdefs.Upload"/>
	<upload file="${integration.start.basedir}/devweb-modules.properties" controlName="modulelist" address="${devweb.url}&amp;event=Check_module_versions&amp;change_id=${integration.change.id}&amp;branch_id=${integration.start.branch.id}&amp;branch_type=${integration.start.branch.type}" logfile="${devweb.tmpdir}/module_check.properties"/>
	<property file="${devweb.tmpdir}/module_check.properties" prefix="module.versions"/>
	<antcall target="integrate_check_modulelist_sub1"/>
	<echo message="${module.versions.devweb.warning}"/>
	<fail if="module.versions.devweb.error" message="${module.versions.devweb.error}"/>
	<move file="${devweb.tmpdir}/module_check.properties" tofile="${integration.start.basedir}/devweb-modules.properties"/>
</target>

<target name="integrate_check_modulelist_sub1" if="module.versions.devweb.error">
	<delete file="${devweb.tmpdir}/module_check.properties"/>
</target>

<target name="integrate_copy_modulelist" if="devweb.modulelist.exists" depends="init">
	<copy file="${integration.start.basedir}/devweb-modules.properties" tofile="${devweb.integration.dir}/modulelist-${integration.change.id}-${integration.start.branch.id}"/>
</target>

<target name="integrate_pass" depends="init">
	<echo message="Integration passed, commiting to cvs"/>
	<taskdef name="upload" classname="com.changelogic.ant.taskdefs.Upload"/>
	<upload address="${devweb.url}&amp;event=Pass_integration&amp;change_id=${integration.change.id}" logfile="${devweb.tmpdir}/integration-pass.properties" controlName="modulelist">
		<fileset id="integration.modulelists" dir="${devweb.integration.dir}" includes="modulelist-${integration.change.id}-*"/>
	</upload>
	<property file="${devweb.tmpdir}/integration-pass.properties" prefix="integration.pass"/>
	<delete file="${devweb.tmpdir}/integration-pass.properties"/>
	<echo message="${integration.pass.devweb.notice}"/>
	<echo message="${integration.pass.devweb.warning}"/>
	<fail if="integration.pass.devweb.error" message="${integration.pass.devweb.error}"/>

	<script language="javascript">
		<![CDATA[
			for (branch_count = 0; project.getProperty("integration.pass.createbranch.branch"+branch_count+".version-tag"); branch_count++) {
				server_paths = new Array(project.getProperty("integration.pass.createbranch.branch"+branch_count+".repository"));
				for (i=0;server_path=project.getProperty("integration.pass.createbranch.branch"+branch_count+".module"+i+".server_path");i++) {
					server_paths[server_paths.length] = server_path;
				}
				for (i=0;i<server_paths.length;i++) {
					server_path = server_paths[i];
					brancher = project.createTask("cvs");
					brancher.setCvsRoot(project.getProperty("devweb.project.cvsroot"));
					brancher.setCommand("rtag");
					brancher.addCommandArgument("-b");
					brancher.addCommandArgument("-r");
					brancher.addCommandArgument(project.getProperty("integration.pass.createbranch.branch"+branch_count+".version-tag"));
					brancher.addCommandArgument(project.getProperty("integration.pass.createbranch.branch"+branch_count+".tag"));
					brancher.addCommandArgument(server_path);
					brancher.setFailOnError(true);
					integrate_pass_sub1.addTask(brancher);
				}
			}
			for (i=0; branchId=project.getProperty("integration.iteration"+i+".branch.id"); i++) {
				messageFile = new java.io.File(project.getProperty("devweb.tmpdir")+"/integration-commit-"+project.getProperty("integration.change.id")+"-"+branchId+".message");
				messageComposer = project.createTask("echo");
				messageComposer.setMessage(
					project.getProperty("devweb.commit.message.prefix") +
					"Change "+project.getProperty("integration.change.id") +
					project.getProperty("line.separator") +
					(project.getProperty("integration.pass.branch.type")!="macrochange"?
						project.getProperty("integration.iteration"+i+".version-tag") :
						project.getProperty("integration.pass.checkpoint.tag")
					)+
					project.getProperty("line.separator")+
					project.getProperty("integration.pass.change.description")
				);
				messageComposer.setFile(messageFile);
				messageComposer.setAppend(false);
				integrate_pass_sub0.addTask(messageComposer);
				integrationDir = 
					project.getProperty("devweb.integration.dir")+
					"/integration"+project.getProperty("integration.change.id")+"-"+branchId;
				
				commitable_module_count = 0;
				for (j=0; work_path = project.getProperty("integration.iteration"+i+".module"+j+".work_path"); j++) {
					if (project.getProperty("integration.iteration"+i+".module"+j+".change.editable")=="1") {
						project.setUserProperty("integration.iteration"+i+".commitable.module"+commitable_module_count+".work_path",work_path);

						commitable_module_count++;
					}
				}

				for (j=0;j<2;j++) { // dry-run all commits before starting real commits to minimize commit failure risk
					commiter = project.createTask("antcall");
					commiter.setTarget("commit_dir");

					commitParam = commiter.createParam();
					commitParam.setName("commit_dir.dir");
					commitParam.setValue((new java.io.File(integrationDir)).getAbsolutePath());

					commitParam = commiter.createParam();
					commitParam.setName("commit_dir.message_file");
					commitParam.setValue(messageFile.getAbsolutePath());

					commitParam = commiter.createParam();
					commitParam.setName("commit_dir.repository");
					commitParam.setValue(project.getProperty("integration.pass.repository"));

					commitParam = commiter.createParam();
					commitParam.setName("commit_dir.modules.prefix0");
					commitParam.setValue("integration.iteration"+i+".commitable.module");

					if (j==0) {
						commitParam = commiter.createParam();
						commitParam.setName("commit_dir.fake");
						commitParam.setValue("true");
						integrate_pass_sub0.addTask(commiter);
					} else {
						integrate_pass_sub1.addTask(commiter);
					}
				}

				if (project.getProperty("integration.pass.branch.type")!="macrochange") { // integrating a macrochange
					repository_dir_file = new java.io.File(new java.io.File(integrationDir),project.getProperty("integration.pass.repository"));
					work_path_files = new Array(repository_dir_file);
					for (j=0;work_path=project.getProperty("integration.iteration"+i+".module"+j+".work_path");j++) {
						work_path_files[work_path_files.length] = new java.io.File(repository_dir_file,work_path);
					}
					for (j=0;j<work_path_files.length;j++) {

						announcer = project.createTask("echo");
						announcer.setMessage("Tagging "+work_path_files[j].getCanonicalPath());
						integrate_pass_sub1.addTask(announcer);

						tagger = project.createTask("cvs");
						tagger.setCvsRoot(project.getProperty("devweb.project.cvsroot"));
						tagger.setCommand("tag -F "+project.getProperty("integration.iteration"+i+".version-tag"));
						tagger.setDest(work_path_files[j]);
						tagger.setFailOnError(true);
						integrate_pass_sub1.addTask(tagger);
					}

					for (j=0;server_path=project.getProperty("integration.iteration"+i+".newmodule"+j+".server_path");j++) { // create trunk branch for modules added in change
						brancher = project.createTask("cvs");
						brancher.setCvsRoot(project.getProperty("devweb.project.cvsroot"));
						brancher.setCommand("rtag");
						brancher.addCommandArgument("-b");
						brancher.addCommandArgument("-r");
						brancher.addCommandArgument(project.getProperty("integration.iteration"+i+".version-tag"));
						brancher.addCommandArgument(project.getProperty("integration.iteration"+i+".branch.tag"));
						brancher.addCommandArgument(server_path);
						brancher.setFailOnError(true);
						integrate_pass_sub1.addTask(brancher);
					}
				} else { // integrating a microchange
					runner = project.createTask("antcall");
					runner.setTarget("mark_checkpoint");
					prop = runner.createParam();
					prop.setName("checkpoint.tag");
					prop.setValue(project.getProperty("integration.pass.checkpoint.tag"));
					prop = runner.createParam();
					prop.setName("checkpoint.base.tag");
					prop.setValue(project.getProperty("integration.pass.checkpoint.base.tag"));
					prop = runner.createParam();
					prop.setName("checkpoint.repository");
					prop.setValue(project.getProperty("integration.pass.repository"));
					checkpoint_module_count = 0;
					for (j=0;server_path=project.getProperty("integration.iteration"+i+".module"+j+".server_path");j++) {
						if (project.getProperty("integration.iteration"+i+".module"+j+".change.editable")=="1" || project.getProperty("integration.iteration"+i+".module"+j+".base.editable")=="1") {
							prop = runner.createParam();
							prop.setName("checkpoint.module"+checkpoint_module_count+".server_path");
							prop.setValue(server_path);
							checkpoint_module_count++;
						}
					}
					integrate_pass_sub1.addTask(runner);
					for (j=0;server_path=project.getProperty("integration.iteration"+i+".newmodule"+j+".server_path");j++) { // create trunk branch for modules added in change
						brancher = project.createTask("cvs");
						brancher.setCvsRoot(project.getProperty("devweb.project.cvsroot"));
						brancher.setCommand("rtag");
						brancher.addCommandArgument("-b");
						brancher.addCommandArgument("-r");
						brancher.addCommandArgument(project.getProperty("integration.pass.checkpoint.tag"));
						brancher.addCommandArgument(project.getProperty("integration.iteration"+i+".branch.tag"));
						brancher.addCommandArgument(server_path);
						brancher.setFailOnError(true);
						integrate_pass_sub1.addTask(brancher);
					}
				}

				cleaner = project.createTask("delete");
				cleaner.setDir(new java.io.File(integrationDir));
				cleaner.setFailOnError(false);
				integrate_pass_sub2.addTask(cleaner);

				messageCleaner = project.createTask("delete");
				messageCleaner.setFile(messageFile);
				messageCleaner.setFailOnError(false);
				integrate_pass_sub2.addTask(messageCleaner);
			}
			integrate_pass_sub0.execute();
			integrate_pass_sub1.execute();
			integrate_pass_sub2.execute();
		]]>
	</script>

	<taskdef name="upload" classname="com.changelogic.ant.taskdefs.Upload"/>
	<upload address="${devweb.url}&amp;event=Pass_integration&amp;change_id=${integration.change.id}&amp;commit=1" logfile="${devweb.tmpdir}/integration-commit.properties" controlName="modulelist">
		<fileset refid="integration.modulelists"/>
	</upload>
	<property file="${devweb.tmpdir}/integration-commit.properties" prefix="integration.commit"/>
	<delete file="${devweb.tmpdir}/integration-commit.properties"/>
	<echo message="${integration.commit.devweb.notice}"/>
	<echo message="${integration.commit.devweb.warning}"/>
	<fail if="integration.commit.devweb.error" message="${integration.commit.devweb.error}"/>
	<delete file="${devweb.tmpdir}/integration.properties"/>
	<delete>
		<fileset refid="integration.modulelists"/>
	</delete>
</target>

<target name="integrate_clean" description="Clean build directories of last integration attempt." depends="init">
	<property file="${devweb.tmpdir}/integration.properties" prefix="integration.clean"/>
	<fail unless="integration.clean.change.id" message="Integration change ID cannot be determined"/>
	<delete file="${devweb.tmpdir}/integration.properties"/>
	<delete includeEmptyDirs="true">
		<fileset dir="${devweb.integration.dir}" includes="integration${integration.clean.change.id}-*">
			<type type="dir"/>
		</fileset>
	</delete>
</target>

<target name="integrate_pass_sub0">
	<!-- for internal use -->
</target>

<target name="integrate_pass_sub1">
	<!-- for internal use -->
</target>

<target name="integrate_pass_sub2">
	<!-- for internal use -->
</target>

<target name="integrate_cancel" description="Cancel integration of a change. All edits made by integrator will be lost." depends="init">
	<property file="${devweb.tmpdir}/integration.properties" prefix="integration"/>
	<fail unless="integration.change.id" message="Integration change ID cannot be determined"/>
	<get src="${devweb.url}&amp;event=Cancel_integration&amp;change_id=${integration.change.id}" dest="${devweb.tmpdir}/integration-cancel.properties"/>
	<property file="${devweb.tmpdir}/integration-cancel.properties" prefix="integration.cancel"/>
	<delete file="${devweb.tmpdir}/integration-cancel.properties"/>
	<echo message="${integration.cancel.devweb.notice}"/>
	<echo message="${integration.cancel.devweb.warning}"/>
	<fail if="integration.cancel.devweb.error" message="${integration.cancel.devweb.error}"/>
	<antcall target="integrate_clean"/>
</target>



<!-- ******************** NIGHTLY BUILD BEGIN********************** -->

<target name="nightly" description="Start nightly builds." depends="init">
	<echo message="Preparing nightly builds"/>
	
	<!-- Getting versions to build -->
	<get src="${devweb.url}&amp;event=Get_nightly_versions" dest="${devweb.tmpdir}/nightly.properties" />
	<property file="${devweb.tmpdir}/nightly.properties" prefix="nightly.settings"/>
	<delete file="${devweb.tmpdir}/nightly.properties"/>
	<echo message="${nightly.settings.devweb.notice}"/>
	<echo message="${nightly.settings.devweb.warning}"/>
	<fail if="nightly.settings.devweb.error" message="${nightly.settings.devweb.error}"/>
	
	<!-- Cleaning previous nightly build reports -->
	<delete file="${devweb.tmpdir}/nightlyreport.properties"/>
	<delete>
		<fileset dir="${devweb.tmpdir}" includes="*-build-report.log"/>
	</delete>	
	
	<!-- Starting nightly build -->
	<antcall target="nightly_build_all"/>

	<!-- Sending nightly mail -->
	<antcall target="nightly_mail"/>
	
	<taskdef name="upload" classname="com.changelogic.ant.taskdefs.Upload"/>
	<upload file="${devweb.tmpdir}/nightlyreport.properties" controlName="file0" address="${devweb.url}&amp;event=Add_build" logfile="${devweb.tmpdir}/nightlyreport_upload.properties"/>
	<property file="${devweb.tmpdir}/nightlyreport_upload.properties" prefix="nightlyreport.upload"/>
	<echo message="${nightlyreport.upload.devweb.notice}"/>
	<echo message="${nightlyreport.upload.devweb.warning}"/>
	<fail if="nightlyreport.upload.devweb.error" message="${nightlyreport.upload.devweb.error}"/>	
</target>

<target name="nightly_mail" description="Mail nightly report">
	<property file="${devweb.tmpdir}/nightlyreport.properties" prefix="nightly.report"/>

	<!-- Sending nightly status mail -->
	<script language="javascript">
		<![CDATA[
			mail = project.createTask("mail");
			mail.setFrom("nightlyreport@webmedia.ee");
			mail.setToList(project.getProperty("devweb.nightly.email"));
			
			//No point to include 1.5 MB big files...
			//file = project.getClass().getClassLoader().loadClass("org.apache.tools.ant.types.FileSet").newInstance();
			//file.setDir(new java.io.File(project.getProperty("devweb.tmpdir")));
			//file.setIncludes("*-build-report.log");
			//mail.addFileset(file);

			mail.setMailhost("mail.webmedia.ee");
			mail.setSubject("Nightly build results");
			message = "The following versions were built and tested: \n";
			
			//Making message
			for (i=0; (version = project.getProperty("nightly.report.nightly.version" + i + ".name")); i++) {
			message += "===============================================================\n";
				message += "Version: " + version + "\n";
				if ("false".equals(project.getProperty("nightly.report.nightly.version" + i + ".failed"))) {
					message += "Passed successfully!\n\n";
				}
				else {
					message += "Failed with message: " + project.getProperty("nightly.report.nightly.version" + i + ".failed") + "\n\n";
				}
				message += "CVS checkout successful: " + project.getProperty("nightly.report.nightly.version" + i + ".cvscheckout.passed") + "\n";
				message += "Targets: \n"
				for (j=0; target = project.getProperty("devweb.nightly.target" + j); j++) {
					message += "  " + target + ": " + "(" + ("true".equals(project.getProperty("nightly.report.nightly.version" + i + ".target" + j + ".passed")) ? "passed" : "failed") + ")\n";
				}
				message += "===============================================================\n\n";
			}
			mail.setMessage(message);
			
			nightly_mail.addTask(mail);
		]]>
	</script>

</target>


<target name="nightly_build_all" description="Build nightly versions and report the errors.">
	<echo message="Building nightly builds"/>
	<taskdef name="antcallnofail" classname="com.changelogic.ant.taskdefs.AntCallNoFail"/>

	<!-- Building individual nightly versions -->
	<script language="javascript">
		<![CDATA[
			for (i=0; (version = project.getProperty("nightly.settings.version"+i)); i++) {
				versionTag = project.getProperty("nightly.settings.version" + i + ".tag");
				
				//Saving version in report
				nightlyVersion = project.createTask("propertyfileedit");
				nightlyVersion.setFile(new java.io.File(project.getProperty("devweb.tmpdir") + "/nightlyreport.properties"));			
						
				nightlyVersionStatus = nightlyVersion.createEntry();
				nightlyVersionStatus.setKey("nightly.version" + i + ".name");
				nightlyVersionStatus.setValue(version);	
				
				nightly_build_all.addTask(nightlyVersion);

				//Setting version failed property to false
				project.setProperty("nightly.version" + i + ".failed", "false");

				//Calling the build itself	
				nightlyBuilder = project.createTask("antcallnofail");
				nightlyBuilder.setTarget("nightly_build");
				
				ver = nightlyBuilder.createParam();
				ver.setName("nightly.version");
				ver.setValue(version);			
				
				verTag = nightlyBuilder.createParam();
				verTag.setName("nightly.version.tag");
				verTag.setValue(versionTag);		
				
				num = nightlyBuilder.createParam();
				num.setName("nightly.build.number");
				num.setValue(i);								
								
				nightlyBuilder.setFailProperty("nightly.version" + i + ".failed");
				
				nightly_build_all.addTask(nightlyBuilder);
								
				//Calling the clean up and report target											
				nightlyPostBuild = project.createTask("antcall");			
				nightlyPostBuild.setTarget("nightly_post_build");	
				
				ver = nightlyPostBuild.createParam();
				ver.setName("nightly.version");
				ver.setValue(version);			
				
				verTag = nightlyPostBuild.createParam();
				verTag.setName("nightly.version.tag");
				verTag.setValue(versionTag);		
				
				num = nightlyPostBuild.createParam();
				num.setName("nightly.build.number");
				num.setValue(i);		
								
				nightly_build_all.addTask(nightlyPostBuild);			
			}
		]]>
	</script>
</target>

<target name="nightly_post_build" description="Build nightly build report, clean up.">	
	<!-- Copy build reports from nightly version to temp dir -->
	<copy todir="${devweb.tmpdir}">
		<fileset dir="${devweb.nightly.dir}/${nightly.settings.cvs.module}-${nightly.version}/${nightly.settings.cvs.module}" includes="*-build-report.log"/>
	</copy>
	
	<!-- Saving nightly build status and cleaning up -->
	<script language="javascript">
		<![CDATA[
			nightlyVersion = project.createTask("propertyfileedit");
			nightlyVersion.setFile(new java.io.File(project.getProperty("devweb.tmpdir") + "/nightlyreport.properties"));							
			nightlyVersionStatus = nightlyVersion.createEntry();
			nightlyVersionStatus.setKey("nightly.version" + project.getProperty("nightly.build.number") + ".failed");
			nightlyVersionStatus.setValue(project.getProperty("nightly.version" + project.getProperty("nightly.build.number") + ".failed"));			
				
			nightly_post_build.addTask(nightlyVersion);
			
			nightlyClean = project.createTask("delete");	
			nightlyClean.setDir(new java.io.File(project.getProperty("devweb.nightly.dir") + "/" + project.getProperty("nightly.settings.cvs.module") + "-" + project.getProperty("nightly.version")));
			nightlyClean.setFailOnError(false);
			nightly_post_build.addTask(nightlyClean);					
		]]>
	</script>		
</target>

<target name="nightly_build" description="Build one nightly version.">		
	<echo message="Building version ${nightly.version}"/>		
	
	<property name="devweb.nightly.version.dir" value="${devweb.nightly.dir}/${nightly.settings.cvs.module}-${nightly.version}"/>
	<property name="devweb.nightly.version.cvs.module.dir" value="${devweb.nightly.version.dir}/${nightly.settings.cvs.module}"/>		
	
	<!-- Saves target names and sets passed status to false -->
	<propertyfileedit file="${devweb.tmpdir}/nightlyreport.properties">
		<entry key="nightly.version${nightly.build.number}.cvscheckout.passed" value="false"/>
	</propertyfileedit>				
	
	<!-- Preparing nightly version for build -->
	<delete dir="${devweb.nightly.version.dir}" failonerror="false"/>
	<mkdir dir="${devweb.nightly.version.dir}"/>
	<cvs cvsRoot="${devweb.project.cvsroot}" quiet="true" tag="${nightly.version.tag}" package="${nightly.settings.cvs.module}" dest="${devweb.nightly.version.dir}" failonerror="true"/>
	<copy file="eteabuild.properties" todir="${devweb.nightly.version.cvs.module.dir}"/>
	<copy file="personal.build.properties" todir="${devweb.nightly.version.cvs.module.dir}"/>

	<propertyfileedit file="${devweb.tmpdir}/nightlyreport.properties">
		<entry key="nightly.version${nightly.build.number}.cvscheckout.passed" value="true"/>
	</propertyfileedit>
	
	<property file="${devweb.nightly.version.cvs.module.dir}/devweb-project.properties" prefix="nightly.settings"/>

	<script language="javascript">
		<![CDATA[
			for (i=0; target = project.getProperty("nightly.settings.devweb.nightly.target" + i); i++) {
				nightlyTargetName = project.createTask("propertyfileedit");
				nightlyTargetName.setFile(new java.io.File(project.getProperty("devweb.tmpdir") + "/nightlyreport.properties"));										
				nightlyTargetEntry = nightlyTargetName.createEntry();
				nightlyTargetEntry.setKey("nightly.version" + project.getProperty("nightly.build.number") + ".target" + i + ".name");
				nightlyTargetEntry.setValue(target);			
				
				nightlyTargetPassedEntry = nightlyTargetName.createEntry();
				nightlyTargetPassedEntry.setKey("nightly.version" + project.getProperty("nightly.build.number") + ".target" + i + ".passed");
				nightlyTargetPassedEntry.setValue("false");						
					
				nightly_build.addTask(nightlyTargetName);
			}
		]]>
	</script>		
	
	<!-- Runs individual targets, may fail -->	
	<script language="javascript">
		<![CDATA[
			for (i=0; target = project.getProperty("nightly.settings.devweb.nightly.target" + i); i++) {
				if ("virtual_sleep".equals(target)) {
					echo = project.createTask("echo");
					echo.setMessage("Sleeping for 10 minutes!");

					nightly_build.addTask(echo);	
					
					sleep = project.createTask("sleep");
					sleep.setMinutes(10);

					nightly_build.addTask(sleep);		

					echo = project.createTask("echo");
					echo.setMessage("Slept for 10 minutes!");

					nightly_build.addTask(echo);	

					nightlyTargetPassed = project.createTask("propertyfileedit");
					nightlyTargetPassed.setFile(new java.io.File(project.getProperty("devweb.tmpdir") + "/nightlyreport.properties"));	

					nightlyTargetPassedEntry = nightlyTargetPassed.createEntry();
					nightlyTargetPassedEntry.setKey("nightly.version" + project.getProperty("nightly.build.number") + ".target" + i + ".passed");
					nightlyTargetPassedEntry.setValue("true");						
						
					nightly_build.addTask(nightlyTargetPassed);
				}
				else {
					nightlyTargetExecutor = project.createTask("antcall");
					nightlyTargetExecutor.setTarget("nightly_target_execute");
					
					currentTarget = nightlyTargetExecutor.createParam();
					currentTarget.setName("nightly.current.target");
					currentTarget.setValue(target);
					
					currentTargetNum = nightlyTargetExecutor.createParam();
					currentTargetNum.setName("nightly.current.target.number");
					currentTargetNum.setValue(i);						
					
					nightly_build.addTask(nightlyTargetExecutor);			
				}
			}
		]]>
	</script>		
</target>

<target name="nightly_target_execute" description="Execute one target.">
	<!-- Calling the target -->
	<ant 
		antfile="${nightly.settings.devweb.nightly.buildfile}" 
		dir="${devweb.nightly.version.cvs.module.dir}"
		target="${nightly.current.target}"
		output="${nightly.settings.cvs.module}-${nightly.version}-${nightly.current.target}-build-report.log"
		inheritAll="false"
	/>
	<!-- Saving target status -->
	<propertyfileedit file="${devweb.tmpdir}/nightlyreport.properties">
		<entry key="nightly.version${nightly.build.number}.target${nightly.current.target.number}.passed" value="true"/>
	</propertyfileedit>
</target>

<!-- ******************** NIGHTLY BUILD END ********************** -->




<target name="change_auth_token" description="Fetch new authentication code." depends="init">
	<get src="${devweb.url}&amp;event=Change_auth_token" dest="${devweb.tmpdir}/change-token.properties"/>
	<property file="${devweb.tmpdir}/change-token.properties" prefix="token.change"/>
	<delete file="${devweb.tmpdir}/change-token.properties"/>
	<echo message="${token.change.devweb.notice}"/>
	<echo message="${token.change.devweb.warning}"/>
	<fail if="token.change.devweb.error" message="${token.change.devweb.error}"/>
	<propertyfileedit file="devweb-personal.properties">
		<entry key="devweb.auth-token" value="${token.change.token}"/>
	</propertyfileedit>
</target>

<target name="test_checkout" description="Test local checkout's control files." depends="init">
	<property file="change.properties"/>
	<condition property="test_checkout.target" value="test_checkout_do">
		<and>
			<isset property="devweb.java_1_4.compatible"/>
			<istrue value="${devweb.java_1_4.compatible}"/>
			<not>
				<and>
					<isset property="devweb.cvscheck.disabled"/>
					<istrue value="${devweb.cvscheck.disabled}"/>
				</and>
			</not>
		</and>
	</condition>
	<!-- else: -->
	<property name="test_checkout.target" value="test_checkout_na"/>
	<antcall target="${test_checkout.target}"/>
</target>

<target name="test_checkout_do">
	<fail unless="change.id" message="Cannot determine current change ID"/>
	<get src="${devweb.url}&amp;event=Get_modules&amp;editable=1&amp;change_id=${change.id}" dest="${devweb.tmpdir}/modules.properties"/>
	<property file="${devweb.tmpdir}/modules.properties" prefix="test_checkout_do.modules"/>
	<delete file="${devweb.tmpdir}/modules.properties"/>
	<echo message="${test_checkout_do.modules.devweb.notice}"/>
	<echo message="${test_checkout_do.modules.devweb.warning}"/>
	<fail if="test_checkout_do.modules.devweb.error" message="${test_checkout_do.modules.devweb.error}"/>
	<taskdef name="cvscheck" classname="com.changelogic.ant.taskdefs.CvsFilesCheck"/>
	<script language="javascript">
		<![CDATA[
			importClass(java.io.File);

			var checker = project.createTask("cvscheck");
			checker.setCvsRoot(project.getProperty("devweb.project.cvsroot"));
			checker.setFailOnError(true);
			if (change_id = project.getProperty("change.id")) {
				checker.setExpectedTag("change_"+change_id);
			}
			var checkout = checker.createCheckout();
			checkout.setRootDir(new File("."));
			checkout.setRepository(project.getProperty("test_checkout_do.modules.repository"));
			for (var i=0; server_path=project.getProperty("test_checkout_do.modules.module"+i+".server_path"); i++) {
				var work_path = project.getProperty("test_checkout_do.modules.module"+i+".work_path");
				var moduleDir = new File(work_path);
				if (moduleDir.exists()) {
					checkout = checker.createCheckout();
					checkout.setRootDir(moduleDir);
					checkout.setRepository(server_path);
				}
			}
			test_checkout_sub1.addTask(checker);
			test_checkout_sub1.execute();
		]]>
	</script>
</target>

<target name="test_checkout_sub1">
<!-- for internal use -->
<!-- runs cvs control files check for all checked out external modules and the main repository -->
</target>

<target name="test_checkout_na">
	<echo message="Checking CVS metafiles is disabled" level="warning"/>
</target>

<target name="sync_main" description="Synchronize latest branch and MAIN branch." depends="init">
	<property file="change.properties"/>
	<fail unless="change.id" message="Cannot determine change ID"/>
	<get src="${devweb.url}&amp;event=Start_synchronization&amp;change_id=${change.id}" dest="${devweb.tmpdir}/start_sync.properties"/>
	<property file="${devweb.tmpdir}/start_sync.properties" prefix="start_sync"/>
	<delete file="${devweb.tmpdir}/start_sync.properties"/>
	<echo message="${start_sync.devweb.notice}"/>
	<echo message="${start_sync.devweb.warning}"/>
	<fail if="start_sync.devweb.error" message="${start_sync.devweb.error}" />
	<delete file="${devweb.tmpdir}/sync_main.properties"/>
	<script language="javascript">
		<![CDATA[
			sync_journal = project.createTask("propertyfileedit");
			sync_journal.setFile(new java.io.File(project.getProperty("devweb.tmpdir")+"/sync_main.properties"));

			journal_entry = sync_journal.createEntry();
			journal_entry.setKey("dir");
			journal_entry.setValue(project.getProperty("devweb.integration.dir")+"/sync"+project.getProperty("start_sync.id"));

			journal_entry = sync_journal.createEntry();
			journal_entry.setKey("main.postsync_version");
			journal_entry.setValue(project.getProperty("start_sync.main.postsync_version"));

			journal_entry = sync_journal.createEntry();
			journal_entry.setKey("main.postsync_version_tag");
			journal_entry.setValue(project.getProperty("start_sync.main.postsync_version_tag"));

			journal_entry = sync_journal.createEntry();
			journal_entry.setKey("main.last_sync_tag");
			journal_entry.setValue(project.getProperty("start_sync.main.last_sync_tag"));

			journal_entry = sync_journal.createEntry();
			journal_entry.setKey("main.presync_tag");
			journal_entry.setValue(project.getProperty("start_sync.main.presync_tag"));

			journal_entry = sync_journal.createEntry();
			journal_entry.setKey("main.postsync_tag");
			journal_entry.setValue(project.getProperty("start_sync.main.postsync_tag"));

			journal_entry = sync_journal.createEntry();
			journal_entry.setKey("latest.last_sync_tag");
			journal_entry.setValue(project.getProperty("start_sync.latest.last_sync_tag"));

			journal_entry = sync_journal.createEntry();
			journal_entry.setKey("change.base_tag");
			journal_entry.setValue(project.getProperty("start_sync.change.base_tag"));

			for (module_index=0; work_path = project.getProperty('start_sync.modules.common.module'+module_index+'.work_path'); module_index++) {

				journal_entry = sync_journal.createEntry();
				journal_entry.setKey("modules.common.module"+module_index+".work_path");
				journal_entry.setValue(work_path);

				journal_entry = sync_journal.createEntry();
				journal_entry.setKey("modules.common.module"+module_index+".server_path");
				journal_entry.setValue(project.getProperty("start_sync.modules.common.module"+module_index+".server_path"));
			}

			for (module_index=0; work_path = project.getProperty('start_sync.modules.new.main.module'+module_index+'.work_path'); module_index++) {
				journal_entry = sync_journal.createEntry();
				journal_entry.setKey("modules.new.main.module"+module_index+".work_path");
				journal_entry.setValue(work_path);

				journal_entry = sync_journal.createEntry();
				journal_entry.setKey("modules.new.main.module"+module_index+".server_path");
				journal_entry.setValue(project.getProperty("start_sync.modules.new.main.module"+module_index+".server_path"));
			}

			for (module_index=0; work_path = project.getProperty('start_sync.modules.old.main.module'+module_index+'.work_path'); module_index++) {
				journal_entry = sync_journal.createEntry();
				journal_entry.setKey("modules.old.main.module"+module_index+".work_path");
				journal_entry.setValue(work_path);

				journal_entry = sync_journal.createEntry();
				journal_entry.setKey("modules.old.main.module"+module_index+".server_path");
				journal_entry.setValue(project.getProperty("start_sync.modules.old.main.module"+module_index+".server_path"));
			}

			for (module_index=0; work_path = project.getProperty('start_sync.modules.new.latest.module'+module_index+'.work_path'); module_index++) {
				journal_entry = sync_journal.createEntry();
				journal_entry.setKey("modules.new.latest.module"+module_index+".work_path");
				journal_entry.setValue(work_path);

				journal_entry = sync_journal.createEntry();
				journal_entry.setKey("modules.new.latest.module"+module_index+".server_path");
				journal_entry.setValue(project.getProperty("start_sync.modules.new.latest.module"+module_index+".server_path"));
			}

			for (module_index=0; work_path = project.getProperty('start_sync.modules.old.latest.module'+module_index+'.work_path'); module_index++) {
				journal_entry = sync_journal.createEntry();
				journal_entry.setKey("modules.old.latest.module"+module_index+".work_path");
				journal_entry.setValue(work_path);

				journal_entry = sync_journal.createEntry();
				journal_entry.setKey("modules.old.latest.module"+module_index+".server_path");
				journal_entry.setValue(project.getProperty("start_sync.modules.old.latest.module"+module_index+".server_path"));
			}

			journal_entry = sync_journal.createEntry();
			journal_entry.setKey("repository");
			journal_entry.setValue(project.getProperty("start_sync.repository"));

			step_number = 0;
			parameter_number = 0;

			journal_entry = sync_journal.createEntry();
			journal_entry.setKey("step"+step_number+".target");
			journal_entry.setValue("sync_main_checkout_main");

			step_number++;
			parameter_number = 0;

			if (project.getProperty("start_sync.segment0.start.tag")) {
				for (segment_index=0; project.getProperty("start_sync.segment"+segment_index+".start.tag"); segment_index++) {
					for (segment_module_index = 0; project.getProperty("start_sync.segment"+segment_index+".modules.module"+segment_module_index+".work_path"); segment_module_index++) {
						journal_entry = sync_journal.createEntry();
						journal_entry.setKey("segment"+segment_index+".modules.module"+segment_module_index+".work_path");
						journal_entry.setValue(project.getProperty("start_sync.segment"+segment_index+".modules.module"+segment_module_index+".work_path"));

						journal_entry = sync_journal.createEntry();
						journal_entry.setKey("segment"+segment_index+".modules.module"+segment_module_index+".server_path");
						journal_entry.setValue(project.getProperty("start_sync.segment"+segment_index+".modules.module"+segment_module_index+".server_path"));
					}

					journal_entry = sync_journal.createEntry();
					journal_entry.setKey("step"+step_number+".target");
					journal_entry.setValue("sync_main_merge_segment");

					journal_entry = sync_journal.createEntry();
					journal_entry.setKey("step"+step_number+".param"+parameter_number+".name");
					journal_entry.setValue("sync_main_merge_segment.start.tag");
					journal_entry = sync_journal.createEntry();
					journal_entry.setKey("step"+step_number+".param"+parameter_number+".value");
					journal_entry.setValue(project.getProperty("start_sync.segment"+segment_index+".start.tag"));
					parameter_number++;

					journal_entry = sync_journal.createEntry();
					journal_entry.setKey("step"+step_number+".param"+parameter_number+".name");
					journal_entry.setValue("sync_main_merge_segment.end.tag");
					journal_entry = sync_journal.createEntry();
					journal_entry.setKey("step"+step_number+".param"+parameter_number+".value");
					journal_entry.setValue(project.getProperty("start_sync.segment"+segment_index+".end.tag"));
					parameter_number++;

					journal_entry = sync_journal.createEntry();
					journal_entry.setKey("step"+step_number+".param"+parameter_number+".name");
					journal_entry.setValue("sync_main_merge_segment.segment.index");
					journal_entry = sync_journal.createEntry();
					journal_entry.setKey("step"+step_number+".param"+parameter_number+".value");
					journal_entry.setValue(segment_index+"");
					parameter_number++;

					journal_entry = sync_journal.createEntry();
					journal_entry.setKey("step"+step_number+".confirm");
					journal_entry.setValue("Restart merging differences between "+project.getProperty("start_sync.segment"+segment_index+".start.tag")+" and "+project.getProperty("start_sync.segment"+segment_index+".end.tag")+" into MAIN? ");

					step_number++;
					parameter_number = 0;

					journal_entry = sync_journal.createEntry();
					journal_entry.setKey("step"+step_number+".target");
					journal_entry.setValue("sync_main_fake_commit_segment");

					journal_entry = sync_journal.createEntry();
					journal_entry.setKey("step"+step_number+".param"+parameter_number+".name");
					journal_entry.setValue("sync_main_merge_segment.segment.index");
					journal_entry = sync_journal.createEntry();
					journal_entry.setKey("step"+step_number+".param"+parameter_number+".value");
					journal_entry.setValue(""+segment_index);
					parameter_number++;

					step_number++;
					parameter_number = 0;
				}
				journal_entry = sync_journal.createEntry();
				journal_entry.setKey("step"+step_number+".target");
				journal_entry.setValue("sync_main_refresh_main");

				step_number++;
				parameter_number = 0;

				journal_entry = sync_journal.createEntry();
				journal_entry.setKey("step"+step_number+".target");
				journal_entry.setValue("sync_main_commit_main");

				journal_entry = sync_journal.createEntry();
				journal_entry.setKey("step"+step_number+".param"+parameter_number+".name");
				journal_entry.setValue("sync_main_commit_main.fake");
				journal_entry = sync_journal.createEntry();
				journal_entry.setKey("step"+step_number+".param"+parameter_number+".value");
				journal_entry.setValue("true");
				parameter_number++;

				step_number++;
				parameter_number = 0;

			}

			journal_entry = sync_journal.createEntry();
			journal_entry.setKey("step"+step_number+".target");
			journal_entry.setValue("sync_main_tag_main");

			journal_entry = sync_journal.createEntry();
			journal_entry.setKey("step"+step_number+".param"+parameter_number+".name");
			journal_entry.setValue("sync_main_tag_main.tag");
			journal_entry = sync_journal.createEntry();
			journal_entry.setKey("step"+step_number+".param"+parameter_number+".value");
			journal_entry.setValue(project.getProperty("start_sync.main.presync_tag"));
			parameter_number++;

			journal_entry = sync_journal.createEntry();
			journal_entry.setKey("step"+step_number+".param"+parameter_number+".name");
			journal_entry.setValue("sync_main_tag_main.modules.prefix0");
			journal_entry = sync_journal.createEntry();
			journal_entry.setKey("step"+step_number+".param"+parameter_number+".value");
			journal_entry.setValue("sync_main.modules.common.module");
			parameter_number++;

			journal_entry = sync_journal.createEntry();
			journal_entry.setKey("step"+step_number+".param"+parameter_number+".name");
			journal_entry.setValue("sync_main_tag_main.modules.prefix1");
			journal_entry = sync_journal.createEntry();
			journal_entry.setKey("step"+step_number+".param"+parameter_number+".value");
			journal_entry.setValue("sync_main.modules.new.main.module");
			parameter_number++;

			journal_entry = sync_journal.createEntry();
			journal_entry.setKey("step"+step_number+".param"+parameter_number+".name");
			journal_entry.setValue("sync_main_tag_main.modules.prefix2");
			journal_entry = sync_journal.createEntry();
			journal_entry.setKey("step"+step_number+".param"+parameter_number+".value");
			journal_entry.setValue("sync_main.modules.old.latest.module");
			parameter_number++;

			step_number++;
			parameter_number = 0;

			journal_entry = sync_journal.createEntry();
			journal_entry.setKey("step"+step_number+".target");
			journal_entry.setValue("sync_main_commit_main");

			journal_entry = sync_journal.createEntry();
			journal_entry.setKey("step"+step_number+".param"+parameter_number+".name");
			journal_entry.setValue("sync_main_commit_main.fake");
			journal_entry = sync_journal.createEntry();
			journal_entry.setKey("step"+step_number+".param"+parameter_number+".value");
			journal_entry.setValue("false");
			parameter_number++;

			step_number++;
			parameter_number = 0;

			journal_entry = sync_journal.createEntry();
			journal_entry.setKey("step"+step_number+".target");
			journal_entry.setValue("sync_main_tag_main");

			journal_entry = sync_journal.createEntry();
			journal_entry.setKey("step"+step_number+".param"+parameter_number+".name");
			journal_entry.setValue("sync_main_tag_main.tag");
			journal_entry = sync_journal.createEntry();
			journal_entry.setKey("step"+step_number+".param"+parameter_number+".value");
			journal_entry.setValue(project.getProperty("start_sync.main.postsync_tag"));
			parameter_number++;

			journal_entry = sync_journal.createEntry();
			journal_entry.setKey("step"+step_number+".param"+parameter_number+".name");
			journal_entry.setValue("sync_main_tag_main.modules.prefix0");
			journal_entry = sync_journal.createEntry();
			journal_entry.setKey("step"+step_number+".param"+parameter_number+".value");
			journal_entry.setValue("sync_main.modules.common.module");
			parameter_number++;

			journal_entry = sync_journal.createEntry();
			journal_entry.setKey("step"+step_number+".param"+parameter_number+".name");
			journal_entry.setValue("sync_main_tag_main.modules.prefix1");
			journal_entry = sync_journal.createEntry();
			journal_entry.setKey("step"+step_number+".param"+parameter_number+".value");
			journal_entry.setValue("sync_main.modules.new.main.module");
			parameter_number++;

			step_number++;
			parameter_number = 0;

			for (not_editable_module_index = 0; project.getProperty("start_sync.modules.not_editable.module"+not_editable_module_index+".code"); not_editable_module_index++) {
				journal_entry = sync_journal.createEntry();
				journal_entry.setKey("step"+step_number+".target");
				journal_entry.setValue("edit_module");

				journal_entry = sync_journal.createEntry();
				journal_entry.setKey("step"+step_number+".param"+parameter_number+".name");
				journal_entry.setValue("edit_module.code");
				journal_entry = sync_journal.createEntry();
				journal_entry.setKey("step"+step_number+".param"+parameter_number+".value");
				journal_entry.setValue(project.getProperty("start_sync.modules.not_editable.module"+not_editable_module_index+".code"));
				parameter_number++;

				step_number++;
				parameter_number = 0;
			}

			if (project.getProperty("start_sync.change.is_base_update_needed").equals("1")) {
				journal_entry = sync_journal.createEntry();
				journal_entry.setKey("step"+step_number+".target");
				journal_entry.setValue("sync_main_update_change_base_lastsync");

				journal_entry = sync_journal.createEntry();
				journal_entry.setKey("step"+step_number+".confirm");
				journal_entry.setValue("Restart updating change base version? ");

				step_number++;
				parameter_number = 0;

				journal_entry = sync_journal.createEntry();
				journal_entry.setKey("step"+step_number+".target");
				journal_entry.setValue("sync_main_commit_change_base");

				step_number++;
				parameter_number = 0;
			}

			journal_entry = sync_journal.createEntry();
			journal_entry.setKey("step"+step_number+".target");
			journal_entry.setValue("sync_main_merge_change");

			journal_entry = sync_journal.createEntry();
			journal_entry.setKey("step"+step_number+".confirm");
			journal_entry.setValue("Restart merging from MAIN?");

			step_number++;
			parameter_number = 0;

			journal_entry = sync_journal.createEntry();
			journal_entry.setKey("step"+step_number+".target");
			journal_entry.setValue("sync_main_end");

			step_number++;
			parameter_number = 0;


			sync_main_store_journal.addTask(sync_journal);
			sync_main_store_journal.execute();

		]]>
	</script>
	<antcall target="sync_main_continue"/>
</target>

<target name="sync_main_store_journal">
<!-- for internal use -->
<!-- stores plan for synchronization procedure -->
</target>

<target name="sync_main_continue" depends="init" description="Continue synchronizing latest branch and MAIN branch">
	<property file="${devweb.tmpdir}/sync_main.properties" prefix="sync_main"/>
	<script language="javascript">
		<![CDATA[
			importClass(java.io.File);

			current_step_number = 0;
			while (project.getProperty("sync_main.step"+current_step_number+".completed")) { // fast forward to current step
				current_step_number++;
			}

			var saveFile = new File(new File(project.getProperty("devweb.tmpdir")),"sync_main.properties");

			var subtarget = project.getClass().getClassLoader().loadClass("org.apache.tools.ant.Target").newInstance();
			subtarget.setName("sync_main_continue_run_step");
			project.addOrReplaceTarget(subtarget);

			confirm_message = project.getProperty("sync_main.step"+current_step_number+".confirm");

			if (confirm_message && project.getProperty("sync_main.step"+current_step_number+".started")) {
				runner = project.createTask("antcall");
				runner.setTarget("sync_main_continue_confirm");
				param = runner.createParam();
				param.setName("sync_main_continue_confirm.message");
				param.setValue(confirm_message);
				param = runner.createParam();
				param.setName("sync_main_continue_confirm.step");
				param.setValue(current_step_number);
				subtarget.addTask(runner);

				current_step_number++;
			}

			while (target_name = project.getProperty("sync_main.step"+current_step_number+".target")) { // are there more steps?
				saver = project.createTask("propertyfileedit");
				saver.setFile(saveFile);
				saverEntry = saver.createEntry();
				saverEntry.setKey("step"+current_step_number+".started");
				saverEntry.setValue("1");
				subtarget.addTask(saver);

				runner = project.createTask("antcall");
				runner.setTarget(target_name);
				for (parameter_number = 0; parameter_name = project.getProperty("sync_main.step"+current_step_number+".param"+parameter_number+".name");parameter_number++) {
					runner_param = runner.createParam();
					runner_param.setName(parameter_name);
					runner_param.setValue(project.getProperty("sync_main.step"+current_step_number+".param"+parameter_number+".value"));
				}
				subtarget.addTask(runner);

				saver = project.createTask("propertyfileedit");
				saver.setFile(saveFile);
				saverEntry = saver.createEntry();
				saverEntry.setKey("step"+current_step_number+".completed");
				saverEntry.setValue("1");
				subtarget.addTask(saver);

				current_step_number++;
			}
			subtarget.execute();
		]]>
	</script>
</target>

<target name="sync_main_continue_confirm">
<!-- for internal use -->
<!-- asks confirmation whether to restart a synchronization step -->
	<input message="${sync_main_continue_confirm.message}" validargs="yes,no" addproperty="sync_main_continue_confirm.answer"/>
	<script language="javascript">
		<![CDATA[
			if (project.getProperty("sync_main_continue_confirm.answer").equals("yes")) {
				var current_step_number = project.getProperty("sync_main_continue_confirm.step");
				var runner = project.createTask("antcall");
				runner.setTarget(project.getProperty("sync_main.step"+current_step_number+".target"));
				for (parameter_number = 0; parameter_name = project.getProperty("sync_main.step"+current_step_number+".param"+parameter_number+".name");parameter_number++) {
					runner_param = runner.createParam();
					runner_param.setName(parameter_name);
					runner_param.setValue(project.getProperty("sync_main.step"+current_step_number+".param"+parameter_number+".value"));
				}
				sync_main_continue_confirmed_redo.addTask(runner);
				sync_main_continue_confirmed_redo.execute();
			}
		]]>
	</script>
	<propertyfileedit file="${devweb.tmpdir}/sync_main.properties">
		<entry key="step${sync_main_continue_confirm.step}.completed" value="1"/>
	</propertyfileedit>
</target>

<target name="sync_main_continue_confirmed_redo">
<!-- for internal use -->
<!-- restarts a confirmed synchronization step -->
</target>

<target name="sync_main_checkout_main">
<!-- for internal use -->
<!-- checks out main branch for synchronization -->
	<antcall target="checkout_dir">
		<param name="checkout_dir.dir" value="${sync_main.dir}"/>
		<param name="checkout_dir.tag" value=""/>
		<param name="checkout_dir.repository" value="${sync_main.repository}"/>
		<param name="checkout_dir.modules.prefix0" value="sync_main.modules.common.module"/>
		<param name="checkout_dir.modules.prefix1" value="sync_main.modules.new.main.module"/>
		<param name="checkout_dir.modules.prefix2" value="sync_main.modules.old.latest.module"/>
	</antcall>
</target>

<target name="sync_main_merge_segment">
<!-- for internal use -->
<!-- checks out main branch for synchronization -->
	<antcall target="merge_dir">
		<param name="merge_dir.dir" value="${sync_main.dir}"/>
		<param name="merge_dir.start.tag" value="${sync_main_merge_segment.start.tag}"/>
		<param name="merge_dir.end.tag" value="${sync_main_merge_segment.end.tag}"/>
		<param name="merge_dir.repository" value="${sync_main.repository}"/>
		<param name="merge_dir.modules.prefix0" value="sync_main.segment${sync_main_merge_segment.segment.index}.modules.module"/>
	</antcall>
</target>

<target name="sync_main_fake_commit_segment">
<!-- for internal use -->
<!-- checks commitability after merging a segment -->
	<antcall target="commit_dir">
		<param name="commit_dir.fake" value="true"/>
		<param name="commit_dir.dir" value="${sync_main.dir}"/>
		<param name="commit_dir.message" value="${devweb.commit.message.prefix}Synchronized segment ${sync_main_merge_segment.segment.index}"/>
		<param name="commit_dir.repository" value="${sync_main.repository}"/>
		<param name="commit_dir.modules.prefix0" value="sync_main.segment${sync_main_merge_segment.segment.index}.modules.module"/>
	</antcall>
</target>

<target name="sync_main_merge_new_modules">
<!-- for internal use -->
<!-- merges new modules from latest to MAIN -->
	<antcall target="merge_dir">
		<param name="merge_dir.dir" value="${sync_main.dir}"/>
		<param name="merge_dir.start.tag" value=""/>
		<param name="merge_dir.end.tag" value="${sync_main.postsync_version_tag}"/>
		<param name="merge_dir.repository" value="${sync_main.repository}"/> <!-- ???? -->
		<param name="merge_dir.modules.prefix0" value="sync_main.modules.new.latest.module"/>
	</antcall>
</target>

<target name="sync_main_remove_old_modules">
	<script language="javascript">
		<![CDATA[
			
		]]>
	</script>
</target>

<target name="sync_main_refresh_main">
<!-- for internal use -->
	<antcall target="checkout_dir">
		<param name="checkout_dir.dir" value="${sync_main.dir}"/>
		<param name="checkout_dir.tag" value=""/>
		<param name="checkout_dir.repository" value="${sync_main.repository}"/>
		<param name="checkout_dir.modules.prefix0" value="sync_main.modules.common.module"/>
	</antcall>
</target>

<target name="sync_main_tag_main">
<!-- for internal use -->
	<script language="javascript">
		<![CDATA[
			importClass(java.io.File);

			repository_file = new File(new File(project.getProperty("sync_main.dir")), project.getProperty("sync_main.repository"));
			work_path_files = new Array(repository_file);
			for (prefix_index=0; modules_prefix = project.getProperty("sync_main_tag_main.modules.prefix" + prefix_index); prefix_index++) {
				for (module_index=0; work_path = project.getProperty(modules_prefix + module_index + ".work_path"); module_index++) {
					work_path_files[work_path_files.length] = (new File(repository_file, work_path)).getCanonicalFile();
				}
			}
			for (i = 0; i < work_path_files.length; i++) {
				tagger = project.createTask("cvs");
				tagger.setQuiet(true);
				tagger.setCvsRoot(project.getProperty("devweb.project.cvsroot"));
				tagger.setDest(work_path_files[i].getParentFile());
				tagger.setCommand("tag");
				tagger.addCommandArgument(project.getProperty("sync_main_tag_main.tag"));
				tagger.addCommandArgument(work_path_files[i].getName());
				sync_main_tag_main_sub1.addTask(tagger);
			}
			sync_main_tag_main_sub1.execute();
		]]>
	</script>
</target>

<target name="sync_main_tag_main_sub1">
<!-- for internal use -->
<!-- runs CVS commands to tag MAIN modules -->
</target>

<target name="sync_main_commit_main">
<!-- for internal use -->
<!-- commits merged MAIN -->
	<antcall target="commit_dir">
		<param name="commit_dir.fake" value="${sync_main_commit_main.fake}"/>
		<param name="commit_dir.dir" value="${sync_main.dir}"/>
		<param name="commit_dir.message" value="${devweb.commit.message.prefix}Synchronized with Changelogic up to version ${sync_main.main.postsync_version}"/>
		<param name="commit_dir.repository" value="${sync_main.repository}"/>
		<param name="commit_dir.modules.prefix0" value="sync_main.modules.common.module"/>
		<param name="commit_dir.modules.prefix1" value="sync_main.modules.main.new.module"/>
		<param name="commit_dir.modules.prefix2" value="sync_main.modules.main.old.module"/>
	</antcall>
</target>

<target name="sync_main_update_change_base_lastsync">
<!-- for internal use -->
<!-- rewinds change base version to previous synchronized version -->
	<antcall target="merge_dir">
		<param name="merge_dir.dir" value=".."/>
		<param name="merge_dir.start.tag" value="${sync_main.change.base_tag}"/>
		<param name="merge_dir.end.tag" value="${sync_main.latest.last_sync_tag}"/>
		<param name="merge_dir.repository" value="${sync_main.repository}"/>
		<param name="merge_dir.modules.prefix0" value="sync_main.modules.common.module"/>
	</antcall>
</target>

<target name="sync_main_commit_change_base">
<!-- for internal use -->
<!-- commits rewinded change base version -->
	<antcall target="commit_dir">
		<param name="commit_dir.dir" value=".."/>
		<param name="commit_dir.message" value="${devweb.commit.message.prefix}Base version ${sync_main.latest.last_sync_tag}"/>
		<param name="commit_dir.repository" value="${sync_main.repository}"/>
		<param name="commit_dir.modules.prefix0" value="sync_main.modules.common.module"/>
	</antcall>
</target>

<target name="sync_main_merge_change">
<!-- for internal use -->
<!-- merges updates from MAIN branch to current change -->
	<antcall target="merge_dir">
		<param name="merge_dir.dir" value=".."/>
		<param name="merge_dir.start.tag" value="${sync_main.main.last_sync_tag}"/>
		<param name="merge_dir.end.tag" value="${sync_main.main.postsync_tag}"/>
		<param name="merge_dir.repository" value="${sync_main.repository}"/>
		<param name="merge_dir.modules.prefix0" value="sync_main.modules.common.module"/>
	</antcall>
</target>

<target name="sync_main_end">
<!-- for internal use -->
<!-- notifies server about synchronization end -->
	<property file="change.properties"/>
	<get src="${devweb.url}&amp;event=End_synchronization&amp;change_id=${change.id}" dest="${devweb.tmpdir}/end_sync.properties"/>
	<property file="${devweb.tmpdir}/end_sync.properties" prefix="end_sync"/>
	<delete file="${devweb.tmpdir}/end_sync.properties"/>
	<echo message="${end_sync.devweb.notice}"/>
	<echo message="${end_sync.devweb.warning}"/>
	<fail if="end_sync.devweb.error" message="${end_sync.devweb.error}" />
</target>

<!-- END OF MAIN SYNCHRONIZATION TARGETS -->

<target name="remove_cvs_entry">
<!-- for internal use -->
<!-- removes a file from CVS/Entries or CVS/Entries.Log -->
		<taskdef name="rmentry" classname="com.changelogic.ant.taskdefs.CvsEntryRemove"/>
		<rmentry file="${remove_cvs_entry.entry}"/>
</target>

<target name="upgrade" description="Upgrade the devweb build script.">
	<fail unless="devweb.rooturl" message="DevWeb location is not set"/>
	<get src="${devweb.rooturl}/lib/devweb-build.xml" dest="${ant.file}"/>
</target>

<target name="update_maven_version">
<!-- for internal use -->
<!-- updates version string in project.properties file (used by Maven) -->
	<property file="${update_maven_version.dir}/devweb-personal.properties" prefix="update_maven_version.settings" />
	<property file="${update_maven_version.dir}/devweb-project.properties" prefix="update_maven_version.settings" />
	<property file="${update_maven_version.dir}/change.properties" prefix="update_maven_version.change_id"/>
	<property file="${update_maven_version.dir}/version.properties" prefix="update_maven_version.version"/>

	<script language="javascript">
		<![CDATA[
		if (project.getProperty("update_maven_version.settings.devweb.version.maven.property")) {
			if (!project.getProperty("update_maven_version.settings.devweb.version.properties.names.stage")) {
				project.setProperty("update_maven_version.settings.devweb.version.properties.names.stage","stage");
			}
			if (!project.getProperty("update_maven_version.settings.devweb.version.properties.names.milestone")) {
				project.setProperty("update_maven_version.settings.devweb.version.properties.names.milestone","milestone");
			}
			if (!project.getProperty("update_maven_version.settings.devweb.version.properties.names.submilestone")) {
				project.setProperty("update_maven_version.settings.devweb.version.properties.names.submilestone","submilestone");
			}
			if (!project.getProperty("update_maven_version.settings.devweb.version.properties.names.version")) {
				project.setProperty("update_maven_version.settings.devweb.version.properties.names.version","version");
			}
			
			stage =	project.getProperty("update_maven_version.version."+project.getProperty("update_maven_version.settings.devweb.version.properties.prefix")+"."+project.getProperty("update_maven_version.settings.devweb.version.properties.names.stage"));
			milestone = project.getProperty("update_maven_version.version."+project.getProperty("update_maven_version.settings.devweb.version.properties.prefix")+"."+project.getProperty("update_maven_version.settings.devweb.version.properties.names.milestone"));
			submilestone = project.getProperty("update_maven_version.version."+project.getProperty("update_maven_version.settings.devweb.version.properties.prefix")+"."+project.getProperty("update_maven_version.settings.devweb.version.properties.names.submilestone"));
			version = project.getProperty("update_maven_version.version."+project.getProperty("update_maven_version.settings.devweb.version.properties.prefix")+"."+project.getProperty("update_maven_version.settings.devweb.version.properties.names.version"));
			
			if (stage != null && milestone != null && submilestone != null && version != null) {
				versionString = stage+"."+milestone+"."+submilestone+"."+version;

				if (project.getProperty("update_maven_version.change_id.change.id")) {
					versionString = versionString+"-change"+project.getProperty("update_maven_version.change_id.change.id");
				}

				writeVersion = project.createTask("propertyfileedit");
				writeVersion.setFile(new java.io.File(new java.io.File(project.getProperty("update_maven_version.dir"),"project.properties")));
				versionNumber = writeVersion.createEntry();
				versionNumber.setKey(project.getProperty("update_maven_version.settings.devweb.version.maven.property"));
				versionNumber.setValue(versionString);

				update_maven_version.addTask(writeVersion);

				add_project_properties = project.createTask("cvs");
				add_project_properties.setDest(new java.io.File(project.getProperty("update_maven_version.dir")));
				add_project_properties.setCvsRoot(project.getProperty("devweb.project.cvsroot"));
				add_project_properties.setCommand("add");
				add_project_properties.addCommandArgument("project.properties");
				add_project_properties.setFailOnError(false);
				update_maven_version.addTask(add_project_properties);

				if (project.getProperty("update_maven_version.commit")) {
					commiter = project.createTask("cvs");
					commiter.setDest(new java.io.File(project.getProperty("update_maven_version.dir")));
					commiter.setCvsRoot(project.getProperty("devweb.project.cvsroot"));
					commiter.setCommand("commit");
					commiter.addCommandArgument("-m");
					commiter.addCommandArgument(project.getProperty("update_maven_version.commit.message"));
					commiter.addCommandArgument("project.properties");
					commiter.setFailOnError(true);
					update_maven_version.addTask(commiter);
				}
			}
		}
		]]>
	</script>
</target>

<target name="process_environment_adjustments" unless="devweb.ignore_environment_adjustments">
<!-- for internal use -->
<!-- handles missing/excessive environment adjustments -->
	<script language="javascript">
		<![CDATA[
			prefix = project.getProperty("process_environment_adjustments.prefix");
			for (adjustment_mode = 0; adjustment_mode < 2; adjustment_mode++) {
				adjustment_mode_keyword = adjustment_mode ? "excessive" : "missing";
				for (environment_adjustment_index = 0; environment_adjustment_id = project.getProperty(prefix+"."+adjustment_mode_keyword+"_adjustments.adjustment"+environment_adjustment_index+".id"); environment_adjustment_index++) {
					environment_adjustment_short_description = project.getProperty(prefix+"."+adjustment_mode_keyword+"_adjustments.adjustment"+environment_adjustment_index+".short_description");
					runner = project.createTask("antcall");
					runner.setTarget("process_environment_adjustment");
					param = runner.createParam();
					param.setName("process_environment_adjustment.environment_adjustment_id");
					param.setValue(environment_adjustment_id);
					param = runner.createParam();
					param.setName("process_environment_adjustment.short_description");
					param.setValue(environment_adjustment_short_description);
					param = runner.createParam();
					param.setName("process_environment_adjustment.mode");
					param.setValue(adjustment_mode_keyword);
					process_environment_adjustments_sub1.addTask(runner);
				}
			}
			process_environment_adjustments_sub1.execute();
		]]>
	</script>
</target>

<target name="process_environment_adjustments_sub1">
<!-- for internal use -->
<!-- executes handling for each environment adjustment -->
</target>

<target name="process_environment_adjustment">
<!-- for internal use -->
<!-- handles one missing/excessive environment adjustment -->

	<condition property="process_environment_adjustment.expected_reaction" value="APPLY">
		<equals arg1="${process_environment_adjustment.mode}" arg2="missing"/>
	</condition>
	<!-- else: -->
	<property name="process_environment_adjustment.expected_reaction" value="REVOKE"/>

	<echo message="An adjustment is ${process_environment_adjustment.mode} in your environment:"/>
	<echo message="${process_environment_adjustment.environment_adjustment_id} - ${process_environment_adjustment.short_description}"/>
	<input message="Did you ${process_environment_adjustment.expected_reaction} this adjustment in your environment?" validargs="yes,no" addproperty="process_environment_adjustment.comply_answer"/>
	<fail unless="process_environment_adjustment.comply_answer" message="You have to answer the question."/>
	<condition property="process_environment_adjustment.complied">
		<equals arg1="${process_environment_adjustment.comply_answer}" arg2="yes"/>
	</condition>
	<antcall target="process_environment_adjustment_comply"/>
</target>

<target name="process_environment_adjustment_comply" if="process_environment_adjustment.complied">
<!-- for internal use -->
<!-- updates environment compliance with the environment adjustment -->

	<condition property="process_environment_adjustment_comply.add_compliance" value="1">
		<equals arg1="${process_environment_adjustment.mode}" arg2="missing"/>
	</condition>
	<!-- else: -->
	<property name="process_environment_adjustment_comply.add_compliance" value="0"/>

	<get src="${devweb.url}&amp;event=Toggle_environment_compliance&amp;environment_adjustment_id=${process_environment_adjustment.environment_adjustment_id}&amp;add=${process_environment_adjustment_comply.add_compliance}" dest="${devweb.tmpdir}/comply.properties"/>
	<property file="${devweb.tmpdir}/comply.properties" prefix="comply"/>
	<delete file="${devweb.tmpdir}/comply.properties"/>
	<echo message="${comply.devweb.notice}"/>
	<echo message="${comply.devweb.warning}"/>
	<fail if="comply.devweb.error" message="${comply.devweb.error}"/>
</target>


<target name="test_self" description="Run self-tests for this script.">
<!-- Runs self-test -->
<!-- Currently the only test is to make sure the file is parseable -->
</target>

</project>
