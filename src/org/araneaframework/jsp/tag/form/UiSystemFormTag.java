/**
 * Copyright 2006 Webmedia Group Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
**/

package org.araneaframework.jsp.tag.form;				

import java.io.Writer;
import javax.servlet.jsp.JspException;
import javax.servlet.jsp.PageContext;
import org.araneaframework.jsp.UiException;
import org.araneaframework.jsp.tag.UiBaseTag;
import org.araneaframework.jsp.util.UiUtil;


/**
 * System form tag. System form maps into HTML form.
 * 
 * @author Oleg MÃ¼rk
 */
public abstract class UiSystemFormTag extends UiBaseTag {
	public final static String COUNTER_KEY_REQUEST = "org.araneaframework.jsp.ui.basic.UiSystemFormTag.FORM_COUNTER";	
	public final static String ID_KEY_REQUEST = "org.araneaframework.jsp.ui.basic.UiSystemFormTag.ID";
	
	public final static String GET_METHOD = "GET";
	public final static String POST_METHOD = "POST";
  
	public final static String SYSTEM_FORM_ID_KEY = "systemFormId";
  
  //
  // Attributes
  //
	
	/**
	 * @jsp.attribute
	 * 	type = "java.lang.String"
	 * 	required = "false"
	 * 	description = "Form name, autogenerated if omitted."
	 */
	public void setId(String id) throws JspException {
		this.id = (String)evaluate("id", id, String.class);
	}
	
	/**
	 * @jsp.attribute
	 *  type = "java.lang.String" 
	 * 	required = "true" 
	 *  description = "Submitting method: GET or POST." 
	 */
	public void setMethod(String method) throws JspException {
    this.method = (String)evaluateNotNull("method", method, String.class);
    
		if (!this.method.equals(GET_METHOD) && 
				!this.method.equals(POST_METHOD))
					throw new UiException("Wrong form method value '" + method + "'");		
	}

	/**
	 * @jsp.attribute
	 * 	type = "java.lang.String"
	 * 	required = "false"
	 * 	description = "Form data encoding type." 
	 */
	public void setEnctype(String enctype) throws JspException {
		this.enctype = (String)evaluate("enctype", enctype, String.class);
	}
  
  //
  // Implementation
  //

	protected int before(Writer out) throws Exception {
		super.before(out);
		
		// Error check
		if (getAttribute(ID_KEY_REQUEST, PageContext.REQUEST_SCOPE) != null)
			throw new UiException("System form cannot be nested");										
			
		// Compute id
		id = id == null ? UiSystemFormTag.generateId(pageContext) : id;
    
		pushAttribute(ID_KEY_REQUEST, id, PageContext.REQUEST_SCOPE);		
        pushAttribute(SYSTEM_FORM_ID_KEY, id, PageContext.REQUEST_SCOPE);    
		
		// Write form 
		UiUtil.writeOpenStartTag(out, "form");
		UiUtil.writeAttribute(out, "id", id);
		UiUtil.writeAttribute(out, "name", id);		
		UiUtil.writeAttribute(out, "method", method);
		UiUtil.writeAttribute(out, "enctype", enctype);
	    UiUtil.writeAttribute(out, "accept-charset", getAcceptCharset());
	    UiUtil.writeAttribute(out, "action", getFormAction());
	    UiUtil.writeAttribute(out, "style", "margin: 0px");
		UiUtil.writeCloseStartTag(out);
							
		// Script
	  // Initialize the uiProperties object for this systemform
	  // This object will store validators for UiLib forms contained in this systemform.      
		UiUtil.writeOpenStartTag(out, "script");
		UiUtil.writeAttribute(out, "type", "text/javascript");
		UiUtil.writeCloseStartTag(out);
	  out.write("uiSystemFormContext(");
	  UiUtil.writeScriptString(out, id);
	  out.write(");\n");
		UiUtil.writeEndTag(out, "script");

		// Continue
		return EVAL_BODY_INCLUDE;		
	}
		
	protected int after(Writer out) throws Exception {
		UiUtil.writeEndTag(out, "form");
		
		// Continue
		super.after(out);
		return EVAL_PAGE;      
	}	
	
	protected void init() {
		super.init();
		
		id = null;
    method = null;
    enctype = null;    
	}
    
   protected abstract String getAcceptCharset();
   protected abstract String getFormAction();
  
  public static String generateId(PageContext pageContext){
    Long counter = (Long)pageContext.getAttribute(COUNTER_KEY_REQUEST, PageContext.REQUEST_SCOPE);
    if (counter == null)
      counter = new Long(0);
    else
      counter = new Long(counter.longValue() + 1);
    pageContext.setAttribute(COUNTER_KEY_REQUEST, counter, PageContext.REQUEST_SCOPE);
    return "system_form_" + counter;
  }

	protected String id;
	protected String method;
	protected String enctype;
}
