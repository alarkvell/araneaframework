<?xml version="1.0" encoding="UTF-8"?>
<project 
	xmlns:ivy="antlib:org.apache.ivy.ant"
	basedir="." 
	default="build" 
	name="Aranea" >

	<description>
		Code build script.
	</description>

	<property file="version.properties"/>
	<property name="project.title" value="Aranea Web Framework"/>
	<property name="project.version" value="${araneaframework.version} (Build ver-${version.stage}_${version.milestone}_${version.submilestone}_${version.version})"/>

	<property name="lib.dir" value="lib"/>
	<property name="dist.dir" value="dist"/>

	<property name="distname" value="aranea-mvc-${araneaframework.version}"/>

	<property name="ivy.settings.file" value="ivysettings.xml"/>

	<path id="classpath">
		<fileset dir="${lib.dir}/build/" includes="*.jar"/>
		<fileset dir="${lib.dir}/runtime/" includes="*.jar"/>
	</path>

	<!-- Clean up build system results -->
	<target name="clean-all" depends="clean" description="Clean up build system results">
		<ant dir="examples/common" target="clean" inheritall="false"/>
		<ant dir="examples/main" target="clean" inheritall="false"/>
		<ant dir="examples/serviceHelloWorld" target="clean" inheritall="false"/>
		<ant dir="examples/serviceHelloName" target="clean" inheritall="false"/>
		<ant dir="examples/widgetHelloName" target="clean" inheritall="false"/>
		<ant dir="examples/blank" target="clean" inheritall="false"/>
		<ant dir="tests" target="clean" inheritall="false"/>
	</target>

	<!-- Clean up build system results -->
	<target name="clean" description="Clean up build and dist directories">
		<delete dir="build" failonerror="false"/>
		<delete dir="${dist.dir}" failonerror="false"/>
		<delete dir="etc/js/aranea" includes="*.js" failonerror="false"/>
	</target>

	<target name="fetch-libs" depends="init-ivy" description="Download all necessary libraries">
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact].[ext]" conf="build,runtime" />
	</target>

  <property name="ivy.report.dir" value="build/reports/ivy" />
  <!-- Generates a report of dependencies -->
  <target name="ivy-report" depends="init-ivy" description="Generates a report of dependencies">
    <ivy:resolve file="ivy.xml" />
    <ivy:report todir="${ivy.report.dir}"/>
  </target>
  
	<!-- Internal target for publishing milestones and releases to araneaframework ivy repository -->
	<target name="publish" depends="init-ivy"
		description="Publishes the JAR from dist directory to ivy repository.">

    
		<ivy:resolve conf="runtime"/>

		<mkdir dir="publishtmp"/>
		<copydir dest="publishtmp" src="${dist.dir}" includes="**/*.jar" flatten="true"/>

		<ivy:publish
			artifactspattern="publishtmp/[artifact].[ext]"
			revision="${araneaframework.version}" 
			pubrevision="${araneaframework.version}" 
			status="${araneaframework.status}"
			resolver="repository"
			overwrite="true"
			pubdate="now"
		/>

		<delete dir="publishtmp"/>
	</target>

	<target name="init" description="Initializes the build system">
		<mkdir dir="build" />
	</target>

	<target name="init-ivy" description="Initializes ivy path and settings">
		<path id="ivy.lib.path">
			<fileset dir="lib/ivy" includes="*.jar"/>
		</path>

		<taskdef resource="org/apache/ivy/ant/antlib.xml"
	             uri="antlib:org.apache.ivy.ant"
	             classpathref="ivy.lib.path"/>

		<ivy:settings file="${ivy.settings.file}" />
	</target>

	<target name="build" depends="jar" description="Builds the Aranea source code" />

	<target name="build-all" depends="build" description="Build the code and examples">
		<ant dir="examples/common" target="build" inheritall="false"/>
		<ant dir="examples/blank" target="build" inheritall="false"/>
		<ant dir="examples/main" target="build" inheritall="false"/>
		<ant dir="examples/serviceHelloWorld" target="build" inheritall="false"/>
		<ant dir="examples/serviceHelloName" target="build" inheritall="false"/>
		<ant dir="examples/widgetHelloName" target="build" inheritall="false"/>
	</target>

	<target name="compile" depends="init"
		description="Compiles source code from src directory">

		<mkdir dir="build/classes" />

		<!--Compile Java source files-->
		<javac destdir="build/classes"
			debug="on"
			debuglevel="lines,vars,source"
			encoding="utf-8"
			target="1.5"
			source="1.5"
			srcdir="src"
			deprecation="yes"
		>
			<classpath refid="classpath"/>
			<include name="**/*.java" />
		</javac>
	</target>

	<target name="make-manifest" description="Creates Aranea manifest for JAR files">
		<mkdir dir="build/tmp/"/>
		<manifest file="build/tmp/MANIFEST.MF" id="aranea-manifest">
			<attribute name="Main-Class" value="org.araneaframework.AraneaVersion"/>
			<attribute name="Implementation-Title" value="${project.title}"/>
			<attribute name="Implementation-Version" value="${project.version}"/>
		</manifest>
	</target>

	<target name="js" description="Compresses aranea*.js JavaScript files">
		<condition property="suffix" value=".exe" else="">
			<os family="windows"/>
		</condition>
		<chmod file="${basedir}/etc/js/cruncher/js${suffix}" perm="u+rx"/>
		<exec executable="${basedir}/etc/js/cruncher/js${suffix}" dir="etc/js/aranea/">
			<arg line="src/aranea.js aranea.js"/>
		</exec>
		<exec executable="${basedir}/etc/js/cruncher/js${suffix}" dir="etc/js/aranea/">
			<arg line="src/aranea-behaviour.js aranea-behaviour.js"/>
		</exec>
		<exec executable="${basedir}/etc/js/cruncher/js${suffix}" dir="etc/js/aranea/">
			<arg line="src/aranea.js aranea.js"/>
		</exec>
		<exec executable="${basedir}/etc/js/cruncher/js${suffix}" dir="etc/js/aranea/">
			<arg line="src/aranea-contextmenu.js aranea-contextmenu.js"/>
		</exec>
		<exec executable="${basedir}/etc/js/cruncher/js${suffix}" dir="etc/js/aranea/">
			<arg line="src/aranea-keyboard.js aranea-keyboard.js"/>
		</exec>
		<exec executable="${basedir}/etc/js/cruncher/js${suffix}" dir="etc/js/aranea/">
			<arg line="src/aranea-locale.js aranea-locale.js"/>
		</exec>
		<exec executable="${basedir}/etc/js/cruncher/js${suffix}" dir="etc/js/aranea/">
			<arg line="src/aranea-modalbox.js aranea-modalbox.js"/>
		</exec>
		<exec executable="${basedir}/etc/js/cruncher/js${suffix}" dir="etc/js/aranea/">
			<arg line="src/aranea-popups.js aranea-popups.js"/>
		</exec>
		<exec executable="${basedir}/etc/js/cruncher/js${suffix}" dir="etc/js/aranea/">
			<arg line="src/aranea-rsh.js aranea-rsh.js"/>
		</exec>
		<exec executable="${basedir}/etc/js/cruncher/js${suffix}" dir="etc/js/aranea/">
			<arg line="src/aranea-tree.js aranea-tree.js"/>
		</exec>
		<exec executable="${basedir}/etc/js/cruncher/js${suffix}" dir="etc/js/aranea/">
			<arg line="src/aranea-ui.js aranea-ui.js"/>
		</exec>
		<exec executable="${basedir}/etc/js/cruncher/js${suffix}" dir="etc/js/aranea/">
			<arg line="src/aranea-util.js aranea-util.js"/>
		</exec>
	</target>

	<target name="jar" depends="js,compile,make-manifest" description="Builds Aranea JAR file">
		<mkdir dir="${dist.dir}" />
		<mkdir dir="${dist.dir}/modules" />
		<mkdir dir="${dist.dir}/integration" />

		<!-- MODULES -->

		<jar destfile="${dist.dir}/modules/aranea-core.jar" compress="true" manifest="build/tmp/MANIFEST.MF">
			<fileset dir="build/classes">
				<include name="org/araneaframework/*"/>
			</fileset>

			<fileset dir="src">
				<include name="org/araneaframework/core/**/*"/>
			</fileset>
		</jar>

		<jar destfile="${dist.dir}/modules/aranea-framework.jar" compress="true" manifest="build/tmp/MANIFEST.MF">
			<fileset dir="build/classes">
				<include name="org/araneaframework/framework/**/*"/>
			</fileset>

			<fileset dir="src">
				<include name="org/araneaframework/framework/**/*"/>
			</fileset>
		</jar>

		<jar destfile="${dist.dir}/modules/aranea-http.jar" compress="true" manifest="build/tmp/MANIFEST.MF">
			<fileset dir="build/classes">
				<include name="org/araneaframework/http/**/*"/>
			</fileset>

			<fileset dir="src">
				<include name="org/araneaframework/http/**/*"/>
			</fileset>
		</jar>

		<jar destfile="${dist.dir}/modules/aranea-backend.jar" compress="true" manifest="build/tmp/MANIFEST.MF">
			<fileset dir="build/classes">
				<include name="org/araneaframework/backend/**/*"/>
			</fileset>

			<fileset dir="src">
				<include name="org/araneaframework/backend/**/*"/>
			</fileset>
		</jar>

		<jar destfile="${dist.dir}/modules/aranea-uilib.jar" compress="true" manifest="build/tmp/MANIFEST.MF">
			<fileset dir="build/classes">
				<include name="org/araneaframework/uilib/**/*"/>
			</fileset>

			<fileset dir="src">
				<include name="org/araneaframework/uilib/**/*"/>
			</fileset>
			<fileset dir="etc" includes="resource/**/*"/>
		</jar>

		<jar destfile="${dist.dir}/modules/aranea-jsp.jar" compress="true" manifest="build/tmp/MANIFEST.MF">
			<fileset dir="build/classes">
				<include name="org/araneaframework/jsp/**/*"/>
				<exclude name="org/araneaframework/jsp/engine/**/*"/>
			</fileset>

			<fileset dir="src">
				<include name="org/araneaframework/jsp/**/*"/>
				<exclude name="org/araneaframework/jsp/engine/**/*"/>
			</fileset>

			<fileset dir="etc" includes="js/**/*"/>
			<fileset dir="etc" includes="css/**/*"/>
			<fileset dir="etc" includes="gfx/**/*"/>
			<fileset dir="etc" includes="*.tld"/>
			<fileset dir="etc" includes="*.tcd"/>
		</jar>

		<!-- INTEGRATION -->

		<jar destfile="${dist.dir}/integration/aranea-integration-spring.jar" compress="true" manifest="build/tmp/MANIFEST.MF">
			<fileset dir="build/classes">
				<include name="org/araneaframework/integration/spring/**/*"/>
			</fileset>

			<fileset dir="src">
				<include name="org/araneaframework/integration/spring/**/*"/>
			</fileset>

			<fileset dir="etc" includes="conf/**/*"/>
		</jar>

		<!-- ALL-IN-ONE -->

		<jar destfile="${dist.dir}/aranea.jar" compress="true" manifest="build/tmp/MANIFEST.MF">
			<fileset dir="build/classes">
				<include name="org/araneaframework/**/*"/>
			</fileset>
			<fileset dir="src">
				<include name="org/araneaframework/**/*"/>
			</fileset>

			<fileset dir="etc" excludes="build/"/>
		</jar>
	</target>

	<target name="javadoc" description="Generates JavaDoc from Aranaea source code">
		<mkdir dir="${dist.dir}/doc/javadoc/" />
		<javadoc 
			classpathref="classpath"
			encoding="UTF-8"
			docencoding="UTF-8"
			packagenames="org.araneaframework.*" 
			sourcepath="src"
			destdir="${dist.dir}/doc/javadoc/">
			<link href="http://java.sun.com/j2se/1.4.2/docs/api/"/>
			<link href="http://static.springframework.org/spring/docs/1.2.6/api/"/>
			<tag name="jsp.tag" enabled="false" casesensitive="false"/>
			<tag name="jsp.attribute" enabled="false" casesensitive="false"/>
		</javadoc>
	</target>

	<target name="javadoc-zip" description="Generates JavaDoc from Aranaea source code and zips it">
		<mkdir dir="${dist.dir}/doc/javadoc/" />
		<javadoc packagenames="org.araneaframework.*" sourcepath="src" destdir="${dist.dir}/doc/javadoc/"/>

		<zip destfile="${dist.dir}/doc/javadoc.zip">
			<zipfileset dir="${dist.dir}/doc/javadoc" prefix="javadoc"/>
		</zip>
	</target>

	<!-- Build internal documentation -->
	<target name="doc" depends="init, javadoc" description="Build internal documentation">
		<ant target="build" dir="doc/reference" />
		<ant target="build" dir="doc/tutorial" />
		<ant target="build" dir="doc/intro" />
	</target>

	<!-- test the system -->
	<target name="run-tests" depends="init, build" description="Run the junit tests">
		<ant target="run-tests" dir="tests"/>
	</target>

	<target name="dist" description="Builds downloadable distribution.">
		<mkdir dir="build/tmp/dist"/>

		<antcall target="clean-all"/>
		<ant dir="doc/reference" target="clean" inheritall="false"/>
		<ant dir="doc/tutorial" target="clean" inheritall="false"/>
		<ant dir="doc/intro" target="clean" inheritall="false"/>
		<mkdir dir="${dist.dir}"/>

		<copy todir="build/tmp/dist">
			<fileset dir=".">
				<include name="src/**/*"/>
				<include name="tests/**/*"/>
				<include name="etc/**/*"/>
				<include name="examples/**/*"/>
				<include name="examples/common/**/*"/>
				<include name="tests/**/*"/>
				<include name="lib/**/*"/>
				<include name="build.xml"/>
				<include name="*.txt"/>
				<include name="ivy*"/>
				<include name="version.properties"/>

				<exclude name="ivyrep.properties"/>
				<exclude name="**/*lck"/>
			</fileset>
		</copy>

		<touch file="build/tmp/dist/ivyrep.properties"/>

		<antcall target="build-all"/>
		<ant dir="doc/reference" target="clean" inheritall="false"/>
		<ant dir="doc/tutorial" target="clean" inheritall="false"/>

		<antcall target="doc"/>

		<mkdir dir="build/tmp/dist/dist"/>

		<ant dir="tests" target="build" inheritall="false"/>
		<mkdir dir="build/tmp/dist/dist/modules"/>
		<copy todir="build/tmp/dist/dist/modules" file="tests/dist/aranea-tests.jar"/>

		<copy todir="build/tmp/dist/dist">
			<fileset dir="${dist.dir}">
				<include name="**/*.jar"/>
			</fileset>
		</copy>

		<copy todir="build/tmp/dist">
			<fileset dir="${dist.dir}">
				<include name="doc/**/*"/>
			</fileset>
		</copy>

		<mkdir dir="build/tmp/dist/examples/common/dist"/>

		<copy todir="build/tmp/dist/examples/common/dist">
			<fileset dir="examples/common/dist">
				<include name="*"/>
			</fileset>
		</copy>

		<zip destfile="${dist.dir}/${distname}.zip">
			<zipfileset dir="build/tmp/dist" prefix="${distname}"/>
		</zip>
	</target>

	<target name="checkstyle" description="The CheckStyle code metrics task that generates checkstyle_report.xml.">
		<taskdef resource="checkstyletask.properties" classpathref="classpath"/>
		<checkstyle config="checkstyle_checks.xml">
			<fileset dir="src" includes="**/*.java"/>
			<formatter type="xml" tofile="checkstyle_report.xml"/>
		</checkstyle>
	</target>

	<!-- ======================== CHANGELOGIC TARGETS ======================== -->

	<property name="changelogic-build.xml" value="changelogic-build.xml"/>

	<target name="edit" description="Switches to a change in order to start editing it">
		<ant antfile="${changelogic-build.xml}" target="edit_change" inheritAll="false"/>
	</target>

	<target name="edit_module" description="Retrieves a module in order to start editing it">
		<ant antfile="${changelogic-build.xml}" target="edit_module" inheritAll="false"/>
	</target>

	<target name="update_base" description="Updates base version of current change">
		<ant antfile="${changelogic-build.xml}" target="update" inheritAll="false"/>
	</target>

	<target name="update_base_continue" description="Continues updating base version of current change">
		<ant antfile="${changelogic-build.xml}" target="update_continue" inheritAll="false"/>
	</target>

	<target name="update_base_cancel" description="Cancels updating base version of current change">
		<ant antfile="${changelogic-build.xml}" target="update_cancel" inheritAll="false"/>
	</target>

	<target name="update" description="Updates files from CVS (checks if the change is in an appropriate state)">

		<ant antfile="${changelogic-build.xml}" target="refresh" inheritAll="false"/>
	</target>

	<target name="update_all" description="Updates files from CVS, including non-editable modules">
		<ant antfile="${changelogic-build.xml}" target="refresh_all" inheritAll="false"/>
	</target>

	<target name="commit" description="Commits files to CVS (checks if th change is in an appropriate state)">
		<ant antfile="${changelogic-build.xml}" target="commit" inheritAll="false"/>
	</target>

	<target name="end_edit" description="Finishes editing of current change, enlists it for reviewing">
		<ant antfile="${changelogic-build.xml}" target="refresh" inheritAll="false"/>
		<!-- Optional: update local files (recommended) -->

		<!-- Any project-specific preconditions for ending development should be inserted HERE -->

		<ant antfile="${changelogic-build.xml}" target="commit_change" inheritAll="false"/>
	</target>

	<target name="integrate" description="Starts integration build of a change">
		<ant antfile="${changelogic-build.xml}" target="integrate" inheritAll="false"/>
	</target>

	<target name="integrate_continue" description="Continues integration of a change">
		<ant antfile="${changelogic-build.xml}" target="integrate_continue" inheritAll="false"/>
	</target>

	<target name="integrate_cancel" description="Cancels integration of a change">
		<ant antfile="${changelogic-build.xml}" target="integrate_cancel" inheritAll="false"/>
	</target>

	<target name="integrate_step" description="Continues integration of a change from step entered by integrator">
		<ant antfile="${changelogic-build.xml}" target="integrate_step" inheritAll="false"/>
	</target>

	<target name="upload_diff" description="Uploads diff without ending change to review the changes">
		<ant antfile="${changelogic-build.xml}" target="upload_diff" inheritAll="false"/>
	</target>

	<!-- End of targets to copy -->

	<!-- You might also want these: -->

	<target name="changelogic_reset" description="Resets the state of Changelogic client application">
		<ant antfile="${changelogic-build.xml}" target="reset" inheritAll="false"/>
	</target>

	<target name="change_auth_token" description="Generates new Changelogic authentication code">
		<ant antfile="${changelogic-build.xml}" target="change_auth_token" inheritAll="false"/>
	</target>

	<target name="changelogic_upgrade" description="Upgrades Changelogic client to current server version">
		<ant antfile="${changelogic-build.xml}" target="upgrade" inheritAll="false"/>
	</target>

	<target name="test_checkout" description="Tests local CVS checkout control files for inconsistencies">
		<ant antfile="${changelogic-build.xml}" target="test_checkout" inheritAll="false"/>
	</target>

	<target name="sync_main" description="Synchronizes repository MAIN branch and latest version">
		<ant antfile="${changelogic-build.xml}" target="sync_main" inheritAll="false"/>
	</target>

	<target name="sync_main_continue" description="Continues synchronizing repository MAIN branch and latest version">
		<ant antfile="${changelogic-build.xml}" target="sync_main_continue" inheritAll="false"/>
	</target>

	<target name="checkout_version" description="Checks out a version from repository">

		<ant antfile="${changelogic-build.xml}" target="checkout_version" inheritAll="false">
			<!-- You may specify target directory by uncommenting next line (default is ".."):
			<property name="checkout_version.dir" location=".." />
			-->
		</ant>
	</target>

	<target name="checkout_change" description="Checks out a change from repository">
		<ant antfile="${changelogic-build.xml}" target="checkout_change" inheritAll="false">
			<!-- You may specify target directory by uncommenting next line (default is ".."):
			<property name="checkout_change.dir" location=".." />
			-->
		</ant>
	</target>

</project>
