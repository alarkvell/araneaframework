<?xml version='1.0' encoding="iso-8859-1"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.3CR3//EN"
                      "../../support/docbook-dtd/docbookx.dtd"
[]>
<!--
  Copyright 2006 Webmedia Group Ltd.
 
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<article>
    <articleinfo>
        <title>Aranea - Java Web Framework Construction and Integration Kit</title>
        <titleabbrev>Aranea</titleabbrev>
				<subtitle>White Paper</subtitle>
        <authorgroup>
					<author>
						<firstname>Jevgeni</firstname>
						<surname>Kabanov</surname>
					</author>
        </authorgroup>        
    </articleinfo>

    <sect1>    
      <title>Overview</title>
            
      <para>
        Aranea is a <emphasis>Java Hierarchical Model-View-Controller Web Framework</emphasis> that provides a common simple approach to building the web application components, reusing custom or general GUI logic and extending the framework. The framework is assembled from a number of independent modules with well-defined responsibilities and thus can be easily reconfigured to perform new and unexpected tasks. The controller is separated into a hierarchy of components that can react to user or system events. The framework is completely view agnostic, but provides a thorough library of JSP custom tags that target building GUIs without writing a line of HTML. All components and modules are simple <emphasis>Plain Old Java</emphasis> classes without any XML mappings and thus usual Object-Oriented design techniques can be applied. Aranea manages the component field persistence automatically and inherently supports nested state.
      </para>      
    </sect1>
    
    <sect1>    
      <title>Goals</title>
      
      <sect2>
        <title>Fast to learn</title>
        Thanks to a very small number of concepts and abstractions Aranea can be understood very quickly. Additionally thanks to a number of examples it should be easy to pick up most typical use cases without reading the documentation. A thorough reference manual and Javadoc is available to check the subtle details.
      </sect2>     
      
      <sect2>
        <title>Easy to use</title>
        We believe that a programmer should focus on writing the application logic and that writing web applications should no be any harder than writing desktop applications. To support this goal we try to encapsulate all the boilerplate logics (like managing the state, navigation or request parsing) into the framework behind simple and concise Java APIs.
      </sect2>          

      <sect2>
        <title>Easy to extend</title>
Whether you want to make a framework plug-in, custom GUI element or custom application component Aranea has only one type of abstraction&mdash;component<footnote><para>Components have actually two subtypes&mdash;<emphasis>services</emphasis> and <emphasis>widgets</emphasis>.</para></footnote> and making them is as easy as writing usual application logic. There are no special APIs you have to learn and no special mappings you have to create.  
      </sect2>    
      
      <sect2>
        <title>Easy to debug</title>
Since there is no behind-the-scene magic occuring and all logic is in the component itself it is very easy to step through the path left by any bug. The framework also produces readable log messages and meaningful exceptions. 
      </sect2>           
    </sect1>

    <sect1>    
      <title>Features</title>
      
      <sect2>
        <title>Small core</title>
Aranea core consists of ca. 10 interfaces, some conventions concerning how to use them and a number of default or base implementations. 
      </sect2>           
    
      <sect2>
        <title>Component-oriented</title>
In Aranea everything is a component and everything is reusable. The framework itself is assembled from a number of components with specific responsibilities and programmer also writes the code in terms of components. The components have very simple interface which has about 4-6 methods.
      </sect2>  
      
      <sect2>
        <title>Event-driven</title>
The whole programming model is based on components reacting to events generated by the user. One typically doesn't have to deal with request or determine what button was pressed since the event handler just calls the appropriate listener or method.
      </sect2>   
      
      <sect2>
        <title>Plain Old Java</title>
The components in Aranea are pure Java objects supporting polymorphism, inheritance and encapsulation. What's more this components are created by the programmer without any behind-the-scene magic, and there are no XML mappings, code generation or bytecode modification going on.
      </sect2>  
      
      <sect2>
        <title>Explicit state management</title>
Aranea component fields are persistent. However instead of limiting the programmer to a number of state scopes ("application", "session", "page", ...) Aranea does not mandate any state management and leaves it to the specific plug-ins. Every component lives until explicitly removed, however that doesn't mean that the programmer will have to bother with it or that the whole application will be in the user session&mdash;in Aranea programmers and even system programmers typically do not have to think about state at all. Every component will live as long as it is needed and the framework will take care to cleanup its state after that.
      </sect2>  
      
      <sect2>
        <title>Powerful navigation</title>
Aranea out-of-the-box supports the so called flows and flow nesting, which allows to create nested processes that preserve the previous process state and restore it when finished (similar to modal dialogs in conventional GUI). However unlike other frameworks Aranea doesn't limit you to having just one flow&mdash;one can have several flows running in paralell or another flow running inside of the current one. In it fact can be easily extend to support any type of GUI abstractions, like windows or portals.
      </sect2>  
      
      <sect2>
        <title>Type safe</title>
Since there is no playing around with session attributes and no XML mappings the Java compiler is able to verify that all types and classes match and navigating between components is as easy as holding <keycap>Ctrl</keycap> and clicking.
      </sect2>      
      
      <sect2>
        <title>Secure</title>
Since components are created explicitly when needed and removed when they are needed no more there is no need to protect the controller URLs with roles or privileges. Instead it is enough to assert security when creating the components (which is typically considerably easier, as one doesn't have to assert privileges without which it would be impossible to get so far).        
      </sect2>   
      
      <sect2>
        <title>Testable</title>
Testing pure Java is as easy as it sounds, and there is no need for any J2EE containers. And since Aranea can be used with <emphasis>Dependency Injection</emphasis> containers like Spring, it makes testing even easier.  
      </sect2>           
      
      <sect2>
        <title>AJAX-ready</title>
        Aranea supports natively both partial page updates and AJAX-enabled components like autocompletion search boxes. Aranea can also be used as a controller for a purely AJAX application.
      </sect2>                                                                
    </sect1>     

    <sect1>    
      <title>Out-of-the-box</title>
      
      <sect2>
        <title>Data Binding</title>
        
One of the most common tasks in Web is <emphasis>data binding</emphasis>&mdash;reading the values from the request, validation and conversion is handled by the Aranea <emphasis>forms</emphasis>. Forms are just a type of Aranea component, which provides a GUI abstraction of the HTML controls and allows to bind the data read from the request to user beans (or other data structures like maps). Forms support hierarchical data structures, change detection, custom validation and conversion, and much more.         
      </sect2>  
      
      <sect2>
        <title>Database-Backed Lists</title>
        
Another common programming task is to display user a list (also called grid) that can be broken in pages, sorted and filtered. Aranea supports it using a custom component <emphasis>lists</emphasis>. Lists support both in-memory and database backends, allowing to generate database queries that return the exact data that is displayed<footnote><para>Currently only Oracle backend is supported, but adding other databases support should be easy.</para></footnote>. This allows to make lists taking memory for the currently displayed items only, which support tables with many thousands of records.        
      </sect2>   
      
      <sect2>
        <title>JSP tag library</title>
<para>        
Though Aranea is view-agnostic by design it comes bundled by default with a custom JSP tag library that renders the GUI elements into HTML. The JSP tag library is made to isolate the HTML completely, and in Aranea projects typically programmer describes the GUI using abstractions like <emphasis>containers</emphasis> and <emphasis>layouts</emphasis> rather than coding pure HTML. This allows to encapsulate the design and client-side behaviour and alter it easily on need. 
</para>        

<para>
Aranea JSP tags provide a number of useful features like client-side validation and keyboard events. Additionally to make new tags one doesn't have to know much more than the usual tag APIs (though a number of helper classes are provided to ease the new tag development).
</para>
      </sect2>             

      <sect2>
        <title>Popup Isolation</title>
        
        Opening several browser windows for one user session may be dangerous, since same components might modify same session attributes. Aranea isolates the popup window state by creating <emphasis>session threads</emphasis> which hold the individual state for each popup.
      </sect2>  
      
      <sect2>
        <title>File Upload</title>
        
        Aranea supports file upload using Apache Jakarta Commons FileUpload, but integrates it with forms to allow seamless usage as just one more control.
      </sect2>  
      
      <sect2>
        <title>Multi-submit Protection</title>
        
        A typical problem in Web applications is when user clicks a submit button several times and submits several request with same content. Aranea handles such situations gracefully just ignoring the subsequent requests and rendering the resulting page for the last request.
      </sect2>     

      <sect2>
        <title>And More</title>
        
        Aranea also has the following GUI components (among other):
        <itemizedlist spacing="compact">
          <listitem>Calendar</listitem>
          <listitem>Tab container</listitem>
          <listitem>Wizard</listitem>
          <listitem>TreeView</listitem>
          <listitem>Editable lists</listitem>
        </itemizedlist>        
      </sect2>                        
    </sect1>    
    
    
    <sect1>
      <title>Integration</title>
      <para>
      As Aranea component API is very simple and small a number of integration scenarios are possible. Currently Aranea has been integrated only with internal frameworks and Spring, though integration with other Open-Source and standard frameworks is planned.
      </para>
      
      <para>
      Spring integration is used for configuring Aranea framework as well as to lookup service implementations. Aranea also allows to use Spring Web functionality (though not Spring MVC).
      </para>
            
      <para>
      Next are described a number of planned or possible integration scenarios:
                        
      <variablelist>
        <varlistentry>
          <term>Aranea controller + third-party presentation framework</term>
          <listitem>This scenario allows to use the powerful Aranea hierarchical controller, while using some other system to render the actual markup (e.g. JSF, Tapestry, Wicket).</listitem>
        </varlistentry>
        <varlistentry>
          <term>Hosting third-party GUI elemenys</term>
          <listitem>Allows to reuse GUI controls made for a third-party framework APIs (e.g. JSF, Tapestry, Wicket).</listitem>
        </varlistentry>        
        <varlistentry>
          <term>Third party controller + Aranea GUI &amp; presentation</term>
          <listitem>Allows to migrate step-by-step from the old framework while taking advantage immediately of Aranea reusable components.</listitem>
        </varlistentry>
        <varlistentry>
          <term>Aranea controller + Aranea GUI + third party presentation</term>
          <listitem>Allows to render Aranea GUI components using different templating engines (e.g. supporting HTML prototyping).</listitem>
        </varlistentry>
        <varlistentry>
          <term>Using Aranea core for interoperability</term>
          <listitem>Allows to use Aranea core to abstract away from the component model and reuse e.g. Wicket components in JSF and vice virsa.</listitem>
        </varlistentry>
        <varlistentry>
          <term>Using Aranea in different container</term>
          <listitem>Allows to use Aranea without servlets (e.g. with portlets).</listitem>
        </varlistentry>        
      </variablelist>
      </para>
    </sect1>

    <sect1>
      <title>Environment and Deployment</title>

      <para>
        Aranea supports Java SE starting from version 1.3.x. Aranea core and most of the framework does not require a Servlet or Java EE API, but the default setup will run on a container supporting Servlet API version 2.3 or later and JSP 1.2 or later. Aranea has been tested to work with the following Application Servers:
        <itemizedlist spacing="compact">
          <listitem>
            BEA WebLogic 7.0, 8.1, 9.0, 9.1
          </listitem>
          <listitem>
            Oracle Application Server 9i, 10g
          </listitem>
          <listitem>
            Tomcat 4.x, 5.x
          </listitem>
          <listitem>
            Jetty 5.x
          </listitem>
        </itemizedlist>
      </para>
    </sect1>

    <sect1>
      <title>License and Community</title>

      <para>
        Aranea is released under Open-Source license <emphasis>Apache Public License 2.0</emphasis>, which allows to use it in commercial projects. The Aranea community site with mailing lists and documentation is <literal>araneaframework.org</literal>. The CVS repository is available under <literal>sourceforge.net</literal> project <literal>araneaframework</literal>.
      </para>
    </sect1>

    <sect1>
      <title>
        Success Stories and Maturity
      </title>

      <para>
        Currently Aranea is successfully used in the following projects
        <itemizedlist>
          <listitem>eHL (Estonian healthcare infosystem for several major hospitals)</listitem>
          <listitem>Elion (major Estonian telecommunications provider backoffice project)</listitem>
          <listitem>PRIA (major Estonian public office)</listitem>
        </itemizedlist>
      </para>
    </sect1>
</article>

