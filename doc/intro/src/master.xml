<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.3CR3//EN"
"../../support/docbook-dtd/docbookx.dtd">
<!--
  Copyright 2006 Webmedia Group Ltd.
 
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<article>
  <articleinfo>
    <title>Introduction to Aranea</title>

    <titleabbrev>Aranea Intro</titleabbrev>

    <authorgroup>
      <author>
        <firstname>Jevgeni</firstname>

        <surname>Kabanov</surname>
      </author>
    </authorgroup>
  </articleinfo>

  <sect1 id="hello-world">
    <title>Hello World</title>

    <para>As an introduction to Aranea, we present the example that has become
    classical in computer literature for learning new languages and
    technologiesâ€”"Hello World!". Our variant of "Hello World!" will display a
    form where one can insert his name (shown on <xref
    linkend="example-name" />) and after clicking the button personalized
    greeting is displayed (shown on <xref linkend="example-hello" />).</para>

    <figure id="example-name">
      <title>Insert your name display</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="../images/example-name.png" format="PNG" />
        </imageobject>
      </mediaobject>
    </figure>

    <figure id="example-hello">
      <title>Greeting display</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="../images/example-hello.png" format="PNG" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>This example demonstrates the way Aranea applications are assembled
    from independent widgets, the way widgets receive and process events, the
    way the widgets communicate and navigate among each other and how they can
    render themselves.</para>

    <para>Most Aranea applications need a root widget class. In our very
    simple case it will be the <literal>NameWidget</literal> defined on <xref
    linkend="example-name-widget" />. The widget package is not important and
    we assume it to be <literal>example</literal>.</para>

    <figure id="example-name-widget">
      <title>NameWidget.java</title>

      <programlisting role="java">public class NameWidget extends BaseUIWidget {
  protected void init() throws Exception {        
    setViewSelector("name");
  }
  
  public void handleEventHello() throws Exception {
    String name = (String) getCurrentInput().getGlobalData().get("name");
    getFlowCtx().replace(new HelloWidget(name), null);
  }  
}</programlisting>
    </figure>

    <para>The widget selects the JSP that will be used for rendering by
    calling the <literal>setViewSelector("name")</literal>, which in this case
    will be the JSP with path <literal>/WEB-INF/jsp/name.jsp</literal>
    (certainly this location can be altered, but this is outside the example
    scope). This JSP can be seen on the <xref linkend="example-name-jsp" />
    (usually the root JSP tags are present only in topmost JSP
    template).</para>

    <figure id="example-name-jsp">
      <title>/WEB-INF/jsp/name.jsp</title>

      <programlisting role="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;jsp:root 
  xmlns:jsp="http://java.sun.com/JSP/Page" 
  xmlns:ui="http://araneaframework.org/tag-library/template" version="1.2"&gt;
  &lt;ui:root&gt;
    &lt;ui:viewPort&gt; 
      &lt;head&gt;
        &lt;ui:importScripts/&gt;
            
        &lt;title&gt;Hello World!&lt;/title&gt;
      &lt;/head&gt;     
             
      &lt;ui:body&gt;
        &lt;ui:systemForm method="GET"&gt;
            Insert your name: &lt;input type="text" name="name"/&gt;&lt;br/&gt;&lt;br/&gt;            
            &lt;ui:eventButton labelId="#Say hello" eventId="hello"/&gt;      
        &lt;/ui:systemForm&gt;
      &lt;/ui:body&gt;
    &lt;/ui:viewPort&gt;
  &lt;/ui:root&gt;  
&lt;/jsp:root&gt;</programlisting>
    </figure>

    <para>The only interesting parts are the
    <literal>&lt;ui:systemForm/&gt;</literal> that will render the actual HTML
    form and <literal>&lt;ui:eventButton&gt;</literal> that will render a
    button with a label "Say hello!" that will send the
    <literal>hello</literal> event to the <literal>NameWidget</literal> (which
    will call its <literal>handleEventHello()</literal> method).</para>

    <para>When that will occur the first line of
    <literal>handleEventHello()</literal> method <programlisting role="java">String name = (String) getCurrentInput().getGlobalData().get("name");</programlisting>
    will read the data submitted by the form input field "name". The second
    line of this method <programlisting role="java">getFlowCtx().replace(new HelloWidget(name), null);</programlisting>
    will create a new instance of <literal>HelloWidget</literal> passing it
    the read <literal>name</literal> as a constructor argument. Then we
    replace the current widget in the flow with a new one, which causes the
    <literal>NameWidget</literal> instance to be destroyed and the
    <literal>HelloWidget</literal> instance to become active. The
    <literal>HelloWidget</literal> can be seen on figure <xref
    linkend="example-hello-widget" /></para>

    <figure id="example-hello-widget">
      <title>HelloWidget.java</title>

      <programlisting role="java">public class HelloWidget extends BaseUIWidget {
  private String name;
  
  public HelloWidget(String name) {
    this.name = name;
  }

  protected void init() throws Exception {
    putViewData("name", name);    
    setViewSelector("hello");        
  }
}</programlisting>
    </figure>

    <para><literal>HelloWidget</literal> will save the constructor argument
    and pass it to the view (in our case JSP) using
    <literal>putViewData("name", name);</literal>. It will then delegate
    rendering to the JSP shown on <xref linkend="example-hello-jsp" />.</para>

    <figure id="example-hello-jsp">
      <title>/WEB-INF/jsp/hello.jsp</title>

      <programlisting role="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;jsp:root 
  xmlns:jsp="http://java.sun.com/JSP/Page" 
  xmlns:c="http://java.sun.com/jstl/core"
  xmlns:ui="http://araneaframework.org/tag-library/template" version="1.2"&gt;
  &lt;ui:root&gt;
    &lt;ui:viewPort&gt; 
      &lt;ui:widgetContext&gt;
        &lt;head&gt;
          &lt;ui:importScripts/&gt;
              
          &lt;title&gt;Hello World!&lt;/title&gt;
        &lt;/head&gt;     
        
        &lt;ui:body&gt;
          Hello &lt;c:out value="${viewData.name}"/&gt;!
        &lt;/ui:body&gt;
      &lt;/ui:widgetContext&gt;
    &lt;/ui:viewPort&gt;
  &lt;/ui:root&gt;  
&lt;/jsp:root&gt;</programlisting>
    </figure>

    <para>Finally we will need to deploy the example as a web application. The
    simplest way to configure Aranea is to pass the application starting
    widget to its dispatcher servlet.</para>

    <figure id="example-web-xml">
      <title>/WEB-INF/web.xml</title>

      <programlisting role="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE web-app PUBLIC 
  "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN" 
  "http://java.sun.com/dtd/web-app_2_3.dtd"&gt;

&lt;web-app&gt;
  &lt;!-- Aranea session cleanup listener --&gt;
  &lt;listener&gt;
    &lt;listener-class&gt;
      org.araneaframework.http.core.StandardSessionListener
    &lt;/listener-class&gt;
  &lt;/listener&gt;

  &lt;!-- Aranea dispatcher servlet --&gt;
   &lt;servlet&gt;
      &lt;servlet-name&gt;araneaServlet&lt;/servlet-name&gt;
      &lt;servlet-class&gt;org.araneaframework.integration.spring.AraneaSpringDispatcherServlet&lt;/servlet-class&gt;
      &lt;init-param&gt;
      &lt;param-name&gt;araneaApplicationStart&lt;/param-name&gt;
      &lt;param-value&gt;example.NameWidget&lt;/param-value&gt;
      &lt;/init-param&gt;      
      &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
   &lt;/servlet&gt;
   
   &lt;!-- Aranea dispatcher servlet mapping --&gt;
   &lt;servlet-mapping&gt;
      &lt;servlet-name&gt;araneaServlet&lt;/servlet-name&gt;
      &lt;url-pattern&gt;/main/*&lt;/url-pattern&gt;
   &lt;/servlet-mapping&gt;
&lt;/web-app&gt;</programlisting>
    </figure>
  </sect1>
</article>