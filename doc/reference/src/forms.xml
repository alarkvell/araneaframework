<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2006 Webmedia Group Ltd.
 
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0
 
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<chapter id="forms">
  <title>Forms and Data Binding</title>

  <para>One of the most common tasks in web applications is gathering user
  input, converting it to model objects and then validating it. This is
  typically referred to as <emphasis>data binding</emphasis> and every major
  web framework has support for this activity. In this chapter we will
  introduce the widgets and supporting API that implement this tasks.</para>

  <sect1>
    <title>Forms</title>

    <para>Unlike many other frameworks, in Aranea request processing,
    validating and data binding is not a separate part of the framework, but
    just another component. Specially it is widget
    <literal>org.araneaframework.uilib.form.FormWidget</literal> and some
    support widgets. A typical form is shown on <xref
    linkend="person-form" />.</para>

    <figure id="person-form">
      <title>Form example</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="../images/form.png" format="PNG" />
        </imageobject>
      </mediaobject>
    </figure>

    <sect2>
      <title>FormWidget</title>

      <para>Let's say we have a <literal>Person</literal> model JavaBean that
      looks like this:</para>

      <programlisting role="java">public class Person {
  private Long id;
  private String name;
  private String surname;   
  private String phone;

  public Long getId() {return id;}
  public void setId(Long id) {this.id = id;}
  
  public String getName() {return name;}
  public void setName(String name) {this.name = name;}
  
  public String getSurname() {return surname;}
  public void setSurname(String surname) {this.surname = surname;}
  
  public String getPhone() {return phone;}
  public void setPhone(String phone) {this.phone = phone;}
}</programlisting>

      <para>A typical form will be created and used like this:</para>

      <programlisting role="java">...
private BeanFormWidget personForm;
private Person person;
...
protected void init() {
  ...
  personForm = new BeanFormWidget(Person.class);
  addWidget("personForm", personForm);

  personForm.addBeanElement("name", "#Name", new TextControl(new Long(3), null), true);
  personForm.addBeanElement("surname", "#Last name", new TextControl(), true);
  personForm.addBeanElement("phone", "#Phone no", new TextControl(), true);
  ...
  person = lookupPersonService().getSomePerson();
  personForm.writeBean(person);
  ...
}
...
</programlisting>

      <para>Note that here we basically do three things: <variablelist
          spacing="compact">
          <varlistentry>
            <term>Create and register the form</term>

            <listitem>
               The line 

              <literal>new BeanFormWidget(Person.class)</literal>

               creates a new form widget that is associated with the 

              <emphasis>JavaBean</emphasis>

               model class 

              <literal>Person</literal>

              . The line 

              <literal>addWidget("personForm", personForm)</literal>

               initializes and registers the form allowing it to function. 
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Add form fields</term>

            <listitem>
               The line 

              <literal>personForm.addBeanElement("name", "#Name", new
              TextControl(new Long(3), null), true)</literal>

               adds an element associated with the JavaBean property "name" (this is also the identifier of the field), with a label "Name" (labels in Aranea are localizable by default and "#" escapes a non-localizable string), a text box control with a minimal length of 3 and that is mandatory. 
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Write JavaBean</term>

            <listitem>
               The line 

              <literal>personForm.writeBean(person)</literal>

               writes the data in the JavaBean properties to the corresponding form fields. 
            </listitem>
          </varlistentry>
        </variablelist></para>

      <para>Now that we have created the form we show how to process events,
      validate and read the request data. The following example code should be
      in the same widget as the previous:</para>

      <programlisting role="java">...
private void handleEventSave() {
  if (personForm.convertAndValidate()) {
   personForm.readBean(person);
   ...
   lookupPersonService()().savePerson(person);
  }
}
...</programlisting>

      <para>This code will execute if an event "save" comes and will do the
      following: <itemizedlist spacing="compact">
          <listitem>
             Convert the request data to the JavaBean types and validate it according to the rules specified in controls (e.g. minimal length). Wrapping event body in 

            <literal>if (personForm.convertAndValidate()) {...}</literal>

             is a generic idiom in Aranea as we believe that explicitly leads to flexibility. By default the values will be just read from request without any parsing, conversion or validation and the latter will be done only after the 

            <literal>convertAndValidate()</literal>

             call. This allows for example to validate only a subform or even one element, by calling only their 

            <literal>convertAndValidate()</literal>

             method. 
          </listitem>

          <listitem>
             Read the 

            <literal>person</literal>

             object from the form, filling it in with the user data. Note that the same object that was originally read from the business layer is used here and forms take care of merging the new data and preserving the old. 
          </listitem>
        </itemizedlist></para>

      <para>Note the use of the <literal>getValueByFullName()</literal>
      method. Form API contains several such methods (named
      <literal>*ByFullName()</literal>), which allow to access fields,
      controls and values using full dot-separated element names.</para>

      <para>If you have a composite JavaBean (containing other JavaBeans) you
      may want to create a form with a similar structure. Let's say that our
      <literal>Person</literal> bean contains an <literal>Address</literal>
      under "address" JavaBean property:</para>

      <programlisting role="java">...
personForm = new BeanFormWidget(Person.class);
addWidget("personForm", personForm);
...
BeanFormWidget addrForm = personForm.addBeanSubForm("address");
addrForm.addBeanElement("postalCode", "#Postal code", new TextControl(), true);
addrForm.addBeanElement("street", "#Street", new TextControl(), true);
...</programlisting>

      <para>Note that the fields will be available from the main form using a
      dot-separated name, e.g. <literal>String street = (String)
      personForm.getValueByFullName("address.street")</literal>.</para>
    </sect2>

    <sect2>
      <title>Controls</title>

      <para>At the core of the data binding API lies the notion of
      <emphasis>controls</emphasis>
      (<literal>org.araneaframework.uilib.form.Control</literal>). Controls
      are the widgets that do the actual parsing of the request parameters and
      correspond to the controls found in HTML forms, like textbox, textarea,
      selectbox, button, ... Additionally controls also do a bit of validating
      the submitted data. For example textbox control validates the minimum
      and maximum string length, since the HTML tag can do the same.
      Programmer usually does not read values from <literal>Control</literal>
      directly, but from <literal>FormElement</literal> that takes care of
      converting value of <literal>Control</literal> to
      <literal>FormElement</literal> <literal>Data</literal>.</para>

      <para>The following example shows how to create a control:</para>

      <programlisting role="java">...
TextControl textBox = new TextControl(new Long(10), null);
...</programlisting>

      <para>This code will create a textbox with a minimal length of 10. Note
      that this code does not yet put the control to work, as controls are
      never used without forms, which are reviewed in the next section.</para>

      <para>Follows a table of standard controls all found in
      <literal>org.araneaframework.uilib.form.control</literal> package:
      <informaltable frame="topbot">
          <tgroup cols="2">
            <colspec colwidth="1*" />

            <colspec colwidth="2*" />

            <thead>
              <row>
                <entry>Control</entry>

                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry><literal>ButtonControl</literal></entry>

                <entry>A control that represents a HTML form button.</entry>
              </row>

              <row>
                <entry><literal>CheckboxControl</literal></entry>

                <entry>A control that represents a binary choice and is
                usually rendered as a checkbox.</entry>
              </row>

              <row>
                <entry><literal>DateControl</literal></entry>

                <entry>A date selection control that allows to choose a date.
                Supports custom formats of date input and output.</entry>
              </row>

              <row>
                <entry><literal>DateTimeControl</literal></entry>

                <entry>A date and time selection control that allows to choose
                a date with a corresponding time. Supports custom formats of
                date and time input and output.</entry>
              </row>

              <row>
                <entry><literal>DisplayControl</literal></entry>

                <entry>A control that can be used to render a read-only value
                that will not be submitted with an HTML form.</entry>
              </row>

              <row>
                <entry><literal>FileUploadControl</literal></entry>

                <entry>A control that can be used to upload files to the
                server.</entry>
              </row>

              <row>
                <entry><literal>FloatControl</literal></entry>

                <entry>A textbox control that constrains the text to be
                floating-point numbers. Can also check the allowed minimum and
                maximum limits.</entry>
              </row>

              <row>
                <entry><literal>HiddenControl</literal></entry>

                <entry>A control that can be used to render an invisible value
                that will be submitted with an HTML form.</entry>
              </row>

              <row>
                <entry><literal>NumberControl</literal></entry>

                <entry>A textbox control that constrains the text to be
                integer numbers. Can also check the allowed minimum and
                maximum limits.</entry>
              </row>

              <row>
                <entry><literal>TimeControl</literal></entry>

                <entry>A time selection control that allows to choose a time
                of day. Supports custom formats of time input and
                output.</entry>
              </row>

              <row>
                <entry><literal>TextareaControl</literal></entry>

                <entry>A multirow textbox control that can constrain the
                inserted text minimal and maximal length.</entry>
              </row>

              <row>
                <entry><literal>TextControl</literal></entry>

                <entry>A simple textbox control with one row of text that can
                constrain the inserted text minimal and maximal
                length.</entry>
              </row>

              <row>
                <entry><literal>AutoCompleteTextControl</literal></entry>

                <entry><literal>TextControl</literal> with autocompletion
                capability.</entry>
              </row>

              <row>
                <entry><literal>TimestampControl</literal></entry>

                <entry>Similar to <literal>DateControl</literal> but works
                with <literal>java.sql.TimeStamp</literal>.</entry>
              </row>

              <row>
                <entry><literal>SelectControl</literal></entry>

                <entry>A control that allows to select one of many choices
                (may be rendered as a dropdown list or option buttons).
                Ensures that the submitted value was one of the
                choices.</entry>
              </row>

              <row>
                <entry><literal>MultiSelectControl</literal></entry>

                <entry>A control that allows to select several from many
                choices (may be rendered as a multiselect list or checkbox
                list). Ensures that the submitted values are a subset of the
                choices.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>

      <para><literal>SelectControl</literal> and
      <literal>MultiSelectControl</literal> deserve a special mention, as they
      need a bit more handling than the rest. The difference comes from the
      fact that we also need to handle the selectable options, which we refer
      to as <literal>DisplayItem</literal>. Each
      <literal>DisplayItem</literal> has a label, a string value and can be
      disabled. Disabled display items cannot be selected in neither select
      box nor multiselect box.</para>

      <para>Both <literal>SelectControl</literal> and
      <literal>MultiSelectControl</literal> implement the
      <literal>DisplayItemContainer</literal> interface that allows to
      manipulate the <literal>DisplayItem</literal>:</para>

      <programlisting role="java">interface DisplayItemContainer {
  void addItem(DisplayItem item);
  void addItems(Collection items);
  void clearItems();
  List getDisplayItems();
  int getValueIndex(String value);
}</programlisting>

      <para>In addition to this interface we also provide a
      <literal>DisplayItemUtil</literal> that provides some support methods on
      display items. These include the method
      <literal>addItemsFromBeanCollection</literal> that allows to add the
      items to a (multi)select control from a business method returning a
      collection of model JavaBean objects (which is one of the most common
      use cases). So a typical select control will be filled as
      follows:</para>

      <programlisting role="java">SelectControl control = new SelectControl();
control.addItem(new DisplayItem(null, "- choice -"));
DisplayItemUtil.addItemsFromBeanCollection(
  control,
  lookupMyService().getMyItemCollection(),
  "value",
  "label");</programlisting>

      <para>Controls can also listen to user events. For example
      <literal>ButtonControl</literal> can react to an
      <literal>onClick</literal> event, while most others can react to an
      <literal>onChange</literal> event. The only thing needed to receive the
      control events is to register an appropriate event listener:</para>

      <programlisting role="java">...
SelectControl selControl = new SelectControl();
FormElement selEl = form.addBeanElement("clientId", "#Client id", selControl, true);
selControl.addOnChangeEventListener(new OnChangeEventListener() {
  public void onChange() {
    //We convert and validate one element only as the rest of the form
    //might be invalid
    if (selEl.convertAndValidate()) {
      Long clientId = (Long) selEl.getValue();
      //Now we can use the client id to do whatever we want
      //E.g. update another select control
    }
  }
});
...</programlisting>

      <para><literal>onChange</literal> events are also produced by text boxes
      and similar, so the user input can processed right after the user has
      finished it.</para>
    </sect2>

    <sect2>
      <title>Constraints</title>

      <para>Though controls provide some amount of validation they are limited
      only to the rules that can be controlled on the client-side. To support
      more diverse rules Aranea has
      <literal>org.araneaframework.uilib.form.Constraint</literal>, that
      allows to put any logical and/or business validation rules. Typically
      constraints are used as follows:</para>

      <programlisting role="java">...
myForm.addBeanElement("registration", "#Registration", new DateControl(), true);
myForm.getElement("registration").setConstraint(new AfterTodayConstraint(false));
...</programlisting>

      <para>The
      <literal>org.araneaframework.uilib.form.constraint.AfterTodayConstraint</literal>
      makes sure that the date is today or later, with the boolean parameter
      indicating whether today is allowed. The constraint will validate if the
      form or the element in question is validated (e.g.
      <literal>convertAndValidate()</literal> is called) and will show an
      error message to the user, if the constraint was not satisfied. The
      error message is customizable using localization and involves the label
      of the field being validated.</para>

      <para>The following is a more complex example that shows how to use
      constraints that apply to more than one field, and how to combine
      constraints using logical expressions:</para>

      <programlisting role="java">...
searchForm = new FormWidget();

//Adding form controls
searchForm.addElement("clientFirstName", "#Client first name", 
  new TextControl(), new StringData(), false);
searchForm.addElement("clientLastName", "#Client last name", 
  new TextControl(), new StringData(), false);

searchForm.addElement("clientAddressTown", "#Town", 
  new TextControl(), new StringData(), false);
searchForm.addElement("clientAddressStreet", "#Street", 
  new TextControl(), new StringData(), false);

//First searching scenario
AndConstraint clientNameConstraint = new AndConstraint();
clientNameConstraint.addConstraint(
  new NotEmptyConstraint(searchForm.getElementByFullName("clientFirstName")));
clientNameConstraint.addConstraint(
  new NotEmptyConstraint(searchForm.getElementByFullName("clientLastName")));

//Second searching scenario
AndConstraint clientAddressConstraint = new AndConstraint();
clientAddressConstraint.addConstraint(
  new NotEmptyConstraint(searchForm.getElementByFullName("clientAddressTown")));
clientAddressConstraint.addConstraint(
  new NotEmptyConstraint(searchForm.getElementByFullName("clientAddressStreet")));

//Combining scenarios
OrConstraint searchConstraint = new OrConstraint();    
searchConstraint.addConstraint(clientNameConstraint);
searchConstraint.addConstraint(clientAddressConstraint);

//Setting custom error message
searchConstraint.setCustomErrorMessage("Not enough data for search!");

//Setting constraint
searchForm.setConstraint(searchConstraint);

//Putting the widget
addWidget("searchForm", searchForm);    
...</programlisting>

      <para>The example use case is a two scenario search—either both client
      first name and client last name fields are filled in or both town and
      street address fields are filled in, otherwise an error message "Not
      enough data for search!" is shown. The constraints will be validated
      when <literal>convertAndValidate()</literal> method is called on
      <literal>searchForm</literal>. Note that the constraint is added to the
      form itself, rather than to its elements—this is a typical idiom, when
      the constraint involves several elements.</para>

      <para>Table of standard <literal>Constraint</literal>s. <informaltable
          frame="topbot">
          <tgroup cols="2">
            <colspec colwidth="1*" />

            <colspec colwidth="2*" />

            <thead>
              <row>
                <entry>Constraint</entry>

                <entry>Purpose</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry><literal>AfterTodayConstraint</literal></entry>

                <entry>Field constraint, checks that field contains
                <literal>Date</literal> later than current date.</entry>
              </row>

              <row>
                <entry><literal>NotEmptyConstraint</literal></entry>

                <entry>Field constraint, checks that field contains non-empty
                value.</entry>
              </row>

              <row>
                <entry><literal>NumberInRangeConstraint</literal></entry>

                <entry>Field constraint, checks that number in a field belongs
                on given range (integer only).</entry>
              </row>

              <row>
                <entry><literal>StringLengthInRangeConstraint</literal></entry>

                <entry>Field constraint, checks that length of a string in a
                field falls within given boundaries.</entry>
              </row>

              <row>
                <entry><literal>RangeConstraint</literal></entry>

                <entry>Multiple field constraint, checks that value of one
                field is lower than value of other field. Field values must
                <literal>Comparable</literal>.</entry>
              </row>

              <row>
                <entry><literal>AndConstraint</literal></entry>

                <entry>Composite constraint, checks that all subconstraints
                are satisfied.</entry>
              </row>

              <row>
                <entry><literal>OrConstraint</literal></entry>

                <entry>Composite constraint, checks that at least one
                subconstraint is satisfied.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>

      <para>There are two constraints that deserve a special mention. One of
      them is <literal>OptionalConstraint</literal> that will only let its
      subconstraint to validate the field, if the field has been submitted by
      user (it is very useful for instance when non-mandatory fields must
      nevertheless follow some pattern, whereas empty input should still be
      allowed).</para>

      <para>The other constraint is called
      <literal>GroupedConstraint</literal>. It is useful in cases when
      different constraints should be activated depending on the particular
      state of the component (a typical use case is that some groups of fields
      are made mandatory in different states of document approval). The
      constraint is created using the <literal>ConstraintGroupHelper</literal>
      as follows:</para>

      <programlisting role="java">...
ConstraintGroupHelper groupHelper = new ConstraintGroupHelper();
AndConstraint andCon = new AndConstraint();
andCon.addConstraint(
  groupHelper.createGroupedConstraint(new NotEmptyConstraint(field1), "group1"));
andCon.addConstraint(
  groupHelper.createGroupedConstraint(new NotEmptyConstraint(field2), "group1"));
andCon.addConstraint(
  groupHelper.createGroupedConstraint(new NotEmptyConstraint(field3), "group2"));
andCon.addConstraint(
  groupHelper.createGroupedConstraint(new NotEmptyConstraint(field4), "group2"));
form.setConstraint(andCon);

//Now only field1 and field2 will be required from user!
groupHelper.setActiveGroup("group1");
...</programlisting>

      <sect3>
        <title>Custom Constraints</title>

        <para>It is a very common need to validate some additional logic for a
        particular field (e.g. a field must follow some particular pattern).
        In this case it is comfortable to create a custom constraint. Most
        often the constraint is associated with one field only, so we will
        extend the <literal>BaseFieldConstraint</literal>, which supports this
        particular idiom:</para>

        <programlisting role="java">...
public class PersonIdentifierConstraint extends BaseFieldConstraint {
  public void validateConstraint() {
    if (!PersonUtil.validateIdentifier(getValue()) {
      addError("Field '" + getLabel() + "' is not a valid personal identifier");
    }
  }
}
...</programlisting>

        <para>Note that we can use <literal>getValue()</literal> that contains
        the converted value of the field. We can also use the fields label via
        <literal>getLabel()</literal>. We might also want to localize the
        message and in such a case you will find
        <literal>MessageUtil</literal> to contain some helpful methods.</para>

        <para>If we need to validate more than one field we should extend the
        <literal>BaseConstraint</literal> and take those fields into the
        constructor. In this case the developer will have to provide this
        fields to the constraint and the constraint should be added to the
        enclosing form.</para>
      </sect3>
    </sect2>

    <sect2>
      <title>Data</title>

      <para>The typical use of forms includes associating the form fields with
      JavaBean properties. However this is not always possible, since it is
      not feasible to make a JavaBean property for each and every form field.
      In such cases one may still want to use type conversion and data
      validation. To do that forms allow the
      <literal>org.araneaframework.uilib.form.Data</literal> and its
      subclasses (subclasses correspond to specific types) to be associated
      with the field:</para>

      <programlisting role="java">...
personForm = new BeanFormWidget(Person.class);
addWidget("personForm", personForm);
...
personForm.addElement("numberOfChildren", "#No. of chidren",
  new NumberControl(), new LongData(), true);
...</programlisting>

      <para>In such a case one can retrieve the data directly from the
      field:</para>

      <programlisting role="java">...
private void handleEventSave() {
  if (myForm.convertAndValidate()) {
    ...
    Long numberOfChildren = (Long) personForm.getValueByFullName("numberOfChildren");
    //Alternative:
    //FormElement nocEl = (FormElement) personForm.getElement("numberOfChildren");
    //Long numberOfChildren = (Long) nocEl.getValue();
    ...
  }
}
...</programlisting>

      <para>If there is no JavaBean to associate the form with
      <literal>org.araneaframework.uilib.form.FormWidget</literal> may be used
      instead of <literal>BeanFormWidget</literal>.</para>

      <para>Note that the reason for existence of <literal>Data</literal>
      objects is that Java types correspond poorly to some restricted
      types—for instance enumerations, type encodings and collections
      container types (this problem is somewhat solved in Java 5, but Aranea
      is compatible with Java 1.3).</para>

      <para>Table of <literal>Data</literal> types. <informaltable
          frame="topbot">
          <tgroup cols="2">
            <colspec colwidth="1*" />

            <colspec colwidth="3*" />

            <thead>
              <row>
                <entry>Data</entry>

                <entry>Value Type</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry><literal>BigDecimalData</literal></entry>

                <entry><literal>java.math.BigDecimal</literal></entry>
              </row>

              <row>
                <entry><literal>BigDecimalListData</literal></entry>

                <entry><literal>List
                &lt;java.math.BigDecimal</literal>&gt;</entry>
              </row>

              <row>
                <entry><literal>BooleanData</literal></entry>

                <entry><literal>java.lang.Boolean</literal></entry>
              </row>

              <row>
                <entry><literal>BooleanListData</literal></entry>

                <entry><literal>List
                &lt;java.lang.Boolean</literal>&gt;</entry>
              </row>

              <row>
                <entry><literal>DateData</literal></entry>

                <entry><literal>java.util.Date</literal></entry>
              </row>

              <row>
                <entry><literal>DisplayItemListData</literal></entry>

                <entry><literal>List
                &lt;org.araneaframework.uilib.support.DisplayItemDisplayItem</literal>&gt;</entry>
              </row>

              <row>
                <entry><literal>FileInfoData</literal></entry>

                <entry><literal>org.araneaframework.uilib.support.FileInfo</literal></entry>
              </row>

              <row>
                <entry><literal>IntegerData</literal></entry>

                <entry><literal>java.lang.Integer</literal></entry>
              </row>

              <row>
                <entry><literal>IntegerListData</literal></entry>

                <entry><literal>List
                &lt;java.lang.Integer</literal>&gt;</entry>
              </row>

              <row>
                <entry><literal>LongData</literal></entry>

                <entry><literal>java.lang.Long</literal></entry>
              </row>

              <row>
                <entry><literal>LongListData</literal></entry>

                <entry><literal>List &lt;java.lang.Long</literal>&gt;</entry>
              </row>

              <row>
                <entry><literal>StringData</literal></entry>

                <entry><literal>java.lang.String</literal></entry>
              </row>

              <row>
                <entry><literal>StringListData</literal></entry>

                <entry><literal>List
                &lt;java.lang.String</literal>&gt;</entry>
              </row>

              <row>
                <entry><literal>TimestampData</literal></entry>

                <entry><literal>java.sql.Timestamp</literal></entry>
              </row>

              <row>
                <entry><literal>YNData</literal></entry>

                <entry><literal>java.lang.String</literal></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>

      <para>Finally <literal>Data</literal> constructor also accepts both a
      <literal>Class</literal> instance and a simple string. So if you have a
      custom datatype with an appropriate converter (see next section) you can
      just assign the data with the same type (in fact if you have your own
      converter the type doesn't matter that much, it will just allow some
      checks to be done on the programmer).</para>
    </sect2>

    <sect2>
      <title>Converters</title>

      <para>Converter sole purpose is conversion of values with one type to
      values of another type. Conventionally converter which
      <literal>convert()</literal> method accepts object of type
      <emphasis>A</emphasis> and returns object of type <emphasis>B</emphasis>
      is named <literal>AToBConverter</literal>. Converter from type
      <emphasis>B</emphasis> to type <emphasis>A</emphasis> is obtained with
      <literal>new ReverseConverter(new AToBConverter())</literal>.</para>

      <programlisting role="java">public interface Converter extends Serializable, FormElementAware {
    public void setFormElementCtx(FormElementContext feCtx);
    public Object convert(Object data);
    public Object reverseConvert(Object data);
    public Converter newConverter();
}
</programlisting>

      <para>Converters are used internally to convert
      <literal>Control</literal> values to values of
      <literal>FormElement</literal> <literal>Data</literal> and vice-versa.
      Converters are usually looked up from
      <literal>ConverterFactory</literal>, but each
      <literal>FormElement</literal> can be set explicit
      <literal>Converter</literal> by calling
      <literal>FormElement.setConverter()</literal>. Direction of
      <literal>Converter</literal> set this way should be from
      <literal>FormElement</literal> <literal>Control</literal> value type to
      <literal>FormElement</literal> <literal>Data</literal> type.</para>
    </sect2>
  </sect1>

  <sect1>
    <title>Forms JSP Tags</title>

    <para>Form JSP tags can be divided into two categories&mdash;tags providing
    <emphasis>contexts</emphasis> (&lt;ui:form&gt;, &lt;ui:formElement&gt;)
    and tags for <emphasis>rendering</emphasis> form elements containing
    different controls. We will first describe the attributes that are common
    to all form element rendering tags; then proceed to explain
    <emphasis>context</emphasis> tags and different form element rendering
    tags with their unique attributes.</para>

    <sect2 id="common-formelement-attributes">
      <title>Common attributes for all form element rendering tags.</title>

      <informaltable frame="topbot">
        <tgroup cols="3">
          <colspec colwidth="2*" />

          <colspec colwidth="1*" />

          <colspec colwidth="4*" />

          <thead>
            <row>
              <entry>Attribute</entry>

              <entry>Required</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>id</entry>

              <entry><emphasis>no/yes</emphasis></entry>

              <entry>Id of form element to be rendered. If not specified, it
              is usually taken from current form element context (<xref
                  linkend="uiFormElementTag">
                   &lt;ui:formElement&gt; 
                </xref>). For few tags, it is required.</entry>
            </row>

            <row>
              <entry>events</entry>

              <entry><emphasis>no</emphasis></entry>

              <entry>Whether element will send events that are registered by
              server-side, <literal>true</literal> by default.</entry>
            </row>

            <row>
              <entry>validateOnEvent</entry>

              <entry><emphasis>no</emphasis></entry>

              <entry>Whether the form should be validated on the client-side
              (or by making AJAX request to server) when <emphasis>element
              generates an event</emphasis> (this is <literal>false</literal>
              by default and is not supported by any default Aranea JSP
              tags).</entry>
            </row>

            <row>
              <entry>tabindex</entry>

              <entry><emphasis>no</emphasis></entry>

              <entry>HTML tabindex for the element.</entry>
            </row>

            <row>
              <entry>updateRegions</entry>

              <entry><emphasis>no</emphasis></entry>

              <entry>Comma separated list of update regions that should be
              updated upon button receiving event. This attribute is only
              needed when using AJAX features— ordinary HTTP requests always
              update whole page.</entry>
            </row>

            <row>
              <entry>globalUpdateRegions</entry>

              <entry><emphasis>no</emphasis></entry>

              <entry>Comma separated list of global update regions that should
              be updated upon button receiving event. This attribute is only
              needed when using AJAX features— ordinary HTTP requests always
              update whole page.</entry>
            </row>

            <row>
              <entry>styleClass</entry>

              <entry><emphasis>no</emphasis></entry>

              <entry>CSS class applied HTML tag(s) that are used for rendering
              element.</entry>
            </row>
            
             <row>
              <entry>style</entry>

              <entry><emphasis>no</emphasis></entry>

              <entry>Inline CSS style applied to HTML tag(s) that are used for rendering element.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>

    <!--  UI:FORM -->

    <sect2>
      <title>&lt;ui:form&gt;</title>

      <para>Specifies form context for inner tags. Form view model and id are
      made accessible to inner tags as EL variables.</para>

      <sect3>
        <title>Attributes</title>

        <informaltable frame="topbot">
          <tgroup cols="3">
            <colspec colwidth="2*" />

            <colspec colwidth="1*" />

            <colspec colwidth="4*" />

            <thead>
              <row>
                <entry>Attribute</entry>

                <entry>Required</entry>

                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>id</entry>

                <entry><emphasis>no</emphasis></entry>

                <entry>Id of context form. When not specified, current form
                context is preserved (if it exists).</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

      <sect3>
        <title>Variables</title>

        <informaltable frame="topbot">
          <tgroup cols="3">
            <colspec colwidth="2*" />

            <colspec colwidth="5*" />

            <colspec align="center" colwidth="2*" />

            <thead>
              <row>
                <entry>Variable</entry>

                <entry>Description</entry>

                <entry>Type</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>form</entry>

                <entry>View model of form.</entry>

                <entry><literal>FormWidget.ViewModel</literal></entry>
              </row>
              
              <row>
                <entry>formId</entry>

                <entry>Id of form.</entry>

                <entry><literal>String</literal></entry>
              </row>
              
               <row>
                <entry>formFullId</entry>
                <entry>Full id of form.</entry>
                <entry><literal>String</literal></entry>
              </row>
              
               <row>
                <entry>formScopedFullId</entry>
                <entry>Full scoped id of form.</entry>
                <entry><literal>String</literal></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

      <sect3>
        <title>Examples</title>

        <programlisting role="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;ui:form id="loginForm"&gt;
    ...  &lt;!-- formElements, formElementLabels, ... --&gt; ...
&lt;/ui:form&gt;</programlisting>
      </sect3>
    </sect2>

    <!--  UI:FORMELEMENT -->

    <sect2>
      <title id="uiFormElementTag">&lt;ui:formElement&gt;</title>

      <para>Specifies form element context for inner tags. Must be surrounded
      by &lt;ui:form&gt; tag. Form element view model, id and value are made
      accessible to inner tags as EL variables.</para>

      <sect3>
        <title>Attributes</title>

        <informaltable frame="topbot">
          <tgroup cols="3">
            <colspec colwidth="2*" />

            <colspec colwidth="1*" />

            <colspec colwidth="4*" />

            <thead>
              <row>
                <entry>Attribute</entry>

                <entry>Required</entry>

                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>id</entry>

                <entry><emphasis>yes</emphasis></entry>

                <entry>Id of context form element.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

      <sect3>
        <title>Variables</title>

        <informaltable frame="topbot">
          <tgroup cols="3">
            <colspec colwidth="2*" />

            <colspec colwidth="5*" />

            <colspec align="center" colwidth="2*" />

            <thead>
              <row>
                <entry>Variable</entry>

                <entry>Description</entry>

                <entry>Type</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>formElement</entry>

                <entry>View model of form element.</entry>

                <entry><literal>FormElement.ViewModel</literal></entry>
              </row>

              <row>
                <entry>formElementId</entry>

                <entry>Id of form element.</entry>

                <entry><literal>String</literal></entry>
              </row>

              <row>
                <entry>formElementValue</entry>

                <entry>Value currently kept inside form element.</entry>

                <entry><literal>Object</literal></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>
      

      <sect3>
        <title>Examples</title>

        <programlisting role="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;ui:form id="loginForm"&gt;
    &lt;ui:formElement id="username"&gt;
        ...
    &lt;/ui:formElement&gt;
&lt;/ui:form&gt;</programlisting>
      </sect3>
    </sect2>

    <!-- LABEL -->

    <sect2>
      <title>&lt;ui:label&gt;</title>

      <para>Renders localizable label bound to form element. Rendered with
      HTML &lt;span&gt; and &lt;label&gt; tags.</para>

      <sect3>
        <title>Attributes</title>

        <informaltable frame="topbot">
          <tgroup cols="3">
            <colspec colwidth="2*" />

            <colspec colwidth="1*" />

            <colspec colwidth="4*" />

            <thead>
              <row>
                <entry>Attribute</entry>

                <entry>Required</entry>

                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>id</entry>

                <entry><emphasis>no</emphasis></entry>

                <entry>Id of form element which label should be rendered. If
                left unspecified, form element id from form element context is
                used.</entry>
              </row>

              <row>
                <entry>showMandatory</entry>

                <entry><emphasis>no</emphasis></entry>

                <entry>Indicates whether mandatory input fields label is
                marked with asterisk. Value should be <literal>true</literal>
                or <literal>false</literal>, default is
                <literal>true</literal></entry>
              </row>

              <row>
                <entry>showColon</entry>

                <entry><emphasis>no</emphasis></entry>

                <entry>Indicates whether colon is shown after the label.
                Default is <literal>true</literal>.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <emphasis>Also has standard <literal>style</literal> and <literal>styleClass</literal> attributes.</emphasis>
      </sect3>

      <sect3>
        <title>Examples</title>

        <programlisting role="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;ui:form id="loginForm"&gt;
    &lt;ui:row&gt;
        &lt;ui:formElement id="username"&gt;
            &lt;ui:cell&gt;
                &lt;ui:label/&gt;
            &lt;/ui:cell&gt;
        &lt;/ui:formElement&gt;
    &lt;/ui:row&gt;
&lt;/ui:form&gt;</programlisting>
      </sect3>
    </sect2>

    <!-- SIMPLELABEL -->

    <sect2>
      <title>&lt;ui:simpleLabel&gt;</title>

      <para>Renders localizable label (with HTML &lt;span&gt; and
      &lt;label&gt; tags).</para>

      <sect3>
        <title>Attributes</title>

        <informaltable frame="topbot">
          <tgroup cols="3">
            <colspec colwidth="2*" />

            <colspec colwidth="1*" />

            <colspec colwidth="4*" />

            <thead>
              <row>
                <entry>Attribute</entry>

                <entry>Required</entry>

                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>labelId</entry>

                <entry><emphasis>yes</emphasis></entry>

                <entry>ID of label to render.</entry>
              </row>

              <row>
                <entry>showMandatory</entry>

                <entry><emphasis>no</emphasis></entry>

                <entry>Indicates whether label is marked with asterisk. Value
                should be <literal>true</literal> or <literal>false</literal>,
                default is <literal>false</literal></entry>
              </row>

              <row>
                <entry>showColon</entry>

                <entry><emphasis>no</emphasis></entry>

                <entry>Indicates whether colon is shown after the label.
                Default is <literal>true</literal>.</entry>
              </row>

              <row>
                <entry>for</entry>

                <entry><emphasis>no</emphasis></entry>

                <entry>ID of the form element for which the label is
                created.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <emphasis>Also has standard <literal>style</literal> and <literal>styleClass</literal> attributes.</emphasis>
      </sect3>

      <sect3>
        <title>Examples</title>

        <programlisting role="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;ui:form id="loginForm"&gt;
    &lt;ui:row&gt;
        &lt;ui:cell&gt;
            &lt;ui:simpleLabel labelId="username.input.label" showMandatory="true" for="username"/&gt;
        &lt;/ui:cell&gt;
    &lt;/ui:row&gt;
&lt;/ui:form&gt;</programlisting>
      </sect3>
    </sect2>

    <!-- BUTTON -->

    <sect2>
      <title>&lt;ui:button&gt;</title>

      <para>Renders form buttons that represent
      <literal>ButtonControls</literal>. Either HTML &lt;button&gt; or
      &lt;input type="button" ... &gt; will be used for rendering.</para>

      <sect3>
        <title>Attributes</title>

        <informaltable frame="topbot">
          <tgroup cols="3">
            <colspec colwidth="2*" />

            <colspec colwidth="1*" />

            <colspec colwidth="4*" />

            <thead>
              <row>
                <entry>Attribute</entry>

                <entry>Required</entry>

                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>showLabel</entry>

                <entry>
                  <emphasis>no</emphasis>
                </entry>

                <entry>Indicates whether button label is shown.Value should be
                <literal>true</literal> or <literal>false</literal>, default
                is <literal>true</literal></entry>
              </row>

              <row>
                <entry>onClickPrecondition</entry>

                <entry>
                  <emphasis>no</emphasis>
                </entry>

                <entry>Precondition for deciding whether onclick event should
                go server side or not. If left unspecified, this is considered
                to be <literal>true</literal>.</entry>
              </row>

              <row>
                <entry>renderMode</entry>

                <entry>
                  <emphasis>no</emphasis>
                </entry>

                <entry>Allowed values are <literal>button</literal> and
                <literal>input</literal>—the corresponding HTML tag will be
                used to render the button. Default is button.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <emphasis>Also has all common form element rendering
        attributes.</emphasis>
      </sect3>

      <sect3>
        <title>Examples</title>

        <programlisting role="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;ui:form id="loginForm"&gt;
    &lt;ui:button id="loginButton"/&gt;
&lt;/ui:form&gt;</programlisting>
      </sect3>
    </sect2>

    <!-- LINKBUTTOn -->

    <sect2>
      <title>&lt;ui:linkButton&gt;</title>

      <para>Renders HTML link that represents
      <literal>ButtonControl</literal>. HTML &lt;a href="javascript:" ... &gt;
      tag will be used for rendering. Default
      <literal>styleClass="aranea-link"</literal>.</para>

      <sect3>
        <title>Attributes</title>

        <informaltable frame="topbot">
          <tgroup cols="3">
            <colspec colwidth="2*" />

            <colspec colwidth="1*" />

            <colspec colwidth="4*" />

            <thead>
              <row>
                <entry>Attribute</entry>

                <entry>Required</entry>

                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>showLabel</entry>

                <entry>
                  <emphasis>no</emphasis>
                </entry>

                <entry>Indicates whether button label is shown.Value should be
                <literal>true</literal> or <literal>false</literal>, default
                is <literal>true</literal></entry>
              </row>

              <row>
                <entry>onClickPrecondition</entry>

                <entry>
                  <emphasis>no</emphasis>
                </entry>

                <entry>Precondition for deciding whether registered onclick
                event should go server side or not. If left unspecified, this
                is considered to be <literal>true</literal>.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <emphasis>Has all common form element rendering attributes.</emphasis>
      </sect3>
    </sect2>

    <!-- formKeyboardHandler -->

    <sect2>
      <title>&lt;ui:formKeyboardHandler&gt;</title>

      <para>Registers a simple keyboard handler. Invokes a
      <literal>uiRegisterKeyboardHandler</literal> javascript. This is
      basically the same stuff as &lt;ui:keyboardHandler&gt; with a few
      modifications.</para>

      <para>There is no <literal>scope</literal> attribute. Instead, the tag
      assumes that it is located inside a form, and takes the full id of that
      form as its scope.</para>

      <para>As an alternative to specifying the <literal>handler</literal>
      attribute, you may specify a form element and a javascript event to
      invoke on that element. You specify the element by its id relative to
      the surrounding form. The event is given as a name of the javascript
      function to be invoked on the element. For example, if you specify the
      element as "someButton", and event as "click", then when the required
      keyboard event occurs, the following javascript will be executed:</para>

      <programlisting role="javascript">var el = document.getElementById("&lt;form-id&gt;.someButton");
el.click();</programlisting>

      <sect3>
        <title>Attributes</title>

        <informaltable frame="topbot">
          <tgroup cols="3">
            <colspec colwidth="2*" />

            <colspec colwidth="1*" />

            <colspec colwidth="4*" />

            <thead>
              <row>
                <entry>Attribute</entry>

                <entry>Required</entry>

                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>handler</entry>

                <entry><emphasis>no</emphasis></entry>

                <entry>A javascript handler function that takes two parameters
                - the event object and the element id for which the event was
                fired. Example: <literal>function(event, elementId) {
                alert(elementId); } </literal> Either handler or
                elementId/event pair should be specified, not both.</entry>
              </row>

              <row>
                <entry>subscope</entry>

                <entry><emphasis>no</emphasis></entry>

                <entry>Specifies form element which is the scope of this
                handler. By default the "scope" (as in
                <literal>&lt;ui:keyboardHandlerTag&gt;</literal>) of this
                keyboard handler is the form inside which the handler is
                defined. By specifying this, scope of certain element may be
                narrowed. For example if the handler is defined inside form
                "myForm", and subscope is specified as "myelement", the scope
                of the handler will be "myForm.myelement", not the default
                "myForm". The handler will therefore be active only for the
                element 'someElement'".</entry>
              </row>

              <row>
                <entry>elementId</entry>

                <entry><emphasis>no</emphasis></entry>

                <entry>Sets the (relative) <literal>id</literal> of the
                element whose javascript event should be invoked. The
                <literal>id</literal> is relative with respect to the
                surrounding form. Instead of this attribute, element's full id
                may be set using the <literal>fullElementId</literal>
                attribute, but only one of those attributes should be set at
                once.</entry>
              </row>

              <row>
                <entry>fullElementId</entry>

                <entry><emphasis>no</emphasis></entry>

                <entry>Sets the full <literal>id</literal> of the element
                whose javascript event should be invoked.</entry>
              </row>

              <row>
                <entry>event</entry>

                <entry><emphasis>no</emphasis></entry>

                <entry>Set the javascript event that should be invoked when
                keypress is detected—"click" and "focus" are safe for most
                controls. If target element (the one given by
                <literal>elementId</literal>) is a selectbox "select" may be
                used. For more, javascript reference should be consulted. This
                attribute is not foolproof and invalid javascript may be
                produced when it is not used cautiously.</entry>
              </row>

              <row>
                <entry>keyCode</entry>

                <entry><emphasis>no</emphasis></entry>

                <entry>Keycode to which the event must be triggered. Either
                keyCode or key must be specified, but not both.</entry>
              </row>

              <row>
                <entry>key</entry>

                <entry><emphasis>no</emphasis></entry>

                <entry>Key to which the event must be triggered, accepts key
                "aliases" instead of codes. Accepted aliases include
                <literal>F1..F12, RETURN, ENTER, BACKSPACE, ESCAPE, TAB,
                SHIFT, CONTROL, SPACE</literal>.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

      <sect3>
        <title>Examples</title>

        <programlisting role="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;ui:form id="loginForm"&gt;
    &lt;ui:eventButton id="btnLogin" eventId="login" labelId="button.login.enter"/&gt;
    &lt;ui:formKeyboardHandler fullElementId="btnLogin" key="enter"/&gt;
&lt;/ui:form&gt;</programlisting>
      </sect3>
    </sect2>

    <!-- formEnterKeyboardHandler -->

    <sect2>
      <title>&lt;ui:formEnterKeyboardHandler&gt;</title>

      <para>Same as <literal>&lt;ui:formKeyboardHandlerTag&gt;</literal>
      except <literal>key</literal> is already set to
      <literal>enter</literal>.</para>
    </sect2>

    <!-- formEscapeKeyboardHandler -->

    <sect2>
      <title>&lt;ui:formEscapeKeyboardHandler&gt;</title>

      <para>Same as <literal>&lt;ui:formKeyboardHandlerTag&gt;</literal>
      except <literal>key</literal> is already set to
      <literal>escape</literal>.</para>
    </sect2>

    <!--  textinput,autoCompleteTextInput,textdisplay -->

    <sect2>
      <title>&lt;ui:textInput&gt;</title>

      <para>Form text input field, represents <literal>TextControl</literal>.
      It is rendered in HTML with <literal>&lt;input type="text"
      ...&gt;</literal> tag. Default
      <literal>styleClass="aranea-text"</literal>.</para>

      <sect3>
        <title>Attributes</title>

        <informaltable frame="topbot">
          <tgroup cols="3">
            <colspec colwidth="2*" />

            <colspec colwidth="1*" />

            <colspec colwidth="4*" />

            <thead>
              <row>
                <entry>Attribute</entry>

                <entry>Required</entry>

                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>size</entry>

                <entry>
                  <emphasis>no</emphasis>
                </entry>

                <entry>Maximum length of accepted text (in
                characters).</entry>
              </row>

              <row>
                <entry>onChangePrecondition</entry>

                <entry>
                  <emphasis>no</emphasis>
                </entry>

                <entry>Precondition for deciding whether registered onchange
                event should go server side or not. If left unspecified, this
                is considered to be <literal>true</literal>. For this tag,
                <emphasis>onchange</emphasis> event is simulated with
                <emphasis>onblur</emphasis>.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <emphasis>Also has all common form element rendering
        attributes.</emphasis>
      </sect3>

      <sect3>
        <title>Examples</title>

        <programlisting role="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;ui:form id="someForm"&gt;
  &lt;ui:formElement id="firstField"&gt;
     &lt;!-- Renders input field binded to form's firstField element --&gt;
     &lt;ui:textInput/&gt;
  &lt;/ui:formElement&gt;
&lt;/ui:form&gt;</programlisting>
      </sect3>
    </sect2>

    <sect2>
      <title>&lt;ui:autoCompleteTextInput&gt;</title>

      <para>Form text input field, represents
      <literal>AutoCompleteTextControl</literal>. It is rendered in HTML with
      <literal>&lt;input type="text" ...&gt;</literal> tag. Default
      <literal>styleClass="aranea-text"</literal>. It is able to make
      background AJAX request to the server, fetching suggested completions to
      user input and displaying these to the user.</para>

      <sect3>
        <title>Attributes</title>

        <informaltable frame="topbot">
          <tgroup cols="3">
            <colspec colwidth="2*" />

            <colspec colwidth="1*" />

            <colspec colwidth="4*" />

            <thead>
              <row>
                <entry>Attribute</entry>

                <entry>Required</entry>

                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>size</entry>

                <entry>
                  <emphasis>no</emphasis>
                </entry>

                <entry>Maximum length of accepted text (in
                characters).</entry>
              </row>

              <row>
                <entry>onChangePrecondition</entry>

                <entry>
                  <emphasis>no</emphasis>
                </entry>

                <entry>Precondition for deciding whether registered onchange
                event should go server side or not. If left unspecified, this
                is considered to be <literal>true</literal>. For this tag,
                <emphasis>onchange</emphasis> event is simulated with
                <emphasis>onblur</emphasis>.</entry>
              </row>

              <row>
                <entry>divClass</entry>

                <entry>
                  <emphasis>no</emphasis>
                </entry>

                <entry>CSS class attribute assigned to &lt;DIV&gt; inside
                which suggestions are presented.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <emphasis>Also has all common form element rendering
        attributes.</emphasis>
      </sect3>
    </sect2>

    <sect2>
      <title>&lt;ui:textInputDisplay&gt;</title>

      <para>Form text display field, represents
      <literal>TextControl</literal>. It is rendered in HTML with
      <literal>&lt;span ...&gt;</literal> tag. Default
      <literal>styleClass="aranea-text-display"</literal>.</para>

      <sect3>
        <title>Attributes</title>

        <emphasis>Has standard <literal>id</literal> and
        <literal>styleClass</literal> attributes.</emphasis>
      </sect3>

      <sect3>
        <title>Examples</title>

        <programlisting role="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;ui:form id="someForm"&gt;
  &lt;ui:formElement id="firstField"&gt;
     &lt;!-- Renders display field for form's firstField element --&gt;
     &lt;ui:textInputDisplay/&gt;
  &lt;/ui:formElement&gt;
&lt;/ui:form&gt;</programlisting>
      </sect3>
    </sect2>

    <!-- numberinput, numberdisplay -->

    <sect2>
      <title>&lt;ui:numberInput&gt;</title>

      <para>Form number input field, represents
      <literal>NumberControl</literal>. It is rendered in HTML with
      <literal>&lt;input type="text" ...&gt;</literal> tag. Default
      <literal>styleClass="aranea-number"</literal>.</para>

      <sect3>
        <title>Attributes</title>

        <informaltable frame="topbot">
          <tgroup cols="3">
            <colspec colwidth="2*" />

            <colspec colwidth="1*" />

            <colspec colwidth="4*" />

            <thead>
              <row>
                <entry>Attribute</entry>

                <entry>Required</entry>

                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>size</entry>

                <entry>
                  <emphasis>no</emphasis>
                </entry>

                <entry>Maximum length of accepted text (in
                characters).</entry>
              </row>

              <row>
                <entry>onChangePrecondition</entry>

                <entry>
                  <emphasis>no</emphasis>
                </entry>

                <entry>Precondition for deciding whether registered onchange
                event should go server side or not. If left unspecified, this
                is considered to be <literal>true</literal>. For this tag,
                <emphasis>onchange</emphasis> event is simulated with
                <emphasis>onblur</emphasis>.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <emphasis>Also has all common form element rendering
        attributes.</emphasis>
      </sect3>
    </sect2>

    <sect2>
      <title>&lt;ui:numberInputDisplay&gt;</title>

      <para>Form number display field, represents
      <literal>NumberControl</literal>. It is rendered in HTML with
      <literal>&lt;span ...&gt;</literal> tag. Default
      <literal>styleClass="aranea-number-display"</literal>.</para>

      <sect3>
        <title>Attributes</title>

        <emphasis>Has standard <literal>id</literal> and
        <literal>styleClass</literal> attributes.</emphasis>
      </sect3>
    </sect2>

    <!-- floatinput, floatinputdisplay -->

    <sect2>
      <title>&lt;ui:floatInput&gt;</title>

      <para>Form floating-point number input field, represents
      <literal>FloatControl</literal>. It is rendered in HTML with
      <literal>&lt;input type="text" ...&gt;</literal> tag. Default
      <literal>styleClass="aranea-float"</literal>.</para>

      <sect3>
        <title>Attributes</title>

        <informaltable frame="topbot">
          <tgroup cols="3">
            <colspec colwidth="2*" />

            <colspec colwidth="1*" />

            <colspec colwidth="4*" />

            <thead>
              <row>
                <entry>Attribute</entry>

                <entry>Required</entry>

                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>size</entry>

                <entry>
                  <emphasis>no</emphasis>
                </entry>

                <entry>Maximum length of accepted floating-point number (in
                characters).</entry>
              </row>

              <row>
                <entry>onChangePrecondition</entry>

                <entry>
                  <emphasis>no</emphasis>
                </entry>

                <entry>Precondition for deciding whether registered onchange
                event should go server side or not. If left unspecified, this
                is considered to be <literal>true</literal>. For this tag,
                <emphasis>onchange</emphasis> event is simulated with
                <emphasis>onblur</emphasis>.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <emphasis>Also has all common form element rendering
        attributes.</emphasis>
      </sect3>
    </sect2>

    <sect2>
      <title>&lt;ui:floatInputDisplay&gt;</title>

      <para>Form floating-point number display field, represents
      <literal>FloatControl</literal>. It is rendered in HTML with
      <literal>&lt;span ...&gt;</literal> tag. Default
      <literal>styleClass="aranea-float-display"</literal>.</para>

      <sect3>
        <title>Attributes</title>

        <emphasis>Has standard <literal>id</literal> and
        <literal>styleClass</literal> attributes.</emphasis>
      </sect3>
    </sect2>

    <!-- passwordinput -->

    <sect2>
      <title>&lt;ui:passwordInput&gt;</title>

      <para>Form number input field, represents
      <literal>TextControl</literal>. It is rendered in HTML with
      <literal>&lt;input type="password" ...&gt;</literal> tag. Default
      <literal>styleClass="aranea-text"</literal>.</para>

      <sect3>
        <title>Attributes</title>

        <informaltable frame="topbot">
          <tgroup cols="3">
            <colspec colwidth="2*" />

            <colspec colwidth="1*" />

            <colspec colwidth="4*" />

            <thead>
              <row>
                <entry>Attribute</entry>

                <entry>Required</entry>

                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>size</entry>

                <entry>
                  <emphasis>no</emphasis>
                </entry>

                <entry>Maximum length of password (in characters).</entry>
              </row>

              <row>
                <entry>onChangePrecondition</entry>

                <entry>
                  <emphasis>no</emphasis>
                </entry>

                <entry>Precondition for deciding whether registered onchange
                event should go server side or not. If left unspecified, this
                is considered to be <literal>true</literal>. For this tag,
                <emphasis>onchange</emphasis> event is simulated with
                <emphasis>onblur</emphasis>.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <emphasis>Also has all common form element rendering
        attributes.</emphasis>
      </sect3>
    </sect2>

    <!-- textDisplay -->

    <sect2>
      <title>&lt;ui:textDisplay&gt;</title>

      <para>Form text display field, represents
      <literal>DisplayControl</literal>, displays element value as
      <literal>String</literal>. It is rendered in HTML with <literal>&lt;span
      ...&gt;</literal> tag.</para>

      <sect3>
        <title>Attributes</title>

        <emphasis>Has standard <literal>id</literal> and
        <literal>styleClass</literal> attributes.</emphasis>
      </sect3>
    </sect2>

    <!-- value display -->

    <sect2>
      <title>&lt;ui:valueDisplay&gt;</title>

      <para>Puts form element value in page scope variable, represents
      <literal>DisplayControl</literal>. It does not output any HTML.</para>

      <sect3>
        <title>Attributes</title>

        <informaltable frame="topbot">
          <tgroup cols="3">
            <colspec colwidth="2*" />

            <colspec colwidth="1*" />

            <colspec colwidth="4*" />

            <thead>
              <row>
                <entry>Attribute</entry>

                <entry>Required</entry>

                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>var</entry>

                <entry>
                  <emphasis>true</emphasis>
                </entry>

                <entry>Name of the page-scoped EL variable that will be
                assigned element value.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <emphasis>Also has standard <literal>id</literal>
        attribute.</emphasis>
      </sect3>
    </sect2>

    <!-- textarea, textareadisplay -->

    <sect2>
      <title>&lt;ui:textarea&gt;</title>

      <para>Form text input area, represents
      <literal>TextareaControl</literal>. It is rendered in HTML with
      <literal>&lt;textarea ...&gt;</literal> tag. Default
      <literal>styleClass="aranea-textarea"</literal>.</para>

      <sect3>
        <title>Attributes</title>

        <informaltable frame="topbot">
          <tgroup cols="3">
            <colspec colwidth="2*" />

            <colspec colwidth="1*" />

            <colspec colwidth="4*" />

            <thead>
              <row>
                <entry>Attribute</entry>

                <entry>Required</entry>

                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>cols</entry>

                <entry>
                  <emphasis>true</emphasis>
                </entry>

                <entry>Number of visible columns in textarea.</entry>
              </row>

              <row>
                <entry>rows</entry>

                <entry>
                  <emphasis>true</emphasis>
                </entry>

                <entry>Number of visible rows in textarea.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <emphasis>Has all common form element rendering attributes.</emphasis>
      </sect3>

      <sect3>
        <title>Examples</title>

        <programlisting role="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;ui:form id="someForm"&gt;
  &lt;ui:formElement id="longLongText"&gt;
    &lt;ui:cell&gt;
      &lt;ui:textarea rows="15" cols="150"/&gt;
    &lt;/ui:cell&gt;
  &lt;/ui:formElement&gt;
&lt;/ui:form&gt;</programlisting>
      </sect3>
    </sect2>

    <!-- textarea, textareadisplay -->

    <sect2>
      <title>&lt;ui:richtextarea&gt;</title>

      <para>Form text input area, represents
      <literal>TextareaControl</literal>. It is rendered in HTML with
      <literal>&lt;textarea ...&gt;</literal> tag with
      <literal>styleClass="richTextEditor"</literal>. The area is displayed as
      a rich text editor. The configuration of the editor is done via
      <literal>&lt;ui:richTextAreaInit&gt;</literal>. The tag shares all the
      attributes of the <literal>&lt;ui:textarea&gt;</literal> except the
      <literal>styleClass</literal> which cannot be set for this tag.</para>
    </sect2>

    <sect2>
      <title>&lt;ui:richTextAreaInit&gt;</title>

      <para>A tag for configuring the rich textareas. The <ulink
      url="http://tinymce.moxiecode.com/">tinyMCE</ulink> WYSIWYG editor is
      attached to the textareas defined via
      <literal>&lt;ui:richTextarea&gt;</literal> . The configuration lets you
      choose the looks, buttons, functionality of the editor. See <ulink
      url="http://tinymce.moxiecode.com/tinymce/docs/reference_configuration.html">tinyMCE
      configuration reference</ulink> for different configurable
      options.</para>

      <para>The configuration is done via nesting key value pairs inside the
      <literal>&lt;ui:richTextAreaInit&gt;</literal>. For the key value pairs the
      <literal>&lt;ui:attribute&gt;</literal> tag is used. See the example for
      an overview.</para>

      <para>The <literal>editor_selector</literal> and <literal>mode</literal>
      options are set by default and should not be changed. The default
      <literal>theme</literal> is "simple".</para>

      <para><emphasis>Important:</emphasis> the configuration should be done
      in the <literal>&lt;head&gt;</literal> section of the HTML
      document.</para>

      <sect3>
        <title>Example</title>

        <programlisting role="xml">&lt;ui:richTextAreaInit&gt;
  &lt;ui:attribute name="theme" value="advanced"/&gt;
  &lt;ui:attribute name="theme_advanced_buttons1" value="bold,italic,underline,separator,code"/&gt;
  &lt;ui:attribute name="theme_advanced_toolbar_location" value="top"/&gt;
  &lt;ui:attribute name="theme_advanced_toolbar_align" value="left"/&gt;
  &lt;ui:attribute name="theme_advanced_path_location" value="bottom"/&gt;
&lt;/ui:richTextAreaInit&gt;</programlisting>
      </sect3>
    </sect2>

    <sect2>
      <title>&lt;ui:textareaDisplay&gt;</title>

      <para>Form text display area, represents
      <literal>TextareaControl</literal>. It is rendered in HTML with
      <literal>&lt;span ...&gt;</literal> tag. Default
      <literal>styleClass="aranea-textarea-display"</literal>.</para>

      <sect3>
        <title>Attributes</title>

        <emphasis>Has standard <literal>id</literal> and
        <literal>styleClass</literal> attributes.</emphasis>
      </sect3>
    </sect2>

    <!-- hiddeninput -->

    <sect2>
      <title>&lt;ui:hiddenInput&gt;</title>

      <para>Represents a "hidden" form input
      element—<literal>HiddenControl</literal>. It is rendered in HTML with
      <literal>&lt;input type="hidden" ...&gt;</literal> tag.</para>

      <sect3>
         

        <title>Attributes</title>

         

        <emphasis>Has all common form element rendering attributes.</emphasis>

         However, rendered tag is not visible to end-user, thus using any attributes is mostly pointless. 
      </sect3>
    </sect2>

    <!-- checkbox, checkboxdisplay -->

    <sect2>
      <title>&lt;ui:checkbox&gt;</title>

      <para>Form checkbox <emphasis>input</emphasis> field, represents
      <literal>CheckboxControl</literal>. By default
      <literal>styleClass="aranea-checkbox"</literal>. Rendered in HTML with
      <literal>&lt;input type="checkbox" ...&gt;</literal> tag.</para>

      <sect3>
        <title>Attributes</title>

        <informaltable frame="topbot">
          <tgroup cols="3">
            <colspec colwidth="2*" />

            <colspec colwidth="1*" />

            <colspec colwidth="4*" />

            <thead>
              <row>
                <entry>Attribute</entry>

                <entry>Required</entry>

                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>onChangePrecondition</entry>

                <entry>
                  <emphasis>no</emphasis>
                </entry>

                <entry>Precondition for deciding whether registered onchange
                event should go server side or not. If left unspecified, this
                is considered to be <literal>true</literal></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <emphasis>Also has all common form element rendering
        attributes.</emphasis>
      </sect3>
    </sect2>

    <sect2>
      <title>&lt;ui:checkboxDisplay&gt;</title>

      <para>Form checkbox <emphasis>display</emphasis> field, represents
      <literal>CheckboxControl</literal>. By default
      <literal>styleClass="aranea-checkbox-display"</literal>. Rendered in
      HTML inside <literal>&lt;span&gt;</literal> tag.</para>

      <sect3>
        <title>Attributes</title>

        <emphasis>Has standard <literal>id</literal> and
        <literal>styleClass</literal> attributes.</emphasis>
      </sect3>
    </sect2>

    <!-- fileupload -->

    <sect2>
      <title>&lt;ui:fileUpload&gt;</title>

      <para>Form file upload field, represents
      <literal>FileUploadControl</literal>.</para>

      <sect3>
        <title>Attributes</title>

        <emphasis>Has all common form element rendering attributes.</emphasis>
      </sect3>

      <sect3>
        <title>Examples</title>

        <programlisting role="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
...
&lt;ui:form id="uploadForm"&gt;
   &lt;ui:row&gt;
       &lt;ui:cell styleClass="name"&gt;
           &lt;ui:fileUpload id="file"/&gt;
       &lt;/ui:cell&gt;
   &lt;/ui:row&gt;
&lt;/ui:form&gt;
...</programlisting>
      </sect3>
    </sect2>

    <!-- dateinput -->

    <sect2>
      <title>&lt;ui:dateInput&gt;</title>

      <para>Form date input field, represents <literal>DateControl</literal>.
      Default <literal>styleClass="aranea-date"</literal>.</para>

      <sect3>
        <title>Attributes</title>

        <informaltable frame="topbot">
          <tgroup cols="3">
            <colspec colwidth="2*" />

            <colspec colwidth="1*" />

            <colspec colwidth="4*" />

            <thead>
              <row>
                <entry>Attribute</entry>

                <entry>Required</entry>

                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>onChangePrecondition</entry>

                <entry>
                  <emphasis>no</emphasis>
                </entry>

                <entry>Precondition for deciding whether registered onchange
                event should go server side or not. If left unspecified, this
                is considered to be <literal>true</literal>.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <emphasis>Also has all common form element rendering
        attributes.</emphasis>
      </sect3>
    </sect2>

    <sect2>
      <title>&lt;ui:dateInputDisplay&gt;</title>

      <para>Form date display field, represents
      <literal>DateControl</literal>. Default
      <literal>styleClass="aranea-date-display"</literal>.</para>

      <sect3>
        <title>Attributes</title>

        <emphasis>Has standard <literal>id</literal> and
        <literal>styleClass</literal> attributes.</emphasis>
      </sect3>
    </sect2>

    <!-- timeinput -->

    <sect2>
      <title>&lt;ui:timeInput&gt;</title>

      <para>Form time input field, represents <literal>TimeControl</literal>.
      Default <literal>styleClass="aranea-time"</literal>. HTML &lt;select&gt;s for easy hour/minute selection
      are rendered too, unless <literal>showTimeSelect</literal> attribute forbids it.</para>

      <sect3>
        <title>Attributes</title>

        <informaltable frame="topbot">
          <tgroup cols="3">
            <colspec colwidth="2*" />

            <colspec colwidth="1*" />

            <colspec colwidth="4*" />

            <thead>
              <row>
                <entry>Attribute</entry>

                <entry>Required</entry>

                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>onChangePrecondition</entry>

                <entry>
                  <emphasis>no</emphasis>
                </entry>

                <entry>Precondition for deciding whether registered onchange
                event should go server side or not. If left unspecified, this
                is considered to be <literal>true</literal>.</entry>
              </row>
              
              <row>
                <entry>showTimeSelect</entry>

                <entry>
                  <emphasis>no</emphasis>
                </entry>

                <entry>
                	Boolean, specifying whether HTML &lt;select&;gt;'s should be rendered for easy hour/minute selection.
                	Default is to render them (<literal>true</literal>).
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <emphasis>Also has all common form element rendering
        attributes.</emphasis>
      </sect3>
    </sect2>

    <sect2>
      <title>&lt;ui:timeInputDisplay&gt;</title>

      <para>Form time display field, represents
      <literal>TimeControl</literal>. Default
      <literal>styleClass="aranea-time-display"</literal>.</para>

      <sect3>
        <title>Attributes</title>

        <emphasis>Has standard <literal>id</literal> and
        <literal>styleClass</literal> attributes.</emphasis>
      </sect3>
    </sect2>

    <sect2>
      <title>&lt;ui:dateTimeInput&gt;</title>

      <para>Form input field for both date and time, represents
      <literal>DateTimeControl</literal>. It is rendered as input fields for date and time + date picker and
      time picker (time picker can be switched off by setting <literal>showTimeSelect="false"</literal> if so desired).</para>
      <sect3>
        <title>Attributes</title>

        <informaltable frame="topbot">
          <tgroup cols="3">
            <colspec colwidth="2*" />

            <colspec colwidth="1*" />

            <colspec colwidth="4*" />

            <thead>
              <row>
                <entry>Attribute</entry>

                <entry>Required</entry>

                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>onChangePrecondition</entry>

                <entry>
                  <emphasis>no</emphasis>
                </entry>

                <entry>Precondition for deciding whether registered onchange
                event should go server side or not. If left unspecified, this
                is considered to be <literal>true</literal>.</entry>
              </row>
              
              <row>
                <entry>showTimeSelect</entry>

                <entry>
                  <emphasis>no</emphasis>
                </entry>

                <entry>
                	Boolean, specifying whether HTML &lt;select&;gt;'s should be rendered for easy hour/minute selection.
                	Default is to render them (<literal>true</literal>).
                </entry>
              </row>

              <row>
                <entry>dateStyleClass</entry>

                <entry>
                  <emphasis>no</emphasis>
                </entry>

                <entry><emphasis>styleClass</emphasis> for date. Default is
                "aranea-date".</entry>
              </row>

              <row>
                <entry>timeStyleClass</entry>

                <entry>
                  <emphasis>no</emphasis>
                </entry>

                <entry><emphasis>styleClass</emphasis> for time. Default is
                "aranea-time".</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <emphasis>Also has all common form element rendering
        attributes.</emphasis>
      </sect3>
    </sect2>

    <sect2>
      <title>&lt;ui:dateTimeInputDisplay&gt;</title>

      <para>Form display field for both date and time, represents
      <literal>TimeControl</literal>. Default
      <literal>styleClass="aranea-datetime-display"</literal>.</para>

      <sect3>
        <title>Attributes</title>

        <emphasis>Has standard <literal>id</literal> and
        <literal>styleClass</literal> attributes.</emphasis>
      </sect3>
    </sect2>

    <!-- SELECT -->

    <sect2>
      <title>&lt;ui:select&gt;</title>

      <para>Form dropdown list input field, represents
      <literal>SelectControl</literal>. Default
      <literal>styleClass="aranea-select"</literal>, rendered with HTML
      <literal>&lt;select ...&gt;</literal> tag.</para>

      <sect3>
        <title>Attributes</title>

        <informaltable frame="topbot">
          <tgroup cols="3">
            <colspec colwidth="2*" />

            <colspec colwidth="1*" />

            <colspec colwidth="4*" />

            <thead>
              <row>
                <entry>Attribute</entry>

                <entry>Required</entry>

                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>onChangePrecondition</entry>

                <entry>
                  <emphasis>no</emphasis>
                </entry>

                <entry>Precondition for deciding whether registered onchange
                event should go server side or not. If left unspecified, this
                is considered to be <literal>true</literal>.</entry>
              </row>

              <row>
                <entry>size</entry>

                <entry>
                  <emphasis>no</emphasis>
                </entry>

                <entry>Number of select elements visible at once.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <emphasis>Also has all common form element rendering
        attributes.</emphasis>
      </sect3>
    </sect2>

    <!-- SELECTDISPLAY -->

    <sect2>
      <title>&lt;ui:selectDisplay&gt;</title>

      <para>Form select display field, represents
      <literal>SelectControl</literal>. Default
      <literal>styleClass="aranea-select-display"</literal>, rendered with
      HTML <literal>&lt;span ...&gt;</literal> tag.</para>

      <sect3>
        <title>Attributes</title>

        <emphasis>Has standard <literal>id</literal> and
        <literal>styleClass</literal> attributes.</emphasis>
      </sect3>
    </sect2>

    <!-- MULTISELECT -->

    <sect2>
      <title>&lt;ui:multiSelect&gt;</title>

      <para>Form list input field, represents
      <literal>MultiSelectControl</literal>. Default
      <literal>styleClass="aranea-multi-select"</literal>, rendered with HTML
      <literal>&lt;select multiple="true" ...&gt;</literal> tag.</para>

      <sect3>
        <title>Attributes</title>

        <informaltable frame="topbot">
          <tgroup cols="3">
            <colspec colwidth="2*" />

            <colspec colwidth="1*" />

            <colspec colwidth="4*" />

            <thead>
              <row>
                <entry>Attribute</entry>

                <entry>Required</entry>

                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>size</entry>

                <entry>
                  <emphasis>no</emphasis>
                </entry>

                <entry>Vertical size, number of options displayed at
                once.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <emphasis>Also has all common form element rendering
        attributes.</emphasis>
      </sect3>
    </sect2>

    <!-- MULTISELECTDISPLAY -->

    <sect2>
      <title>&lt;ui:multiSelectDisplay&gt;</title>

      <para>Form multiselect display field, represents
      <literal>MultiSelectControl</literal>. Default
      <literal>styleClass="aranea-multi-select-display"</literal>, rendered
      with HTML <literal>&lt;span ...&gt;</literal> tag.</para>

      <sect3>
        <title>Attributes</title>

        <informaltable frame="topbot">
          <tgroup cols="3">
            <colspec colwidth="2*" />

            <colspec colwidth="1*" />

            <colspec colwidth="4*" />

            <thead>
              <row>
                <entry>Attribute</entry>

                <entry>Required</entry>

                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>separator</entry>

                <entry>
                  <emphasis>no</emphasis>
                </entry>

                <entry>The separator between list items, can be any string or
                '\n' for newline. Default is ', ').</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <emphasis>Has standard <literal>id</literal> and
        <literal>styleClass</literal> attributes.</emphasis>
      </sect3>
    </sect2>

    <!-- RADIOSELECT -->

    <sect2>
      <title>&lt;ui:radioSelect&gt;</title>

      <para>Form radioselect buttons field, represents
      <literal>SelectControl</literal>. Default
      <literal>styleClass="aranea-radioselect"</literal>. It takes care of
      rendering all its elements; internally using
      &lt;ui:radioSelectItemLabel&gt; and &lt;ui:radioSelectItem&gt;
      tags.</para>

      <sect3>
        <title>Attributes</title>

        <informaltable frame="topbot">
          <tgroup cols="3">
            <colspec colwidth="2*" />

            <colspec colwidth="1*" />

            <colspec colwidth="4*" />

            <thead>
              <row>
                <entry>Attribute</entry>

                <entry>Required</entry>

                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>type</entry>

                <entry>
                  <emphasis>no</emphasis>
                </entry>

                <entry>The way the radio buttons will be rendered - can be
                either <emphasis>vertical</emphasis> or
                <emphasis>horizontal</emphasis>. By default
                "horizontal".</entry>
              </row>

              <row>
                <entry>labelBefore</entry>

                <entry>
                  <emphasis>no</emphasis>
                </entry>

                <entry>Boolean that controls whether label is before or after
                each radio button, <literal>false</literal> by
                default.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <emphasis>Has all common form element rendering attributes.</emphasis>
      </sect3>
    </sect2>

    <!-- RADIOSELECTITEM -->

    <sect2>
      <title>&lt;ui:radioSelectItem&gt;</title>

      <para>Form radio button, represents one item from
      <literal>SelectControl</literal>. Default
      <literal>styleClass="aranea-radio"</literal>. It will be rendered with
      HTML <literal>&lt;input type="radio" ...&gt;</literal> tag.</para>

      <sect3>
        <title>Attributes</title>

        <informaltable frame="topbot">
          <tgroup cols="3">
            <colspec colwidth="2*" />

            <colspec colwidth="1*" />

            <colspec colwidth="4*" />

            <thead>
              <row>
                <entry>Attribute</entry>

                <entry>Required</entry>

                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>value</entry>

                <entry>
                  <emphasis>no</emphasis>
                </entry>

                <entry>The value of this radio button that will be submitted
                with form if this radio button is selected.</entry>
              </row>

              <row>
                <entry>onChangePrecondition</entry>

                <entry>
                  <emphasis>no</emphasis>
                </entry>

                <entry>Precondition for deciding whether registered onchange
                event should go server side or not. If left unspecified, this
                is considered to be <literal>true</literal>.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <emphasis>Has all common form element rendering attributes.</emphasis>
      </sect3>
    </sect2>

    <!-- RADIOSELECTITEMLABEL -->

    <sect2>
      <title>&lt;ui:radioSelectItemLabel&gt;</title>

      <para>Form radio button label, represents label of one item from
      <literal>SelectControl</literal>. It will be rendered with HTML
      <literal>&lt;span ...&gt;</literal> tag.</para>

      <sect3>
        <title>Attributes</title>

        <informaltable frame="topbot">
          <tgroup cols="3">
            <colspec colwidth="2*" />

            <colspec colwidth="1*" />

            <colspec colwidth="4*" />

            <thead>
              <row>
                <entry>Attribute</entry>

                <entry>Required</entry>

                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>value</entry>

                <entry>
                  <emphasis>no</emphasis>
                </entry>

                <entry>Select item value.</entry>
              </row>

              <row>
                <entry>showMandatory</entry>

                <entry>
                  <emphasis>no</emphasis>
                </entry>

                <entry>Indicates whether label for mandatory input is marked
                with asterisk. Value should be <literal>true</literal> or
                <literal>false</literal>, default is
                <literal>true</literal>.</entry>
              </row>

              <row>
                <entry>showColon</entry>

                <entry>
                  <emphasis>no</emphasis>
                </entry>

                <entry>Indicates whether colon is shown between the label and
                value. Default is <literal>true</literal></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <emphasis>Also has standard <literal>id</literal> and
        <literal>styleClass</literal> attributes.</emphasis>
      </sect3>
    </sect2>

    <!-- checkboxMultiSelect -->

    <sect2>
      <title>&lt;ui:checkboxMultiSelect&gt;</title>

      <para>Form multiselect checkbox field, represents
      <literal>MultiSelectControl</literal>. It takes care of rendering all
      its elements; internally using &lt;ui:checkboxMultiSelectItemLabel&gt;
      and &lt;ui:checkboxMultiSelectItem&gt; tags.</para>

      <sect3>
        <title>Attributes</title>

        <informaltable frame="topbot">
          <tgroup cols="3">
            <colspec colwidth="2*" />

            <colspec colwidth="1*" />

            <colspec colwidth="4*" />

            <thead>
              <row>
                <entry>Attribute</entry>

                <entry>Required</entry>

                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>type</entry>

                <entry>
                  <emphasis>no</emphasis>
                </entry>

                <entry>The way the checkboxes will be rendered - can be either
                <emphasis>vertical</emphasis> or
                <emphasis>horizontal</emphasis>. Default is
                <emphasis>horizontal</emphasis>.</entry>
              </row>

              <row>
                <entry>labelBefore</entry>

                <entry>
                  <emphasis>no</emphasis>
                </entry>

                <entry>Boolean that controls whether label is before or after
                each cehckbox, <literal>false</literal> by default.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <emphasis>Also has all common form element rendering
        attributes.</emphasis>
      </sect3>
    </sect2>

    <!-- checkboxMultiSelectItem -->

    <sect2>
      <title>&lt;ui:checkboxMultiSelectItem&gt;</title>

      <para>Form radio button, represents one item from
      <literal>MultiSelectControl</literal>. Default
      <literal>styleClass="aranea-multi-checkbox"</literal>. It will be
      rendered with HTML <literal>&lt;input type="checkbox" ...&gt;</literal>
      tag.</para>

      <sect3>
        <title>Attributes</title>

        <informaltable frame="topbot">
          <tgroup cols="3">
            <colspec colwidth="2*" />

            <colspec colwidth="1*" />

            <colspec colwidth="4*" />

            <thead>
              <row>
                <entry>Attribute</entry>

                <entry>Required</entry>

                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>value</entry>

                <entry>
                  <emphasis>no</emphasis>
                </entry>

                <entry>The value of this checkbox that will be submitted with
                form if this checkbox is selected.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <emphasis>Has all common form element rendering attributes.</emphasis>
      </sect3>
    </sect2>

    <!-- checkboxMultiSelectItemLabel -->

    <sect2>
      <title>&lt;ui:checkboxMultiSelectItemLabel&gt;</title>

      <para>Form checkbox label, represents label of one item from
      <literal>MultiSelectControl</literal>. It will be rendered with HTML
      <literal>&lt;span ...&gt;</literal> tag.</para>

      <sect3>
        <title>Attributes</title>

        <informaltable frame="topbot">
          <tgroup cols="3">
            <colspec colwidth="2*" />

            <colspec colwidth="1*" />

            <colspec colwidth="4*" />

            <thead>
              <row>
                <entry>Attribute</entry>

                <entry>Required</entry>

                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>value</entry>

                <entry>
                  <emphasis>no</emphasis>
                </entry>

                <entry>Select item value.</entry>
              </row>

              <row>
                <entry>showMandatory</entry>

                <entry>
                  <emphasis>no</emphasis>
                </entry>

                <entry>Indicates whether label for mandatory input is marked
                with asterisk. Value should be <literal>true</literal> or
                <literal>false</literal>, default is
                <literal>true</literal>.</entry>
              </row>

              <row>
                <entry>showColon</entry>

                <entry>
                  <emphasis>no</emphasis>
                </entry>

                <entry>Indicates whether colon is shown between the label and
                value. Default is <literal>true</literal></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <emphasis>Also has standard <literal>id</literal> and
        <literal>styleClass</literal> attributes.</emphasis>
      </sect3>
    </sect2>

    <!-- conditionalDisplay -->

    <sect2>
      <title>&lt;ui:conditionalDisplay&gt;</title>

      <para>Depending whether form element boolean value is
      <emphasis>true</emphasis> or <emphasis>false</emphasis> display one or
      other content, represents <literal>DisplayControl</literal>.
      <literal>&lt;ui:conditionFalse&gt;</literal> and
      <literal>&lt;ui:conditionFalse&gt;</literal> tags must be used inside
      this tag to define alternative contents. This tag itself is not
      rendered.</para>

      <sect3>
        <title>Attributes</title>

        <emphasis>Has standard <literal>id</literal> attribute.</emphasis>
      </sect3>
    </sect2>

    <!-- conditionFalse -->

    <sect2>
      <title>&lt;ui:conditionFalse&gt;</title>

      <para>The content of this tag will be displayed when form element of
      surrounding <literal>&lt;ui:conditionalDisplay&gt;</literal> was
      <literal>false</literal>. Tag has no attributes.</para>
    </sect2>

    <!-- conditionTrue -->

    <sect2>
      <title>&lt;ui:conditionTrue&gt;</title>

      <para>The content of this tag will be displayed when form element of
      surrounding <literal>&lt;ui:conditionalDisplay&gt;</literal> was
      <literal>true</literal>. Tag has no attributes.</para>

      <sect3>
        <title>Examples</title>

        <programlisting role="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;ui:form id="someForm"&gt;
  &lt;ui:conditionalDisplay id="isActive"&gt;
    &lt;ui:conditionTrue&gt;
      &lt;img src="red_flag.png"/&gt;
    &lt;/ui:conditionTrue&gt;
    &lt;ui:conditionFalse&gt;
      &lt;img src="green_flag.png"/&gt;
    &lt;/ui:conditionFalse&gt;
  &lt;/ui:conditionalDisplay&gt;
&lt;/ui:form&gt;</programlisting>
      </sect3>
    </sect2>

    <sect2>
      <title>&lt;ui:listDisplay&gt;</title>

      <para>Display form element value as list of strings, represents
      <literal>DisplayControl</literal> and requires that element value would
      be of type <literal>Collection</literal>.</para>

      <sect3>
        <title>Attributes</title>

        <informaltable frame="topbot">
          <tgroup cols="3">
            <colspec colwidth="2*" />

            <colspec colwidth="1*" />

            <colspec colwidth="4*" />

            <thead>
              <row>
                <entry>Attribute</entry>

                <entry>Required</entry>

                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>separator</entry>

                <entry>
                  <emphasis>no</emphasis>
                </entry>

                <entry>The separator between list items, can be any string and
                "\n", meaning a newline (default is "\n").</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <emphasis>Also has standard <literal>id</literal> and
        <literal>styleClass</literal> attributes.</emphasis>
      </sect3>
    </sect2>

    <sect2>
      <title>&lt;ui:automaticFormElement&gt;</title>

      <para>Sometimes the type of <literal>FormElement</literal> is not known
      for sure when writing JSP (it could be <literal>textInput</literal>,
      <literal>floatInput</literal>, <literal>select</literal>, ...). For that
      purpose, <literal>FormElement</literal> that has some known identifier
      can be dynamically associated with some JSP tag in Java code and then
      rendered with <literal>&lt;ui:automaticFormElement&gt;</literal> tag
      which uses associated tag to render
      <literal>FormElement</literal>.</para>

      <sect3>
        <title>Attributes</title>

        <emphasis>Has all common form element rendering attributes.</emphasis>
      </sect3>

      <sect3>
        <title>Examples</title>

        <para>In Java code, setting tag that should rendering element is done
        by setting <literal>FormElement</literal> property. <programlisting
        role="java">element.setProperty(FormElementViewSelector.FORM_ELEMENT_VIEW_SELECTOR_PROPERTY, new FormElementViewSelector(tag, attributes));
</programlisting></para>

        <para><programlisting role="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;ui:formElement id="someForm"&gt;
  &lt;ui:cell&gt;
    &lt;ui:automaticFormElement/&gt;
  &lt;/ui:cell&gt;
&lt;/ui:formElement&gt;
</programlisting></para>
      </sect3>
    </sect2>
  </sect1>

  <sect1 id="form_lists">
    <title>Form Lists</title>

    <para>A common need in handling data is allowing a user to list of data,
    where the number of rows is not known beforehand (a typical example being
    user inputting one to many addresses). Aranea supports such a use case by
    providing a special type of <literal>FormElement</literal> that deals an
    arbitrary amount of subforms. This element is called
    <literal>FormListWidget</literal> and it can be used both on its own or as
    a subelement just like a <literal>FormWidget</literal>. An example of a
    form list is shown on <xref linkend="person-form-list" />.</para>

    <figure id="person-form-list">
      <title>Insert your name display</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="../images/formList.png" format="PNG" />
        </imageobject>
      </mediaobject>
    </figure>

    <sect2>
      <title>FormListWidget</title>

      <para>Unlike usual forms, form lists are "lazy", from the point that
      they are tied to a model and update themselves according to it. To
      create a form list widget we pass it a model and a handler:</para>

      <programlisting role="java">... 
  public void init() throws Exception {
    private FormListWidget personFormList;
    ...
    Map persons = lookupMyService().getPersons();

    personFormList = new BeanFormListWidget(
        new PersonFormRowHandler(),
        new MapFormListModel(persons),
        Person.class);

    addWidget("personFormList", personFormList);
  }
...</programlisting>

      <para>Note here that we have tied the form list to the model that uses a
      <literal>Map</literal> as the underlying storage. When we update that
      map, the form list will also be updated. Note also that the form list
      widget is associated with the <literal>Person</literal> bean class,
      which can be used to manipulate the beans under the model.</para>

      <para>However this code doesn't yet tell us much. The bulk of the custom
      logic of the form lists is hidden in the
      <literal>PersonFormRowHandler</literal> class. Let's inspect it step by
      step.</para>

      <para>Every form row handler must implement the
      <literal>FormRowHandler</literal> interface. In our case we choose to
      extend <literal>ValidOnlyIndividualFormRowHandler</literal>, which
      processes only valid form rows and allows to process them one by one,
      not all at once:</para>

      <programlisting role="java">class PersonFormRowHandler
  extends ValidOnlyIndividualFormRowHandler {
  ...
}</programlisting>

      <para>The first method we have to implement is
      <literal>getRowKey</literal>. It is used by the form list widget to
      identify the row among the others. Since typically the row is just a
      bean we can identify it using its identifier (either a natural one or
      artificial, as long as its unique in this context):</para>

      <programlisting role="java">...
public Object getRowKey(Object rowData) {
  return ((Person) rowData).getId();
}
...</programlisting>

      <para>The next method is called <literal>initAddForm</literal> and it
      will create a form used to add new rows to the form list:</para>

      <programlisting role="java">...
public void initAddForm(FormWidget addForm) throws Exception {
  addForm.addBeanElement("name", "#First name", new TextControl(), true);
  addForm.addBeanElement("surname", "#Last name", new TextControl(),  true);
  addForm.addBeanElement("phone", "#Phone no", new TextControl(), false);

  FormListUtil.addAddButtonToAddForm("#", formList, addForm);
}
...</programlisting>

      <para>The bulk of the logic is just adding the fields to the add form.
      But we also use the <literal>FormListUtil</literal> to add a button
      "Add" to the form, that will take care of the actual adding a new row
      (or at least calling the form row handler to do that).
      <literal>FormListUtil</literal> contains a lot of helpful methods for
      manipulating form lists and more on it can be found in <xref
      linkend="form-list-util" />. The next step would be to handle the user
      clicking the add button and add a new row to the model. Since we process
      only valid rows the method will be named
      <literal>addValidRow</literal>:</para>

      <programlisting role="java">...
public void addValidRow(FormWidget addForm) throws Exception {
  Person person = (Person) (((BeanFormWidget)addForm).readBean(new Person()));
  //We want to save changes immediately
  person = lookupPersonService.addPerson(person);
  data.add(person.getId(), person);
}
...</programlisting>

      <para>Note that although we save the changes here immediately, form
      lists also support deferring this until some later point as described in
      <xref linkend="form-list-in-memory-helper" />. Now that we have added a
      row to the model we will also have to initialize a form for that using
      <literal>initFormRow</literal> method:</para>

      <programlisting role="java">...
public void initFormRow(FormRow formRow, Object rowData) throws Exception {
  // Set initial status of list rows to closed - they cannot be edited before opened.
  formRow.close();

  BeanFormWidget form = (BeanFormWidget)formRow.getForm();

  form.addBeanElement("name", "#First name", new TextControl(), true);
  form.addBeanElement("surname", "#Last name", new TextControl(),  true);
  form.addBeanElement("phone", "#Phone no", new TextControl(), false);

  FormListUtil.addEditSaveButtonToRowForm("#", formList, form, getRowKey(rowData));
  FormListUtil.addDeleteButtonToRowForm("#", formList, form, getRowKey(rowData));

  form.writeBean(rowData);
}
...</programlisting>

      <para>Note that most of the fields are same for add form and edit forms,
      so in a real setup we could easily have added a method
      <literal>addCommonFields(FormWidget)</literal> that would add those
      fields to any given form (it is actually a very common idiom to do
      that). Finally we have to handle the saving of row form:</para>

      <programlisting role="java">...
public void saveValidRow(FormRow formRow) throws Exception {
  BeanFormWidget form = (BeanFormWidget) formRow.getForm();
  Person person = (Person) form.readBean(data.get(formRow.getKey()));

  lookupPersonService().save(rowData);
  data.put(person.getId(), person);
}
...</programlisting>

      <para>And the last one left is deletion:</para>

      <programlisting role="java">...
public void deleteRow(Object key) throws Exception {
  Long id = (Long) key;
  lookupPersonService().remove(id);
  data.remove(id);
}
...</programlisting>
    </sect2>

    <sect2 id="form-list-util">
      <title>FormListUtil</title>

      <para><literal>FormListUtil</literal> provides a couple of methods that
      help to handle form maps passed to some of the handler methods. However
      of main interest are the methods that add various buttons with ready
      logic to the add forms and row forms.</para>

      <informaltable frame="topbot">
        <tgroup cols="2">
          <colspec colwidth="1*" />

          <colspec colwidth="2*" />

          <thead>
            <row>
              <entry>Method</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><literal>addSaveButtonToRowForm()</literal></entry>

              <entry>Button that will save the current row.</entry>
            </row>

            <row>
              <entry><literal>addDeleteButtonToRowForm()</literal></entry>

              <entry>Button that will delete the current row.</entry>
            </row>

            <row>
              <entry><literal>addOpenCloseButtonToRowForm()</literal></entry>

              <entry>Button that will open or close the current row for
              editing (it inverts the current state).</entry>
            </row>

            <row>
              <entry><literal>addEditSaveButtonToRowForm()</literal></entry>

              <entry>Button that will open/close the row for editing, however
              will also save it after editing is finished and the row is
              closed.</entry>
            </row>

            <row>
              <entry><literal>addAddButtonToAddForm()</literal></entry>

              <entry>Button that will add a new row, should be added to the
              addition form.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>

    <sect2>
      <title>Form Row Handlers</title>

      <para>Since row form handler interface supports bulk
      saving/adding/deleting of row forms it is comfortable to use one of the
      base classes that will do some of the work for you.</para>

      <informaltable frame="topbot">
        <tgroup cols="2">
          <colspec colwidth="2*" />

          <colspec colwidth="3*" />

          <thead>
            <row>
              <entry>Class</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><literal>DefaultFormRowHandler</literal></entry>

              <entry>Implements all of the menthods and default handling of
              opening/closing rows.</entry>
            </row>

            <row>
              <entry><literal>ValidOnlyFormRowHandler</literal></entry>

              <entry>Checks that all of the added/saved rows are
              valid.</entry>
            </row>

            <row>
              <entry><literal>IndividualFormRowHandler</literal></entry>

              <entry>Supports one by one processing of row saving and
              deleting.</entry>
            </row>

            <row>
              <entry><literal>ValidOnlyIndividualFormRowHandler</literal></entry>

              <entry>Supports one by one processing of row saving and
              deleting. Checks that all of the added/saved rows are
              valid.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>Note that row handlers also have an
      <literal>openOrCloseRow</literal> method that may be overridden if one
      wants more than just inverting the row state on user action.</para>
    </sect2>

    <sect2>
      <title>Models</title>
    </sect2>

    <sect2 id="form-list-in-memory-helper">
      <title>In Memory Form List</title>

      <para>Often it is the case that we do not want to save the changes in
      the form list to the database until the user presses the "Save" button.
      For such a use case we provide
      <literal>InMemoryFormListHelper</literal>. To use the helper we first
      need to initialize the form list to use the helper model:</para>

      <programlisting role="java">...
private BeanFormListWidget personFormList;
private InMemoryFormListHelper inMemoryHelper;

public void init() throws Exception {
  private FormListWidget personFormList;
  ...
  Map persons = lookupMyService().getPersons();

  personFormList = new BeanFormListWidget(new PersonFormRowHandler(), Person.class);
  inMemoryHelper = new InMemoryFormListHelper(
    personFormList,
    lookupPersonService().getSomePersonList());

  addWidget("personFormList", personFormList);
}
...</programlisting>

      <para>Now we just have to add/save/delete the row to/from the
      helper:</para>

      <programlisting role="java">...
public void saveValidRow(FormRow editableRow) throws Exception {
  ...
  inMemoryHelper.update(editableRow.getKey(), rowData);
}

public void deleteRow(Object key) throws Exception {
  ...
  inMemoryHelper.delete(key);
}

public void addValidRow(FormWidget addForm) throws Exception {
  ...
  inMemoryHelper.add(rowData);
}
...</programlisting>

      <para>And when the user presses "Save" we can just process the
      changes:</para>

      <programlisting role="java">...
protected void handleEventSave() {
  lookupPersonService.addAll(inMemoryHelper.getAdded().values());
  lookupPersonService.saveAll(inMemoryHelper.getUpdated().values());
  lookupPersonService.deleteAll(inMemoryHelper.getDeleted());
}
...</programlisting>
    </sect2>
  </sect1>

  <sect1>
    <title>Form Lists JSP Tags</title>

    <sect2>
      <title>&lt;ui:formList&gt;</title>

      <para>Formlist is a list of forms, an editable list. This tag specifies
      editable list context for its inner tags.</para>

      <sect3>
        <title>Attributes</title>

        <informaltable frame="all">
          <tgroup cols="3">
            <colspec colwidth="2*" />

            <colspec colwidth="1*" />

            <colspec colwidth="4*" />

            <thead>
              <row>
                <entry>Attribute</entry>

                <entry>Required</entry>

                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>id</entry>

                <entry><emphasis>no</emphasis></entry>

                <entry>Id of editable list. When not specified, attempt is
                made to construct it from existing list context—it this does
                not succeed, tag fails.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

      <sect3>
        <title>Variables</title>

        <informaltable frame="all">
          <tgroup cols="3">
            <colspec colwidth="2*" />

            <colspec colwidth="5*" />

            <colspec align="center" colwidth="2*" />

            <thead>
              <row>
                <entry>Variable</entry>

                <entry>Description</entry>

                <entry>Type</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>formList</entry>

                <entry>Editable list view model.</entry>

                <entry><literal>FormListWidget.ViewModel</literal></entry>
              </row>

              <row>
                <entry>formListId</entry>

                <entry>Editable list id.</entry>

                <entry><literal>String</literal></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

      <sect3>
        <title>Examples</title>

        <programlisting role="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;ui:list id="list"&gt;
    &lt;ui:formList&gt;
       ...
    &lt;/ui:formList&gt;
&lt;/ui:list&gt;</programlisting>
      </sect3>
    </sect2>

    <!-- FORMLISTROWS  -->

    <sect2>
      <title>&lt;ui:formListRows&gt;</title>

      <para>Iterating tag that gives access to each row and row form on the
      editable list current page. The editable row is accessible as
      "editableRow" variable.</para>

      <sect3>
        <title>Attributes</title>

        <informaltable frame="all">
          <tgroup cols="3">
            <colspec colwidth="2*" />

            <colspec colwidth="1*" />

            <colspec colwidth="4*" />

            <thead>
              <row>
                <entry>Attribute</entry>

                <entry>Required</entry>

                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>var</entry>

                <entry><emphasis>no</emphasis></entry>

                <entry>Name of variable that represents individual row (by
                default "row").</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

      <sect3>
        <title>Variables</title>

        <informaltable frame="all">
          <tgroup cols="3">
            <colspec colwidth="2*" />

            <colspec colwidth="5*" />

            <colspec align="center" colwidth="2*" />

            <thead>
              <row>
                <entry>Variable</entry>

                <entry>Description</entry>

                <entry>Type</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>formRow</entry>

                <entry>Current editable list row view model.</entry>

                <entry><literal>FormRow.ViewModel</literal></entry>
              </row>

              <row>
                <entry>row (unless changed with <emphasis>var</emphasis>
                attribute).</entry>

                <entry>Object held in current row.</entry>

                <entry><literal>Object</literal></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

      <sect3>
        <title>Examples</title>

        <programlisting role="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;ui:list id="list"&gt;
    &lt;ui:formList&gt;
        &lt;ui:formListRows&gt;
           ...
        &lt;/ui:formListRows&gt;
    &lt;/ui:formList&gt;
&lt;/ui:list&gt;</programlisting>
      </sect3>
    </sect2>

    <sect2>
      <title>&lt;ui:formListAddForm&gt;</title>

      <para>Allows for adding new forms (rows) to editable list.</para>

      <sect3>
        <title>Attributes</title>
        <informaltable frame="all">
          <tgroup cols="3">
            <colspec colwidth="2*" />

            <colspec colwidth="1*" />

            <colspec colwidth="4*" />

            <thead>
              <row>
                <entry>Attribute</entry>

                <entry>Required</entry>

                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>id</entry>

                <entry><emphasis>no</emphasis></entry>

                <entry>Editable list id. Searched from context, if not
                specified.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

    <sect3>
        <title>Variables</title>

        <informaltable frame="topbot">
          <tgroup cols="3">
            <colspec colwidth="2*" />

            <colspec colwidth="5*" />

            <colspec align="center" colwidth="2*" />

            <thead>
              <row>
                <entry>Variable</entry>

                <entry>Description</entry>

                <entry>Type</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>form</entry>

                <entry>View model of form.</entry>

                <entry><literal>FormWidget.ViewModel</literal></entry>
              </row>
              
              <row>
                <entry>formId</entry>

                <entry>Id of form.</entry>

                <entry><literal>String</literal></entry>
              </row>
              
               <row>
                <entry>formFullId</entry>
                <entry>Full id of form.</entry>
                <entry><literal>String</literal></entry>
              </row>
              
               <row>
                <entry>formScopedFullId</entry>
                <entry>Full scoped id of form.</entry>
                <entry><literal>String</literal></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

      <sect3>
        <title>Examples</title>

        <programlisting role="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;ui:formListAddForm&gt;
    &lt;ui:row&gt;
        &lt;ui:cell&gt;
            &lt;ui:textInput id="name"/&gt;
        &lt;/ui:cell&gt;
        
        &lt;ui:cell&gt;
            &lt;ui:textInput id="surname"/&gt;
        &lt;/ui:cell&gt;
        
        &lt;ui:cell&gt;
            &lt;ui:textInput id="phone"/&gt;
        &lt;/ui:cell&gt;
        
        &lt;ui:cell&gt;
            &lt;ui:dateInput id="birthdate"/&gt;
        &lt;/ui:cell&gt;                          
    &lt;/ui:row&gt;       
&lt;/ui:formListAddForm&gt;</programlisting>
      </sect3>
    </sect2>
  </sect1>
</chapter>