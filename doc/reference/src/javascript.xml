<!--
  Copyright 2006 Webmedia Group Ltd.
 
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<chapter id="javascript">
	<title>Javascript Libraries</title>
    
    <sect1>
       <title>Third-party Javascript Libraries</title>
           <para>
           Aranea distribution includes some third party Javascript libraries. Most of these are not needed for using Aranea 
           functionality, but extend the functionality of both framework and <emphasis>UiLib</emphasis>.
           </para>

          <sect2>
            <title>Behaviour (<ulink url="http://bennolan.com/behaviour/">http://bennolan.com/behaviour/</ulink>)</title>
            <para>
              Neat little library allowing usage of CSS selectors for applying behaviour to HTML page elements. It is required
              for full function of Aranea pages rendered with Aranea JSP tags. It has been customised to use Prototype library
              selector functions and allow behaviour addition for subtrees (without processing whole page).

              <itemizedlist spacing="compact">
                <listitem>
                  keyboard handlers are registered for form elements.
                </listitem>
                <listitem>
                  addition of urls (&lt;href=&quot;...&quot;) to page elements that allow cloning of the session thread (opening
                  link in new window&mdash;and in different session thread).
                </listitem>
              </itemizedlist>
            </para>
          </sect2> 
          
          <sect2>
            <title>The DHTML Calendar (<ulink url="http://www.dynarch.com/projects/calendar/">http://www.dynarch.com/projects/calendar/</ulink>)</title>
            <para>
               Nice DHTML calendar, required if one wants to use Aranea JSP <emphasis>&lt;ui:dateInput&gt;</emphasis> or <emphasis>&lt;ui:dateTimeInput&gt;</emphasis> tags.
            </para>
          </sect2>
          
          <sect2>
            <title>Prototype (<ulink url="http://www.prototypejs.org/">http://www.prototypejs.org/</ulink>)</title>
            <para>
               Prototype is a JavaScript framework that aims to ease development of dynamic web applications. Aranea JSP
               aims to make more use of it in the future. It is a prerequisite for using Uilib's <emphasis>AutoCompleteTextControl</emphasis> 
               and action-enabled <emphasis>TreeWidget</emphasis> components. 
            </para>
          </sect2>
          
          <sect2>
            <title>script.aculo.us (<ulink url="http://script.aculo.us/">http://script.aculo.us/</ulink>)</title>
            <para>
               script.aculo.us provides easy-to-use, cross-browser user interface JavaScript libraries. Only subset of script.aculo.us
               libraries are included&mdash; JSP tags that depends on them are <emphasis>&lt;ui:autoCompleteTextInput&gt;</emphasis>
               and <emphasis>&lt;ui:tooltip&gt;</emphasis>.
            </para>
          </sect2>

          <sect2>
            <title>TinyMCE (<ulink url="http://tinymce.moxiecode.com/">http://tinymce.moxiecode.com/</ulink>)</title>
            <para>
               TinyMCE is a platform independent web based Javascript HTML WYSIWYG editor control. Required for using Aranea 
               JSP <emphasis>&lt;ui:richTextarea&gt;</emphasis> tag.
            </para>
          </sect2>
          
          <sect2>
          	<title>Prototip (<ulink url="http://www.nickstakenburg.com/projects/prototip/">http://www.nickstakenburg.com/projects/prototip/</ulink>)</title>
          	<para>
          	  Prototip allows to easily create both simple and complex tooltips using the Prototype javascript 
          	  framework. If one also uses Scriptaculous some nice effects can be added. This is required when
          	  using JSP <emphasis>&lt;ui:tooltip&gt;</emphasis> tag.
          	</para>
          </sect2>
          
          
           <sect2>
          	<title>ModalBox (<ulink url="http://www.wildbit.com/labs/modalbox/">http://www.wildbit.com/labs/modalbox/</ulink>)</title>
          	<para>
          	  ModalBox is a JavaScript technique for creating modern modal dialogs or even wizards 
          	  (sequences of dialogs) without using conventional popups and page reloads.
          	</para>
          </sect2>

          <sect2>
            <title>log4javascript (<ulink url="http://www.timdown.co.uk/log4javascript/">http://www.timdown.co.uk/log4javascript/</ulink>)</title>
            <para>
	            Note that this is now deprecated in favour of <ulink url="http://www.getfirebug.com/">Firebug's</ulink> built in 
	            logging facilities. Logging to Firebug console is enabled with <emphasis>AraneaPage.setFirebugLogger()</emphasis>.
            </para>
            <para>
               log4javascript is a JavaScript logging framework similar to Java logging framework log4j. Include log4javascript
               scripts and call <emphasis>AraneaPage.setDefaultLogger()</emphasis> to receive a popup window where
               Aranea JS debug output is logged.
            </para>
          </sect2>
          
    </sect1>

	<sect1 id="aranea_clientside_js" xreflabel="Aranea Clientside Javascript">
		<title>Aranea Clientside Javascript</title>
		<para>
			Aranea uses javascript to do form submits. This provides AJAX enabled webapps and more control over
			form submitting logic. Each page served with Aranea has associated <emphasis>AraneaPage</emphasis> object:
		</para>

		<para>
<programlisting role="javascript">/* AraneaPage object is present on each page served by Aranea and contains common
 * functionality for setting/getting page related variables, events and functions. */
function AraneaPage() {
  /* Getters and setters for URL of aranea dispatcher servlet serving current page. */ 
  function getServletURL();
  function setServletURL(url);
  
  /** Indicates whether the page is completely loaded or not. Page is considered to 
   * be loaded when all system onload events have completed execution. */
  function isLoaded();
  function setLoaded(loaded);
  
  /* Returns the server-side reported locale (AraneaLocale). */
  function getLocale();

  /** Indicates whether some form on page is (being) submitted already
    * by traditional HTTP request. */
  function isSubmitted();
  /* Custom submit functions using plain HTTP request should call this before submit. */
  function setSubmitted();
  
  /** Returns Aranea JSP specific DOM tree traverser (AraneaTraverser). */
  function getTraverser();

  /** Add events that should be executed upon page load/unload to execution queue. */
  function addSystemLoadEvent(event);
  function addClientLoadEvent(event);
  function addSystemUnLoadEvent(event);

  /** Called on page load, executes registered system -- after which page is considered 
    * loaded and client load events are executed too. */
  function onload();
  /** Called on page load, executes registered unload events. */
  function onunload();
  
  /** Adds general callback executed before any form submit. */
  function addSubmitCallback(callback);

  /** Adds general callback executed before form with given id is submitted. */
  function addSubmitCallback(systemFormId, callback);

  /** Executes all callbacks that should run before submitting the form with given id. */
  function executeCallbacks(systemFormId);

  /** 
   * Chooses appropriate submitting method and submittable form given the HTML element
   * that initiated the submit request. */
  function event(element);

  /** 
   * Called by event() to determine the appropriate form submitter.
   */
  function findSubmitter(element, systemForm);

  /** another submit function, takes all params that are possible to 
    * use with Aranea JSP currently. */
  function event_6(systemForm, eventId, eventTarget, 
                    eventParam, eventPrecondition, eventUpdateRegions);
                    
  /** 
   * Provides preferred way of overriding AraneaPage object functions. 
   * @param functionName name of AraneaPage function that should be overridden. 
   * @param f replacement function 
   */
  function override(functionName, f);
  
  /** 
   * Adds keepalive function f that is executed periodically after time 
   * milliseconds has passed 
   */
  function addKeepAlive(f, time);

  /** Clears/removes all registered keepalive functions. */
  function clearKeepAlives();
  
  /** Logs message on DEBUG level, if logger is present. */
  function debug(message);
}

/** Random request id generator. Sent only with AA ajax requests.
  * Currently only purpose of it is easier debugging (identifying requests). */
function AraneaPage.getRandomRequestId();

/* Returns a default keepalive function -- to make periodical requests to expiring thread
 * or top level services. */
AraneaPage.getDefaultKeepAlive = function(topServiceId, threadServiceId, keepAliveKey);

/** Page initialization function, should be called upon page load. */
AraneaPage.init();

/* Aranea page object is accessible in two ways -- _ap and araneaPage() */
_ap = new AraneaPage();
function araneaPage() { return _ap; }</programlisting>
      </para>

	</sect1>
</chapter>
