<!--
  Copyright 2006 Webmedia Group Ltd.
 
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<chapter id="jsp">
	<title>JSP and Custom Tags</title>
  
  <sect1>
    <title>Aranea Standard Tag Library</title>

    <para>
      Aranea supports JSP rendering by providing a JSP 1.2 custom tag library that tries to abstract away from HTML and allow programming in terms of widgets, layouts and logical GUI elements. The tag library URI is "http://araneaframework.org/tag-library/standard" and it is contained in <literal>aranea-presentation.jar</literal>, so putting this JAR in the classpath (e.g. <literal>WEB-INF/lib</literal>) is enough to put it to work. Library tags support JSP Expression Language that is used in JSTL 1.0. 
    </para>

    <para>
      Aranea examples use JSP XML form and in such form importing the library should look like this:
<programlisting role="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<jsp:root xmlns:jsp="http://java.sun.com/JSP/Page" 
  xmlns:ui="http://araneaframework.org/tag-library/standard" version="1.2">
  ...
</jsp:root>]]></programlisting>      
      In a usual JSP file it should look like this:
<programlisting role="jsp"><![CDATA[<%@ taglib uri="http://araneaframework.org/tag-library/standard" prefix="ui" %>
...]]></programlisting>
      The suggested prefix for the tag library is "ui".
    </para>

    <para>
      TODO: JSP 2.0 support, expression language support, types
    </para>
  </sect1>

  <sect1>
    <title>System Tags</title>

    <para>
      Aranea JSP rendering should start from some root JSP (called <emphasis>JSP template</emphasis>) that will include the root widgets. To support widgets and other custom tags one needs to make sure that the template looks something like this:
<programlisting role="xml"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<jsp:root 
  xmlns:jsp="http://java.sun.com/JSP/Page" 
  xmlns:ui="http://araneaframework.org/tag-library/standard" version="1.2">
  <ui:root>
    <ui:viewPort>
      <html>
        <head>
          <title>Aranea Template Application</title>        
          
          <ui:importScripts/>      
          <ui:importStyles/>      
   
        </head>
    
          <body>
            <ui:systemForm method="POST">
              <h1>Aranea Template Application</h1>
              
              <ui:messages/>      

              <ui:widgetInclude id="root"/>
            </ui:systemForm>
          
        </body>   
      </html>
    </ui:viewPort>
  </ui:root>
</jsp:root>
]]></programlisting>
      Next are described all these tags except <![CDATA[<ui:widgetInclude>]]>, which is described in the following section.
    </para>
    
    <sect2>
      <title><![CDATA[<ui:root>]]></title>
      <para>
        This tag should always be the root of any Aranea template JSP. Its main function is to allow JSP access the controller.
      </para>
    </sect2>
    
    <sect2>
      <title><![CDATA[<ui:viewPort>]]></title>
      <para>
        This tag should be immediately under the &lt;ui:root&gt; tag for any application that uses widgets. It allows widgets to be rendered and included.
      </para>
    </sect2>    
    
    <sect2>
      <title><![CDATA[<ui:importScripts>]]></title>
      <para>
			Aranea comes bundled with javascript. Javascript is used to to do event calls (submits), client side validation, AJAX, use a htmleditor,
			calendar, etc. One way for
			using these javascript libraries would be to extract them from the corresponding jar's (aranea-presentation.jar and aranea-template.jar)
			and copy them to a location that your webapp can read from and then using the html capabilities (<![CDATA[<script>]]> tag) to read them in. 
			
			The <![CDATA[<ui:importScripts>]]> tag automates this process. When using with no parameters it includes all the javascript files from the
			aranea-presentation.jar. 
		</para>
		<para>
			<![CDATA[<ui:importScripts>]]> depends on the filter <emphasis>StandardServletFileImportFilterService</emphasis> being set. The filter provides
			the functionality of reading files from the jars on the server.
      </para>
      
		<sect3>
        <title>Attributes</title>
        <informaltable frame="all">
          <tgroup cols="3">
            <colspec colwidth="2*"/>
            <colspec colwidth="1*"/>
            <colspec colwidth="4*"/>
            <thead>
              <row>
                <entry>Attribute</entry>
                <entry>Required</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>includeTemplate</entry>
                <entry><emphasis>no</emphasis></entry>
                <entry>If set, all the javascript files from the aranea-template.jar are also included.</entry>
              </row>
              <row>
                <entry>file</entry>
                <entry><emphasis>no</emphasis></entry>
                <entry>Includes only the specified javascript file. Be sure to prefix the file accordingly, <emphasis>styles/xxx.css</emphasis>.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3> 
    </sect2>     

    <sect2>
      <title><![CDATA[<ui:importStyles>]]></title>
      <para>
			Aranea comes bundled with css files to provide custom look for different predefined components (the template app, calendar, htmleditor, etc.).
			Just as with javascript, to use them one would have to extract them from the jars and use them just like any other css file would be used.
			To automate this process with aranea css files one can use the <![CDATA[<ui:importStyles>]]> tag to include the css files 
			<emphasis>automatically</emphasis>.
		</para>
		<para>
			<![CDATA[<ui:importStyles>]]> depends on the filter <emphasis>StandardServletFileImportFilterService</emphasis> being set. The filter provides
			the functionality of reading files from the jars on the server.
      </para>
      
		<sect3>
        <title>Attributes</title>
        <informaltable frame="all">
          <tgroup cols="3">
            <colspec colwidth="2*"/>
            <colspec colwidth="1*"/>
            <colspec colwidth="4*"/>
            <thead>
              <row>
                <entry>Attribute</entry>
                <entry>Required</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>includeTemplate</entry>
                <entry><emphasis>no</emphasis></entry>
                <entry>If set, all the css files from the aranea-template.jar are also included.</entry>
              </row>
              <row>
                <entry>file</entry>
                <entry><emphasis>no</emphasis></entry>
                <entry>Includes only the specified css file. Be sure to prefix the file accordingly, <emphasis>styles/xxx.css</emphasis>.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3> 
    </sect2>   
    
    <sect2>
      <title><![CDATA[<ui:systemForm>]]></title>
      <para>
        This tag will render an HTML &lt;form&gt; tag along with some Aranea-specific hidden fields. When making custom web applications it is strongly suggested to have only one system form in the template and have it submit using <emphasis>POST</emphasis>. This will ensure that no matter what user does no data is ever lost. However Aranea does not impose this idiom and one may just as well submit using <emphasis>GET</emphasis>, define system forms in widgets and use usual HTML links instead of JavaScript.
      </para>
      
      <sect3>
        <title>Attributes</title>
        <informaltable frame="all">
          <tgroup cols="3">
            <colspec colwidth="2*"/>
            <colspec colwidth="1*"/>
            <colspec colwidth="4*"/>
            <thead>
              <row>
                <entry>Attribute</entry>
                <entry>Required</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>id</entry>
                <entry><emphasis>no</emphasis></entry>
                <entry>The HTML "id" of the <literal><![CDATA[<form>]]></literal> tag that may be used in JavaScript. It will be autogenerated if omitted.</entry>
              </row>
              <row>
                <entry>method</entry>
                <entry><emphasis>yes</emphasis></entry>
                <entry>HTTP submit method, either <literal>GET</literal> or <literal>POST</literal>.</entry>
              </row>
              <row>
                <entry>enctype</entry>
                <entry><emphasis>no</emphasis></entry>
                <entry>Same as HTML <literal><![CDATA[<form>]]></literal> attribute <literal>enctype</literal>, defines how form data is encoded.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>      
    </sect2>    
    
    <sect2>
      <title><![CDATA[<ui:messages>]]></title>
      <para>
        This tag will render messages of given type if they are present in current <literal>MessageContext</literal>. When type is not specified, all types of messages are rendered. As <literal>MessageContext</literal> is typically used for error messages, it is common to render these messages somewhere near top of the page, where they can easily be spotted.
      </para>
      
      <sect3>
        <title>Attributes</title>
        <informaltable frame="all">
          <tgroup cols="3">
            <colspec colwidth="2*"/>
            <colspec colwidth="1*"/>
            <colspec colwidth="4*"/>
            <thead>
              <row>
                <entry>Attribute</entry>
                <entry>Required</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>type</entry>
                <entry><emphasis>no</emphasis></entry>
                <entry>Message type.</entry>
              </row>
              <row>
                <entry>styleClass</entry>
                <entry><emphasis>no</emphasis></entry>
                <entry>CSS class applied to rendered messages, default being <literal>aranea-messages</literal>.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>
      
      <sect3>
        <title>Examples</title>
<programlisting role="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
...
<ui:messages type="info"/>
<ui:messages type="error" styleClass="custom-error-message-class"/>
<ui:messages/>
...]]></programlisting> 
      </sect3>

    </sect2>       
  </sect1>
  
  <sect1>
    <title>Widget Tags</title>

    <sect2>
      <title><![CDATA[<ui:widgetContext>]]></title>

      <para>
        This tag should generally be the root of every widget JSP. It makes the widget view model accessible as an EL variable. It can also be used to render a descendant widget in the same JSP with the current widget. In the latter case you should set the <emphasis>id</emphasis> attribute to the identifier path of the descendent widget in question. Note that all widget-related tags inside of this tag will assume that the widget in question is their parent or ancestor (that is all the identifier pathes will start from it).
      </para>

      <sect3>
        <title>Attributes</title>
        <informaltable frame="all">
          <tgroup cols="3">
            <colspec colwidth="2*"/>
            <colspec colwidth="1*"/>
            <colspec colwidth="4*"/>
            <thead>
              <row>
                <entry>Attribute</entry>
                <entry>Required</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>id</entry>
                <entry><emphasis>no</emphasis></entry>
                <entry>A dot-separated widget identifier path leading from the current context widget to the new one.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

      <sect3>
        <title>Variables</title>
        <informaltable frame="all">
          <tgroup cols="2">
            <colspec colwidth="2*"/>
            <colspec colwidth="5*"/>
            <thead>
              <row>
                <entry>Variable</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>contextWidget</entry>
                <entry>The view model of the context widget. View data can be accessed as <literal>${contextWidget.data}</literal>.</entry>
              </row>
              <row>
                <entry>contextWidgetId</entry>
                <entry>The full dot-separated identifier of the context widget.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

      <sect3>
        <title>Examples</title>
        The most common usage of <![CDATA[<ui:widgetContext>]]> is as root tag for widget JSPs:        
<programlisting role="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
...
  <ui:widgetContext>
    ...
    <c:out value="${contextWidget.data.myMessage}"/>
    ...
  </ui:widgetContext>
...]]></programlisting> 
      The other use case is to render a descendant widget:
<programlisting role="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
...
  <ui:widgetContext>
    ...
    <ui:widgetContext id="child.ofMyChild">
      <c:out value="${contextWidget.data.messageFromChildOfMyChild}"
    </ui:widgetContext>
    ...
  </ui:widgetContext>
...]]></programlisting>      
      </sect3>
    </sect2>
    
    <sect2>
      <title><![CDATA[<ui:widget>]]></title>
      <para>
        This tag is used when one needs to render a child or descendant widget while still retaining in both current widget context and JSP. It publishes the widget view model and full identifier as EL variables, but does little else and does not setup a widget context (e.g. <literal>&lt;ui:widgetInclude&gt;</literal> tag will not take it into account).
      </para>

      <sect3>
        <title>Attributes</title>
        <informaltable frame="all">
          <tgroup cols="3">
            <colspec colwidth="2*"/>
            <colspec colwidth="1*"/>
            <colspec colwidth="4*"/>
            <thead>
              <row>
                <entry>Attribute</entry>
                <entry>Required</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>id</entry>
                <entry><emphasis>yes</emphasis></entry>
                <entry>A dot-separated widget identifier path leading from the current context widget to the target widget.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

      <sect3>
        <title>Variables</title>
        <informaltable frame="all">
          <tgroup cols="2">
            <colspec colwidth="2*"/>
            <colspec colwidth="5*"/>
            <thead>
              <row>
                <entry>Variable</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>widget</entry>
                <entry>The view model of the specified widget. View data can be accessed as <literal>${widget.data}</literal>.</entry>
              </row>
              <row>
                <entry>widgetId</entry>
                <entry>The full dot-separated identifier of the specified widget.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

      <sect3>
        <title>Examples</title>
<programlisting role="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
...
  <ui:widgetContext>
    ...
    <ui:widget id="child.ofMyChild">
      <c:out value="${widget.data.messageFromChildOfMyChild}"
      <c:out value="${contextWidget.data.myMessage}"
    </ui:widget>
    ...
  </ui:widgetContext>
...]]></programlisting>      
      </sect3>
    </sect2>
    
    <sect2>
      <title><![CDATA[<ui:widgetInclude>]]></title>
      <para>
        This tag is used to render some child or descendant widget. It will call the widget's <literal>render()</literal> method, which will allow the target widget to choose how to render itself. 
      </para>

      <sect3>
        <title>Attributes</title>
        <informaltable frame="all">
          <tgroup cols="3">
            <colspec colwidth="2*"/>
            <colspec colwidth="1*"/>
            <colspec colwidth="4*"/>
            <thead>
              <row>
                <entry>Attribute</entry>
                <entry>Required</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>id</entry>
                <entry><emphasis>yes</emphasis></entry>
                <entry>A dot-separated widget identifier path leading from the current context widget to the target widget.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

      <sect3>
        <title>Examples</title>
<programlisting role="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
...
  <ui:widgetContext>
    ...
    <ui:widgetInclude id="child.ofMyChild"/>
    ...
  </ui:widgetContext>
...]]></programlisting>      
      </sect3>
    </sect2>

    <sect2>
      <title><![CDATA[<ui:globalWidgetInclude>]]></title>
      TODO (do we even need it?)
    </sect2>
    
  </sect1>
  
  <sect1>
    <title>Event-producing Tags</title>
    <sect2>
      <title><literal>updateRegions</literal> and <literal>globalUpdateRegions</literal> Attributes</title>
      TODO
    </sect2>
    
    <sect2>
      <title><![CDATA[<ui:eventButton>]]></title>
      <para>
        This tag will render a button that when clicked will send a specified event to the the target widget with an optional <literal>String</literal> parameter.
      </para>

      <sect3>
        <title>Attributes</title>
        <informaltable frame="all">
          <tgroup cols="3">
            <colspec colwidth="2*"/>
            <colspec colwidth="1*"/>
            <colspec colwidth="4*"/>
            <thead>
              <row>
                <entry>Attribute</entry>
                <entry>Required</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>id</entry>
                <entry><emphasis>no</emphasis></entry>
                <entry>HTML "id" of the element that can be used to access it via DOM.</entry>
              </row>
              <row>
                <entry>labelId</entry>
                <entry><emphasis>no</emphasis></entry>
                <entry>The key of the label that will be displayed on the button.</entry>
              </row>
              <row>
                <entry>eventId</entry>
                <entry><emphasis>no</emphasis></entry>
                <entry>The identifier of the event that will be sent to the target widget.</entry>
              </row>
              <row>
                <entry>eventParam</entry>
                <entry><emphasis>no</emphasis></entry>
                <entry><literal>String</literal> event parameter that will accompany the event.</entry>
              </row>
              <row>
                <entry>disabled</entry>
                <entry><emphasis>no</emphasis></entry>
                <entry>If set to a not null value will show the button disabled.</entry>
              </row>
              <row>
                <entry>styleClass</entry>
                <entry><emphasis>no</emphasis></entry>
                <entry>The CSS class that will override the default one.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

      <sect3>
        <title>HTML, Styles and JavaScript</title>

        <para>
          This tag writes out an HTML <literal>&lt;button&gt;</literal> tag with a default CSS class of "aranea-button".
        </para>
      </sect3>
      
      <sect3>
        <title>Examples</title>
<programlisting role="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
...
  <ui:widgetContext>
    ...
    <ui:eventButton eventId="test" eventParam="${row.id}"/>
    ...
  </ui:widgetContext>
...]]></programlisting>      
      </sect3>
    </sect2>
  </sect1>

  
  <sect1>
    <title>Putting Widgets to Work with JSP</title>

    TODO: example of Java widget working with JSP
  </sect1>
  
  <sect1>
    <title>Layout Tags</title>
  </sect1>
  
  <sect1>
    <title>Presentation Tags</title>
  </sect1>
  
  <sect1>
    <title>Programming JSPs without HTML</title>
  </sect1>
 

  <sect1>
    <title>Customizing Tag Styles</title>

    TODO: Styles and such...
  </sect1>
  
  <sect1>
    <title>Making New Tags</title>

    <sect2>
      <title>Utilities and base classes</title>
    </sect2>
    
    <sect2>
      <title>Widgets and events</title>
    </sect2>
    
    <sect2>
      <title>Layouts</title>
    </sect2>
  </sect1>

</chapter>
