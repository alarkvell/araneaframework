<!--
  Copyright 2006 Webmedia Group Ltd.
 
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<chapter id="framework">
	<title>Framework</title>
  <sect1>
    <title>Overview</title>

    <para>
      Aranea framework consists of a number of independent components each performing a single well-defined function. This classes are arranged together during deployment and usually involving an IoC container (like Spring) for configuration. These components may be simple <literal>Component</literal>s, <literal>Service</literal>s or <literal>Widget</literal>s. 
    </para>
  </sect1>
  
  <sect1>
    <title>Hosting Aranea</title>

    <sect2>
      <title>Servlet Dispatcher</title>

      <para>
        Currently, the most common way to put Aranea to work is to host it in a Servlet 2.3 or compatible container. The most generic way to do that is to extend the <literal>org.araneaframework.servlet.core.BaseAraneaDispatcherServlet</literal> and build the root component of type <literal>org.araneaframework.servlet.ServletServiceAdapterComponent</literal> in the overrided method <literal>buildRootComponent()</literal>:
<programlisting role="java">package com.foobar.myapp;

class MyServlet extends BaseAraneaDispatcherServlet {
   protected ServletServiceAdapterComponent buildRootComponent() {
     StandardServletServiceAdapterComponent root = new StandardServletServiceAdapterComponent();

     //Configure the child components, service widgets using setter injection
     //...

     return root;
   }
}</programlisting>
      And one can then use such a servlet to configure Aranea in a web application:
      <programlisting role="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE web-app PUBLIC 
  "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN" 
  "http://java.sun.com/dtd/web-app_2_3.dtd">

<web-app>
  <listener>
    <listener-class>
      org.araneaframework.servlet.core.StandardSessionListener
    </listener-class>
  </listener>

   <servlet>
      <servlet-name>araneaServlet</servlet-name>
      <servlet-class>
        org.araneaframework.ioc.spring.AraneaSpringDispatcherServlet
      </servlet-class>
      <load-on-startup>1</load-on-startup>
   </servlet>

   <servlet-mapping>
      <servlet-name>araneaServlet</servlet-name>
      <url-pattern>/main</url-pattern>
   </servlet-mapping>
</web-app>]]></programlisting>
      This will map Aranea to the web application URL ending in "/main". <literal>org.araneaframework.servlet.core.StandardSessionListener</literal> is an Aranea session listener that is needed for successful widget deinitialization.
      </para>

      <para>
        Aranea also includes several ready dispatcher servlets, which configure the root component without the need for subclassing. They are described in the next section <xref linkend="framework-configuration"/>
      </para>
    </sect2>
  </sect1>
  
  <sect1 id="framework-configuration">
    <title>Configuration</title>
     
    <para>
      Aranea uses Spring to wire the independent components into a working framework. Though other IoC containers and configuration frameworks would also work we support Spring by default since it provides a very comfortable and versatile syntax for configuring beans. The dispatcher servlet that uses Spring is called <literal>org.araneaframework.ioc.spring.AraneaSpringDispatcherServlet</literal>.
    </para>
     
    TODO: describe servlet init parameters
     
      <para>
        The simplest way to configure Aranea for a web application is to set the <literal>araneaApplicationStart</literal> init parameter of the dispatcher servlet to the starting widget or flow of the application:
      <programlisting role="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE web-app PUBLIC 
  "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN" 
  "http://java.sun.com/dtd/web-app_2_3.dtd">

<web-app>
  <listener>
    <listener-class>
      org.araneaframework.servlet.core.StandardSessionListener
    </listener-class>
  </listener>
   
   <servlet>
      <servlet-name>araneaServlet</servlet-name>
      <servlet-class>org.araneaframework.ioc.spring.AraneaSpringDispatcherServlet</servlet-class>
      <init-param>
        <param-name>araneaApplicationStart</param-name>
        <param-value>example.StartWidget</param-value>
      </init-param>
      <load-on-startup>1</load-on-startup>
   </servlet>
   
   <servlet-mapping>
      <servlet-name>araneaServlet</servlet-name>
      <url-pattern>/main</url-pattern>
   </servlet-mapping>  
</web-app>]]></programlisting>
      This configuration will load Aranea using <literal>example.StartWidget</literal> as the application starting point.
      </para>

      <para>
        Alternatively one can also specify a Spring configuration file (that should be located in <literal>/WEB-INF/aranea-conf.xml</literal>), which can also be used to configure Aranea. Particulary it may be used to set the starting widget instead of the init-parameter:
<programlisting role="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" 
  "http://www.springframework.org/dtd/spring-beans.dtd">

<beans>   
    <bean id="araneaApplicationStart" 
      class="example.StartWidget"  
      singleton="false"/>
</beans>]]></programlisting>        
      This seems to be more verbose, but it also allows to override Aranea filters:
<programlisting><![CDATA[<bean class="example.LocalizationFilterService" 
  id="araneaLocalizationFilter" singleton="false">
  <property name="languageName" value="ee"/>
</bean>]]></programlisting>        
      as well as adding one's own. 
      </para>

      TODO: describe existing Aranea filters and where new ones can be added (currently one can watch /etc/default-aranea-conf.xml in Aranea distribution).

      <para>
        Aranea configuration defaults can be overidden alltogether by providing a "araneaApplicationRoot" bean that will serve as the root component of the whole application.
      </para>
  </sect1>

  <!-- sect1>
    <title>Components</title>

    <sect2>
      <title>Core Components</title>

      StandardServletServiceAdapterComponent
      StandardSessionListener
    </sect2>
    
    <sect2>
      <title>Routers</title>
      
      <sect3>
        <title>BaseServiceRouterService, StandardTopServiceRouterService and StandardThreadServiceRouterService</title>
      </sect3>

      PathInfoServiceRouterService
      StandardServletSessionRouterService
    </sect2>
    
    <sect2>
      <title>Filters</title>

      StandardContextMapFilterWidget
      StandardContinuationFilterService
      StandardCriticalExceptionHandlingFilterService
      StandardLocalizationFilterService
      StandardMessagingFilterWidget
      StandardSerializingAuditFilterService
      StandardStatisticFilterService
      StandardSynchronizingFilterService
      StandardTransactionFilterWidget
      StandardJspFilterService
      StandardPopupFilterWidget
      StandardServletFileImportFilterService
      StandardServletFileUploadFilterService
      StandardServletHttpFilterService
    </sect2>
    
    <sect2>
      <title>Containers</title>

      StandardFlowContainerWidget
      ExceptionHandlingFlowContainerWidget
      StandardServiceAdapterWidget
      StandardServiceContainerService
      StandardViewPortWidget
      StandardWidgetAdapterService
      StandardWidgetContainerWidget
      PathInfoServiceContainerService
    </sect2>
    
    <sect2>
      <title>Other</title>
    </sect2>
  </sect1>

  <sect1>
    <title>Exception Handling</title>
  </sect1-->
</chapter>
