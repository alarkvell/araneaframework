<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2006 Webmedia Group Ltd.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<chapter id="framework">
  <title>Framework and Configuration</title>

  <sect1>
    <title>Overview</title>

    <para>Aranea framework consists of a number of independent components each
    performing a single well-defined function. Aranea uses Spring to wire
    these components into a working framework. Though other IoC containers and
    configuration frameworks would also work we support Spring by default
    since it provides a very comfortable and versatile syntax for configuring
    beans. The dispatcher servlet that uses Spring is called
    <literal>org.araneaframework.integration.spring.AraneaSpringDispatcherServlet</literal>.
    Note that Aranea itself does not depend on Spring except the classes in
    the <literal>org.araneaframework.integration.spring</literal>
    package.</para>
  </sect1>

  <sect1 id="framework-assembly">
    <title>Framework Assembly</title>

    <para>Aranea framework is made up of the same Components, Services and
    Widgets that are also used to develop Aranea applications. Each component
    performs a single well-defined function and may depend on other components
    only via Environment. The framework components mostly fall in one of the
    three following categories:</para>

    <para><variablelist>
        <varlistentry>
          <term>Filter</term>

          <listitem>
            <para>Filter components are the simplest. The component contains a
            single unnamed child and implements the
            <emphasis>Filter</emphasis> pattern by either passing each call to
            the child or not. However in addition it may enrich the child's
            environment with contexts and provide more functionality like
            exception handling or synchronization. Typical examples of filters
            are localization filter (provides a localization context),
            synchronization filter (synchronizes on
            <literal>action()</literal> method) and transactional filter that
            does not let through double submits. </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Router</term>

          <listitem>
            <para>Router typically contains many named children, and chooses
            only one to propagate the calls to according to some
            <literal>InputData</literal> parameter. Router may have the
            children either statically preconfigured or created dynamically
            when the request comes (the latter is the case with session
            service router). It may also allow us to add/remove children while
            the application is running. A typical application of a router is
            to distinguish among major application parts by some attribute
            (like component corresponding to a user session, or one of the
            popup window of current user). </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Container</term>

          <listitem>
            <para>Container can have one or many children, but it typically
            will do more with them than just passing the calls to one of them.
            A typical example is the <emphasis>widget container</emphasis>
            service which translates <literal>action()</literal> calls into
            widget <literal>update()/event()/process()/render()</literal>
            cycle. </para>
          </listitem>
        </varlistentry>
      </variablelist></para>

    <para></para>
  </sect1>

  <sect1>
    <title>Configuring Aranea</title>

    <sect2>
      <title>web.xml</title>

      <para>The simplest way to configure Aranea for a web application is to
      set the <literal>araneaApplicationStart</literal> init parameter of the
      dispatcher servlet to the starting widget or flow of the application:
      <programlisting role="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE web-app PUBLIC 
  "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN" 
  "http://java.sun.com/dtd/web-app_2_3.dtd"&gt;

&lt;web-app&gt;
  &lt;listener&gt;
    &lt;listener-class&gt;
      org.araneaframework.http.core.StandardSessionListener
    &lt;/listener-class&gt;
  &lt;/listener&gt;
   
   &lt;servlet&gt;
      &lt;servlet-name&gt;araneaServlet&lt;/servlet-name&gt;
      &lt;servlet-class&gt;
        org.araneaframework.integration.spring.AraneaSpringDispatcherServlet
      &lt;/servlet-class&gt;
      &lt;init-param&gt;
        &lt;param-name&gt;araneaApplicationStart&lt;/param-name&gt;
        &lt;param-value&gt;example.StartWidget&lt;/param-value&gt;
      &lt;/init-param&gt;
      &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
   &lt;/servlet&gt;
   
   &lt;servlet-mapping&gt;
      &lt;servlet-name&gt;araneaServlet&lt;/servlet-name&gt;
      &lt;url-pattern&gt;/main/*&lt;/url-pattern&gt;
   &lt;/servlet-mapping&gt;  
&lt;/web-app&gt;</programlisting></para>

      <para>This configuration will load Aranea using
      <literal>example.StartWidget</literal> as the application starting
      point. <note>
          <para>The servlet must be mapped to a all subpathes starting from
          some prefix (in our case <literal>/main/*</literal>) so that Aranea
          could do some path-dependent operations like extension file
          importing.</para>
        </note><note>
          <para><literal>org.araneaframework.http.core.StandardSessionListener</literal>
          is required to allow Aranea to process events like session
          invalidation.</para>
        </note></para>
    </sect2>

    <sect2>
      <title>aranea-conf.xml</title>

      <para>Aranea can also be configured using a Spring configuration file
      located in <literal>/WEB-INF/aranea-conf.xml</literal>. Particularly it
      may be used to set the starting widget instead of the init-parameter:
      <programlisting role="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" 
  "http://www.springframework.org/dtd/spring-beans.dtd"&gt;

&lt;beans&gt;   
    &lt;bean id="araneaApplicationStart" 
      class="example.StartWidget"
      singleton="false"/&gt;
&lt;/beans&gt;</programlisting></para>

      <para>This seems to be more verbose, but it also allows to override
      Aranea framework components: <programlisting role="xml">&lt;bean class="example.LocalizationFilterService"
  id="araneaLocalizationFilter" singleton="false"&gt;
  &lt;property name="languageName" value="ee"/&gt;
&lt;/bean&gt;</programlisting></para>

      <para>as well as adding custom ones. See <xref linkend="framework" />
      for description of Aranea framework components and ways of extending and
      overriding them.</para>
    </sect2>

    <sect2>
      <title>aranea-conf.properties</title>

      <para>Some of Aranea components can also be configured using a property
      file located in <literal>/WEB-INF/aranea-conf.properties</literal>. The
      following properties are recognized: <informaltable frame="all">
          <tgroup cols="2">
            <colspec colwidth="1*" />

            <colspec colwidth="3*" />

            <thead>
              <row>
                <entry>Property</entry>

                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry><literal>l10n.resourceBundle</literal></entry>

                <entry>The base name of the resource bundle used for
                localization. This value isn't used if default
                <literal>araneaLocalizationFilter</literal> is overidden (e.g.
                by the <literal>SpringLocalizationFilterService</literal>)
                <para><emphasis role="strong">Default value:</emphasis>
                <literal>org.araneaframework.http.support.DefaultResourceBundle</literal></para></entry>
              </row>

              <row>
                <entry><literal>l10n.defaultLocale</literal></entry>

                <entry>The default locale to be used in the application.
                <para><emphasis role="strong">Default value:</emphasis>
                <literal>en</literal></para></entry>
              </row>

              <row>
                <entry><literal>l10n.encoding</literal></entry>

                <entry>The default character encoding to be used throughout
                the application (e.g. for request and response).
                <para><emphasis role="strong">Default value:</emphasis>
                <literal>UTF-8</literal></para></entry>
              </row>

              <row>
                <entry><literal>jsp.path</literal></entry>

                <entry>The path from the webapp root to the directory that
                will act as JSP root. The JSPs put there can be selected using
                widget view selectors (see <xref linkend="TODO" />).
                <para><emphasis role="strong">Default value:</emphasis>
                <literal>/WEB-INF/jsp</literal></para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>
    </sect2>

    <sect2>
      <title>AraneaSpringDispatcherServlet</title>

      <para><literal>AraneaSpringDispatcherServlet</literal> provides a number
      of init-params that allow to further customize Aranea configuration:
      <informaltable frame="all">
          <tgroup cols="2">
            <colspec colwidth="1*" />

            <colspec colwidth="2*" />

            <thead>
              <row>
                <entry>init-param</entry>

                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry><literal>araneaCustomConfXML</literal></entry>

                <entry>The custom location of a Spring XML file used to
                configure Aranea. <para><emphasis role="strong">Default
                value:</emphasis>
                <literal>/WEB-INF/aranea-conf.xml</literal></para></entry>
              </row>

              <row>
                <entry><literal>araneaCustomConfProperties</literal></entry>

                <entry>The custom location of a property file used to
                configure Aranea. <para><emphasis role="strong">Default
                value:</emphasis>
                <literal>/WEB-INF/aranea-conf.properties</literal></para></entry>
              </row>

              <row>
                <entry><literal>araneaApplicationStart</literal></entry>

                <entry>The class name of an Aranea widget that will serve as
                the starting point of an Aranea application. If omitted the
                Spring bean <literal>araneaApplicationStart</literal> will be
                used.</entry>
              </row>

              <row>
                <entry><literal>araneaApplicationRoot</literal></entry>

                <entry>The class name of an Spring bean describing an Aranea
                component that will serve as the framework root. If omitted
                the Spring bean <literal>araneaApplicationRoot</literal> will
                be used. Can be used to override the default configuration
                altogether.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>
    </sect2>

    <sect2>
      <title>Extending Dispatcher</title>

      <para>Currently, the most common way to put Aranea to work is to host it
      in a Servlet 2.3 or compatible container. The most generic way to do
      that is to extend the
      <literal>org.araneaframework.http.core.BaseAraneaDispatcherServlet</literal>
      and build the root component of type
      <literal>org.araneaframework.http.ServletServiceAdapterComponent</literal>
      in the overrided method <literal>buildRootComponent()</literal>:
      <programlisting role="java">package com.foobar.myapp;

class MyServlet extends BaseAraneaDispatcherServlet {
   protected ServletServiceAdapterComponent buildRootComponent() {
     StandardServletServiceAdapterComponent root = new StandardServletServiceAdapterComponent();

     //Configure the child components, service widgets using setter injection
     //...

     return root;
   }
}</programlisting> And one can then use such a servlet to configure Aranea in
      a web application as usually replacing the standard dispatcher servlet
      with our custom one.</para>
    </sect2>
  </sect1>

  <sect1>
    <title>Extensions</title>

    <sect2>
      <title>External resources</title>

      <para>External resources, such as javascript, style and image files of
      Aranea components are managed through different configuration files. The
      resources are listed in XML files and can be accessed through
      <literal>StandardFileImportFilterService</literal>. This approach makes
      it possible to package all the resources into the aranea
      <literal>jar</literal> archives and no manual copying of necessary files
      to fixed locations is needed.</para>

      <para>Aranea comes bundled with a
      <literal>aranea-resources.xml</literal> file which defines all the
      external resources. <programlisting role="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;resources&gt;
  &lt;files content-type="text/css" group="defaultStyles"&gt;
    &lt;file path="styles/_styles_global.css"/&gt;
    ...
    &lt;file path="styles/_styles_screen.css"/&gt;
  &lt;/files&gt;

  &lt;files content-type="image/gif"&gt;
    &lt;file path="gfx/i01.gif"/&gt;
    ...
    &lt;file path="gfx/i02.gif"/&gt;
  &lt;/files&gt;
  ...
&lt;/resources&gt;</programlisting> All the files listed in the configuration
      files are allowed to be loaded through the
      <literal>FileImportFilter</literal>. Some are grouped by name to provide
      an easy access for reading files in bulk.</para>

      <para>To <emphasis>override</emphasis> specific files in the
      configuration file, the new file should be placed in a subdirectory
      <literal>override</literal>. When loading a file, Aranea first trys to
      open the file in the <literal>override</literal> directory and on
      failure trys to read the file without the prefix directory.</para>

      <para>To <emphasis>add</emphasis> files to the defined list, construct a
      configuration file and name it <literal>aranea-resources.xml</literal>.
      All such configuration files from the classpath are parsed for the
      resources. If two file groups are defined with the same name, the group
      is formed by taking a union from the files in the group.</para>

      <para>Groupnames <literal>defaultStyles</literal> and
      <literal>defaultScripts</literal> are predefined groups for managing the
      necessary core files that must be included for Aranea to work
      correctly.</para>

      <para>For custom loading a resource, the URL to use is
      <literal>/fileimporter/filepath</literal>. The
      <literal>fileimporter</literal> is
      <literal>StandardFileImportFilterService.FILE_IMPORTER_NAME</literal>
      and <literal>filepath</literal> is the path that is defined for the file
      in the resource configuration file.</para>

      <para>Extensions of the framework provide their own configuration files
      for configuring their resources. New extensions cannot be defined right
      now on the fly.</para>
    </sect2>
  </sect1>

  <sect1>
    <title>Components</title>

    <para>Aranea configuration is determined by request-processing components
    that can be assembled in many different ways. Following sections are a
    brief reference for pre-existing standard components, most of which are
    also used in Aranea framework default configuration.</para>

    <sect2>
      <title>Core Components</title>

      <!--
      StandardServletServiceAdapterComponent
      StandardSessionListener  -->
    </sect2>

    <sect2>
       

      <title>Routers</title>

      <para> For explanation of router pattern, refer to <xref
      linkend="framework-assembly" /> </para>

      <sect3>
        <title>StandardTopServiceRouterService and
        StandardThreadServiceRouterService</title>

        <para>Top services and thread services are service levels specific to
        Aranea default configuration model. Motivation behind them is desire
        to let one user have more than one servant (service) at time.
        Implementations of <literal>StandardTopServiceRouterService</literal>
        and <literal>StandardThreadServiceRouterService</literal> are almost
        identical, only differences are the context under which these routers
        are made accessible in <literal>Environment</literal> and the service
        key names (these are the keys read from request that identify the top
        level or thread level service to which request should be
        routed).</para>

        <para>It is easily possible to add more service levels, when the need
        should arise. Every service-level router should enrich
        <literal>Environment</literal> with
        <literal>ManagedServiceContext</literal> and service-level specific
        context. Specific context provided by
        <literal>StandardTopServiceRouterService</literal> is
        <literal>TopServiceContext</literal> and by
        <literal>StandardThreadServiceRouterService</literal>—<literal>ThreadContext</literal>.</para>
      </sect3>

       

      <!--
      PathInfoServiceRouterService
      StandardServletSessionRouterService -->

       
    </sect2>

    <sect2 id="framework_filters">
       

      <title>Filters</title>

      <para> For explanation of filter pattern, refer to <xref
      linkend="framework-assembly" /> </para>

      <para>All filters have injectable properties for setting filter's child.
      For services, this property is <literal>childService</literal>, for
      widgets <literal>childWidget</literal>.</para>

       

      <sect3 id="StandardLocalizationFilterService">
        <title>StandardLocalizationFilterService</title>

        <informaltable frame="topbot">
          <tgroup cols="2">
            <colspec colwidth="2*" />

            <colspec colwidth="5*" />

            <tbody>
              <row>
                <entry>Provides</entry>

                <entry>
                  <emphasis>LocalizationContext</emphasis>
                </entry>
              </row>

              <row>
                <entry>Depends on</entry>

                <entry>no dependencies among standard contexts.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para>Provides localization services to children. See <xref
        linkend="LocalizationContext" />.</para>

        <informaltable frame="topbot">
          <tgroup cols="3">
            <colspec colwidth="1*" />

            <colspec colwidth="2*" />

            <thead>
              <row>
                <entry>Injectable properties</entry>

                <entry>Type</entry>

                <entry>Purpose</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>languageName</entry>

                <entry>
                  <literal>java.lang.String</literal>
                </entry>

                <entry>must be a valid ISO Language Code. Sets
                <literal>Locale</literal> according to given language.</entry>
              </row>

              <row>
                <entry>resourceBundleName</entry>

                <entry>
                  <literal>java.lang.String</literal>
                </entry>

                <entry>name of the used resource bundle class.</entry>
              </row>

              <row>
                <entry>locale</entry>

                <entry>
                  <literal>java.util.Locale</literal>
                </entry>

                <entry><literal>Locale</literal> to use. In configuration
                either that or <emphasis>languageName</emphasis> should be
                specified, not both.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

       

      <sect3 id="StandardAjaxFilterService">
        <title>StandardAjaxFilterService</title>

        <para>When serving AJAX requests made with AjaxAnywhere (see <xref
        linkend="ajaxanywhere" />), extracts from the initial response these
        page regions that need to be updated (request includes the names of
        these regions), then modifies the response to include just these
        regions (not the whole page).</para>

        <table frame="topbot">
          <title>Injectable properties</title>

          <tgroup cols="2">
            <colspec colwidth="1*" />

            <colspec colwidth="2*" />

            <thead>
              <row>
                <entry>Name &amp; Type</entry>

                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>characterEncoding <para>
                    <literal>java.lang.String</literal>
                  </para></entry>

                <entry>The character encoding for responses served by this
                filter, default being "UTF-8".</entry>
              </row>

              <row>
                <entry>existingRegions <para>
                    <literal>java.util.List&lt;String&gt;</literal>
                  </para></entry>

                <entry>When the filter is activated, it tries to extract
                specified regions from response, even if they were not
                explicitly asked to be updated in request. This is useful for
                always updating some common page regions (feedback message
                regions etc). Some default region names that should be updated
                when AJAX request is made are <literal>messages</literal>,
                <literal>popupRegistrationRegion</literal>.</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </sect3>

       

      <sect3 id="StandardContextMapFilterWidget">
        <title>StandardContextMapFilterWidget</title>

        <para>Filter widget that enriches children's environment with
        specified context entries.</para>

        <informaltable frame="topbot">
          <tgroup cols="3">
            <colspec colwidth="2*" />

            <colspec colwidth="1*" />

            <colspec colwidth="4*" />

            <thead>
              <row>
                <entry>Injectable properties</entry>

                <entry>Type</entry>

                <entry>Purpose</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>contexts</entry>

                <entry>
                  <literal>java.util.Map</literal>
                </entry>

                <entry><literal>Map</literal>&lt;environmentEntryKey,
                environmentEntryValue&gt;</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

       

      <sect3 id="StandardCriticalExceptionHandlingFilterService">
        <title>StandardCriticalExceptionHandlingFilterService</title>

        <para>Catches the exceptions (if any) occuring while executing
        children's methods; passes the exceptions on to
        <literal>Service</literal> that deals with exception handling
        (obtained from <literal>ExceptionHandlerFactory</literal>).</para>

        <informaltable frame="topbot">
          <tgroup cols="3">
            <colspec colwidth="2*" />

            <colspec colwidth="1*" />

            <colspec colwidth="4*" />

            <thead>
              <row>
                <entry>Injectable properties</entry>

                <entry>Type</entry>

                <entry>Purpose</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>factory</entry>

                <entry>
                  <literal>org.araneaframework.framework.ExceptionHandlerFactory</literal>
                </entry>

                <entry>Factory that produces services dealing with exception
                handling.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

       

      <sect3 id="StandardFileUploadFilterService">
        <title>StandardFileUploadFilterService</title>

        <informaltable frame="topbot">
          <tgroup cols="2">
            <colspec colwidth="2*" />

            <colspec colwidth="5*" />

            <tbody>
              <row>
                <entry>Provides</entry>

                <entry>
                  <emphasis>FileUploadContext</emphasis>
                </entry>
              </row>

              <row>
                <entry>Depends on</entry>

                <entry>no dependencies among standard contexts.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para>Enriches child environment with
        <literal>FileUploadContext</literal> (which is just marker interface).
        When incoming request is multi-part request, children's
        <literal>InputData</literal> is extended with
        <literal>FileUploadInputExtension</literal> that allows children easy
        access to uploaded files.</para>

        <informaltable frame="topbot">
          <tgroup cols="3">
            <colspec colwidth="2*" />

            <colspec colwidth="1*" />

            <colspec colwidth="4*" />

            <thead>
              <row>
                <entry>Injectable properties</entry>

                <entry>Type</entry>

                <entry>Purpose</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>multipartEncoding</entry>

                <entry>
                  <literal>java.lang.String</literal>
                </entry>

                <entry>character encoding that will be used to decode the
                <literal>multipart/form-data</literal> encoded strings. The
                default encoding is determined by <emphasis>Apache
                Commons</emphasis> <literal>FileUpload</literal>
                class.</entry>
              </row>

              <row>
                <entry>useRequestEncoding</entry>

                <entry>
                  <literal>boolean</literal>
                </entry>

                <entry>when set to "true" request character encoding will be
                used to parse the <literal>multipart/form-data</literal>
                encoded strings.</entry>
              </row>

              <row>
                <entry>maximumCachedSize</entry>

                <entry>
                  <literal>java.lang.Integer</literal>
                </entry>

                <entry>maximum size of file that may be cached in
                memory.</entry>
              </row>

              <row>
                <entry>maximumSize</entry>

                <entry>
                  <literal>java.lang.Integer</literal>
                </entry>

                <entry>maximum size of file that may be uploaded to
                server.</entry>
              </row>

              <row>
                <entry>tempDirectory</entry>

                <entry>
                  <literal>java.lang.String</literal>
                </entry>

                <entry>temporary directory to use when uploading
                files.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

       

      <sect3 id="StandardHttpResponseFilterService">
        <title>StandardHttpResponseFilterService</title>

        <para>Filter that sets necessay headers of the response.</para>

        <informaltable frame="topbot">
          <tgroup cols="3">
            <colspec colwidth="2*" />

            <colspec colwidth="1*" />

            <colspec colwidth="4*" />

            <thead>
              <row>
                <entry>Injectable properties</entry>

                <entry>Type</entry>

                <entry>Purpose</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>cacheable</entry>

                <entry>
                  <literal>boolean</literal>
                </entry>

                <entry>Whether the response is cacheable or not. By default it
                is not cacheable.</entry>
              </row>

              <row>
                <entry>contentType</entry>

                <entry>
                  <literal>java.lang.String</literal>
                </entry>

                <entry>Sets the content type of the response. Default is
                "text/html; charset=UTF-8".</entry>
              </row>

              <row>
                <entry>cookies</entry>

                <entry>
                  <literal>java.util.Map</literal>
                </entry>

                <entry>Constructs cookies from the &lt;key, value&gt; pairs in
                the map and sets them in response.</entry>
              </row>

              <row>
                <entry>headers</entry>

                <entry>
                  <literal>java.util.Map</literal>
                </entry>

                <entry>Sets the headers of the response from the map of
                &lt;headerName, headerValue&gt;.</entry>
              </row>

              <row>
                <entry>cacheHoldingTime</entry>

                <entry>
                  <literal>long</literal>
                </entry>

                <entry>Sets the cache-control's max-age parameter, value is in
                milliseconds. Response must be cacheable for this to have any
                effect.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

       

      <sect3 id="StandardJspFilterService">
        <title>StandardJspFilterService</title>

        <informaltable frame="topbot">
          <tgroup cols="2">
            <colspec colwidth="2*" />

            <colspec colwidth="5*" />

            <tbody>
              <row>
                <entry>Provides</entry>

                <entry>
                  <emphasis>JspContext</emphasis>
                </entry>
              </row>

              <row>
                <entry>Depends on</entry>

                <entry><literal>LocalizationContext</literal>
                implementation</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para>Provides JSP specific information to children.</para>

        <informaltable frame="topbot">
          <tgroup cols="3">
            <colspec colwidth="2*" />

            <colspec colwidth="1*" />

            <colspec colwidth="4*" />

            <thead>
              <row>
                <entry>Injectable properties</entry>

                <entry>Type</entry>

                <entry>Purpose</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>submitCharset</entry>

                <entry>
                  <literal>java.lang.String</literal>
                </entry>

                <entry>Sets the "accept-charset" attribute value that will be
                used for rendering Aranea JSP specific <xref
                linkend="systemForm" />.</entry>
              </row>

              <row>
                <entry>jspPath</entry>

                <entry>
                  <literal>java.lang.String</literal>
                </entry>

                <entry>path where widgets rendering themselves with jsp
                templates should search for them. Default is
                "/WEB-INF/jsp".</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

       

      <sect3 id="StandardMessagingFilterWidget">
        <title>StandardMessagingFilterWidget</title>

        <informaltable frame="topbot">
          <tgroup cols="2">
            <colspec colwidth="2*" />

            <colspec colwidth="5*" />

            <tbody>
              <row>
                <entry>Provides</entry>

                <entry>
                  <emphasis>MessageContext</emphasis>
                </entry>
              </row>

              <row>
                <entry>Depends on</entry>

                <entry>no dependencies among standard contexts.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para>See <xref linkend="MessageContext" />.</para>
      </sect3>

       

      <sect3 id="StandardPopupFilterWidget">
        <title>StandardPopupFilterWidget</title>

        <informaltable frame="topbot">
          <tgroup cols="2">
            <colspec colwidth="2*" />

            <colspec colwidth="5*" />

            <tbody>
              <row>
                <entry>Provides</entry>

                <entry>
                  <emphasis>PopupWindowContext</emphasis>
                </entry>
              </row>

              <row>
                <entry>Depends on</entry>

                <entry><literal>ThreadContext</literal> implementation,
                <literal>TopServiceContext</literal> implementation</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para>Provides methods for opening new session-threads and renders
        these in different browser windows at client-side.</para>

        <informaltable frame="topbot">
          <tgroup cols="3">
            <colspec colwidth="2*" />

            <colspec colwidth="1*" />

            <colspec colwidth="4*" />

            <thead>
              <row>
                <entry>Injectable properties</entry>

                <entry>Type</entry>

                <entry>Purpose</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>threadServiceFactory</entry>

                <entry>
                  <literal>org.araneaframework.core.ServiceFactory</literal>
                </entry>

                <entry>factory that should build the component chain according
                to effective Aranea configuration, beginning with
                sessionthread-level filters.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

       

      <sect3 id="StandardSerializingAuditFilterService">
        <title>StandardSerializingAuditFilterService</title>

        <para>Serializes the the session during the request routing. This
        filter helps to be aware of serializing issues during development as
        when the session does not serialize, exception is always thrown. In
        production configuration, this filter should never be enabled.</para>

        <informaltable frame="topbot">
          <tgroup cols="3">
            <colspec colwidth="2*" />

            <colspec colwidth="1*" />

            <colspec colwidth="4*" />

            <thead>
              <row>
                <entry>Injectable properties</entry>

                <entry>Type</entry>

                <entry>Purpose</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>testXmlSessionPath</entry>

                <entry>
                  <literal>java.lang.String</literal>
                </entry>

                <entry>the path where the serialized sessions should be logged
                in XML format. If not specified, serialization tests are
                performed in-memory.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

       

      <sect3 id="StandardStatisticFilterService">
        <title>StandardStatisticFilterService</title>

        <para>Filter that logs the time it takes for the child service to
        serve the request (complete its action method).</para>

        <informaltable frame="topbot">
          <tgroup cols="3">
            <colspec colwidth="2*" />

            <colspec colwidth="1*" />

            <colspec colwidth="4*" />

            <thead>
              <row>
                <entry>Injectable properties</entry>

                <entry>Type</entry>

                <entry>Purpose</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>namespace</entry>

                <entry>
                  <literal>java.lang.String</literal>
                </entry>

                <entry>Prefix namespace for logging statement.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

       

      <sect3 id="StandardSynchronizingFilterService">
        <title>StandardSynchronizingFilterService</title>

        <para>Synchronizes the calls to its child widget. Enriches environment
        with <literal>SynchronizingContext</literal> (which is just marker
        interface).</para>
      </sect3>

       

      <sect3 id="StandardThreadCloningFilterService">
        <title>StandardThreadCloningFilterService</title>

        <informaltable frame="topbot">
          <tgroup cols="2">
            <colspec colwidth="2*" />

            <colspec colwidth="5*" />

            <tbody>
              <row>
                <entry>Provides</entry>

                <entry>
                  <emphasis>ThreadCloningContext</emphasis>
                </entry>
              </row>

              <row>
                <entry>Depends on</entry>

                <entry><literal>ThreadContext</literal> implementation,
                <literal>TopServiceContext</literal> implementation</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para>Implementation of a service that clones currently running
        session thread upon request and sends a response that redirects to
        cloned session thread. It can be used to support "open link in new
        window" feature in browsers. Cloning is generic and resource
        demanding, as whole tree of session thread components is recreated.
        Custom applications may find that they can implement some application
        specific cloning strategy that demands less memory and processing
        power.</para>

        <informaltable frame="topbot">
          <tgroup cols="3">
            <colspec colwidth="2*" />

            <colspec colwidth="1*" />

            <colspec colwidth="4*" />

            <thead>
              <row>
                <entry>Injectable properties</entry>

                <entry>Type</entry>

                <entry>Purpose</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>timeToLive</entry>

                <entry>
                  <literal>java.lang.Long</literal>
                </entry>

                <entry>Inactivity time for cloned thread after which thread
                router may kill the thread service. This is specified in
                milliseconds. If unset, threads created by cloning service
                usually live until HTTP session in which they were spawned
                expires.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

       

      <sect3 id="StandardTransactionFilterWidget">
        <title>StandardTransactionFilterWidget</title>

        <informaltable frame="topbot">
          <tgroup cols="2">
            <colspec colwidth="2*" />

            <colspec colwidth="5*" />

            <tbody>
              <row>
                <entry>Provides</entry>

                <entry>
                  <emphasis>TransactionContext</emphasis>
                </entry>
              </row>

              <row>
                <entry>Depends on</entry>

                <entry>no dependencies among standard contexts.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para><emphasis>TransactionContext</emphasis> implementation that
        filters routing of duplicate requests. The detection of duplicate
        requests is achieved through defining new transaction ID in each
        response and checking that next request submits the consistent
        transaction ID. Missing (<emphasis>null</emphasis>) transaction ID is
        always considered inconsistent. For purposes of asynchronous requests,
        <literal>override</literal> transaction ID is always considered
        consistent.</para>

        <table frame="all">
          <title>Request parameters</title>

          <tgroup cols="2">
            <colspec colwidth="1*" />

            <colspec colwidth="2*" />

            <thead>
              <row>
                <entry>Parameter name</entry>

                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>
                  <literal>transactionId</literal>
                </entry>

                <entry>Transaction id must be equal to the last one generated
                for the transaction to be consistent.</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </sect3>

       

      <!--  StandardContinuationFilterService
      StandardFileImportFilterService -->

       
    </sect2>

    <sect2>
      <title>Containers</title>

      <sect3 id="StandardFlowContainerWidget">
        <title>Flow Container</title>

        <informaltable frame="topbot">
          <tgroup cols="2">
            <colspec colwidth="2*" />

            <colspec colwidth="5*" />

            <tbody>
              <row>
                <entry>Provides</entry>

                <entry><emphasis>FlowContext</emphasis></entry>
              </row>

              <row>
                <entry>Depends on</entry>

                <entry>no dependencies among standard contexts.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para>See <xref linkend="FlowContext" /> for purpose and philosophy
        behind <emphasis>FlowContext</emphasis>.</para>

        <informaltable frame="topbot">
          <tgroup cols="2">
            <colspec colwidth="2*" />

            <colspec colwidth="5*" />

            <thead>
              <row>
                <entry>Injectable properties</entry>

                <entry>Purpose</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>top</entry>

                <entry><literal> org.araneaframework.Widget </literal> First
                widget to be started in this container.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

      <sect3 id="StandardContainers">
        <title>StandardContainerService, StandardContainerWidget</title>

        <para>Although classified as container,
        <literal>StandardContainerService</literal> is really a filter. It
        acts as intelligent container, by routing an
        <literal>action()</literal> to its child service only when the request
        <literal>InputData</literal> is such that demands it.</para>

        <para><literal>StandardContainerWidget</literal> is also much like
        filter, it contains one child widget—but unlike in
        <literal>FilterWidgets</literal>, this child is named. Child contained
        in <literal>StandardContainerWidget</literal> is often referred to as
        root widget, as in standard Aranea configuration it starts the
        hierarchy of real application widgets.</para>

        <informaltable frame="topbot">
          <tgroup cols="2">
            <colspec colwidth="2*" />

            <colspec colwidth="5*" />

            <tbody>
              <row>
                <entry>Provides</entry>

                <entry><emphasis>FlowContext</emphasis></entry>
              </row>

              <row>
                <entry>Depends on</entry>

                <entry>no dependencies among standard contexts.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para>See <xref linkend="FlowContext" /> for purpose and philosophy
        behind <emphasis>FlowContext</emphasis>.</para>

        <informaltable frame="topbot">
          <tgroup cols="2">
            <colspec colwidth="2*" />

            <colspec colwidth="5*" />

            <thead>
              <row>
                <entry>Injectable properties</entry>

                <entry>Purpose</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>top</entry>

                <entry><literal> org.araneaframework.Widget </literal> First
                widget to be started in this container.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

      <!--
      ExceptionHandlingFlowContainerWidget
      StandardServiceAdapterWidget
      StandardWidgetAdapterService
      PathInfoServiceContainerService -->
    </sect2>

    <sect2>
      <title>Other</title>
    </sect2>
  </sect1>

  <!-- sect1>
  <sect1>
    <title>Exception Handling</title>
  </sect1-->
</chapter>